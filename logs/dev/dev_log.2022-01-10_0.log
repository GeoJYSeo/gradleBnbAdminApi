INFO  22-01-10 09:29:29[background-preinit] [Version:21] - HV000001: Hibernate Validator 6.2.0.Final
INFO  22-01-10 09:29:29[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 09:29:29[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 09:29:29[restartedMain] [DevToolsPropertyDefaultsPostProcessor:255] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
INFO  22-01-10 09:29:29[restartedMain] [DevToolsPropertyDefaultsPostProcessor:255] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
INFO  22-01-10 09:29:42[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 09:29:44[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2446 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 09:29:46[restartedMain] [InstanceMetadataServiceResourceFetcher:105] - Fail to retrieve token 
com.amazonaws.SdkClientException: Failed to connect to service endpoint: 
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:100)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.getToken(InstanceMetadataServiceResourceFetcher.java:91)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.readResource(InstanceMetadataServiceResourceFetcher.java:69)
	at com.amazonaws.internal.EC2ResourceFetcher.readResource(EC2ResourceFetcher.java:66)
	at com.amazonaws.util.EC2MetadataUtils.getItems(EC2MetadataUtils.java:402)
	at com.amazonaws.util.EC2MetadataUtils.getData(EC2MetadataUtils.java:371)
	at org.springframework.cloud.aws.context.support.env.AwsCloudEnvironmentCheckUtils.isRunningOnCloudEnvironment(AwsCloudEnvironmentCheckUtils.java:38)
	at org.springframework.cloud.aws.context.annotation.OnAwsCloudEnvironmentCondition.matches(OnAwsCloudEnvironmentCondition.java:38)
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:489)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.Socket.connect(Socket.java:609)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:177)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:341)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:362)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1253)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1232)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1015)
	at com.amazonaws.internal.ConnectionUtils.connectToEndpoint(ConnectionUtils.java:52)
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:80)
	... 29 common frames omitted
WARN  22-01-10 09:29:46[restartedMain] [EC2MetadataUtils:409] - Unable to retrieve the requested metadata (/latest/meta-data/instance-id). Failed to connect to service endpoint: 
com.amazonaws.SdkClientException: Failed to connect to service endpoint: 
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:100)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.getToken(InstanceMetadataServiceResourceFetcher.java:91)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.readResource(InstanceMetadataServiceResourceFetcher.java:69)
	at com.amazonaws.internal.EC2ResourceFetcher.readResource(EC2ResourceFetcher.java:66)
	at com.amazonaws.util.EC2MetadataUtils.getItems(EC2MetadataUtils.java:402)
	at com.amazonaws.util.EC2MetadataUtils.getData(EC2MetadataUtils.java:371)
	at org.springframework.cloud.aws.context.support.env.AwsCloudEnvironmentCheckUtils.isRunningOnCloudEnvironment(AwsCloudEnvironmentCheckUtils.java:38)
	at org.springframework.cloud.aws.context.annotation.OnAwsCloudEnvironmentCondition.matches(OnAwsCloudEnvironmentCondition.java:38)
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:489)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.Socket.connect(Socket.java:609)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:177)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:341)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:362)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1253)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1232)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1015)
	at com.amazonaws.internal.ConnectionUtils.connectToEndpoint(ConnectionUtils.java:52)
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:80)
	... 29 common frames omitted
WARN  22-01-10 09:29:47[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 09:29:51[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 09:29:51[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 09:29:51[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 09:29:51[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 09:29:51[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 09:29:51[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 21721 ms
INFO  22-01-10 09:29:52[restartedMain] [HikariDataSource:110] - HikariPool-1 - Starting...
INFO  22-01-10 09:29:53[restartedMain] [HikariDataSource:123] - HikariPool-1 - Start completed.
INFO  22-01-10 09:29:54[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 09:29:54[restartedMain] [Version:44] - HHH000412: Hibernate ORM core version 5.4.32.Final
INFO  22-01-10 09:29:56[restartedMain] [Version:56] - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
INFO  22-01-10 09:29:57[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 09:30:04[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 09:30:04[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 09:30:04[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 09:30:11[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 042b41cc-ef1b-4d6f-8d35-ac1c5c1e2f8a

INFO  22-01-10 09:30:13[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6eb622a, org.springframework.security.web.context.SecurityContextPersistenceFilter@5846d0c, org.springframework.security.web.header.HeaderWriterFilter@590bef05, org.springframework.web.filter.CorsFilter@4bcf147, org.springframework.security.web.authentication.logout.LogoutFilter@33961970, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@4c1b0e3e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6c926367, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@d468677, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@35f154c6, org.springframework.security.web.session.SessionManagementFilter@5cac1d9e, org.springframework.security.web.access.ExceptionTranslationFilter@5828e489]
INFO  22-01-10 09:30:18[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 09:30:19[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 09:30:19[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 09:30:19[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 54.407 seconds (JVM running for 56.46)
INFO  22-01-10 09:34:38[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 09:34:38[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 09:34:38[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 2 ms
ERROR 22-01-10 09:34:38[http-nio-8080-exec-1] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-09T07:05:34Z. Current time: 2022-01-10T09:34:38Z, a difference of 95344645 milliseconds.  Allowed clock skew: 0 milliseconds.
DEBUG 22-01-10 09:34:39[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 09:34:39[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 33 msec}
INFO  22-01-10 09:34:39[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-09 19:34:25.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

ERROR 22-01-10 09:34:39[http-nio-8080-exec-2] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-09T07:05:34Z. Current time: 2022-01-10T09:34:39Z, a difference of 95345596 milliseconds.  Allowed clock skew: 0 milliseconds.
DEBUG 22-01-10 09:34:39[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 09:34:39[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 09:34:39[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-09 19:34:25.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 09:34:40[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. update user set last_login_at='01/10/2022 09:34:39.753' where id=2

DEBUG 22-01-10 09:34:40[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. update user set last_login_at='01/10/2022 09:34:39.752' where id=2

DEBUG 22-01-10 09:34:40[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. update user set last_login_at='01/10/2022 09:34:39.753' where id=2
 {executed in 1 msec}
DEBUG 22-01-10 09:34:40[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. update user set last_login_at='01/10/2022 09:34:39.752' where id=2
 {executed in 43 msec}
DEBUG 22-01-10 09:35:42[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 09:35:42[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 09:35:42[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 09:35:42[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 09:35:42[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 09:35:42[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 09:35:42[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 09:35:42[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-10 09:35:42[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 09:39:33[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 09:39:33[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 3 msec}
INFO  22-01-10 09:39:33[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 09:39:33[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 09:39:33[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 09:39:33[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 09:39:33[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 09:39:33[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 09:39:33[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 09:59:15[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 09:59:15[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-10 09:59:15[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 09:59:15[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 09:59:15[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 09:59:15[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 09:59:15[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 09:59:15[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 09:59:15[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 10:00:35[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 10:00:35[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 3 msec}
INFO  22-01-10 10:00:35[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 10:00:35[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 10:00:35[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 10:00:35[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 10:00:35[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 10:00:35[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 10:00:35[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 10:18:00[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 10:18:00[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-10 10:18:00[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 10:18:00[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 10:18:00[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 10:18:00[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 10:18:00[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 10:18:00[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 10:18:00[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 10:19:44[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 10:19:44[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 10:19:44[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 10:19:44[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 10:19:44[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 10:19:44[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 10:19:44[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 10:19:44[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 10:19:44[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 10:20:08[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 10:20:08[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 10:20:08[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 10:20:08[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 10:20:08[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 10:20:08[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 10:20:08[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 10:20:08[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 10:20:08[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 11:31:35[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 11:31:35[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-10 11:31:35[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 11:31:35[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 11:31:35[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 11:31:35[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 11:31:35[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 11:31:35[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 11:31:35[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 11:33:07[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 11:33:07[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-10 11:33:07[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 11:33:07[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 11:33:07[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 11:33:07[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 11:33:07[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 11:33:07[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 11:33:07[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 11:34:09[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 11:34:09[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 11:34:09[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 11:34:09[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 11:34:09[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 11:34:09[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 11:34:09[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 11:34:10[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 11:49:15[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 11:49:15[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 11:49:15[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 11:49:15[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 11:49:15[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 11:49:15[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 11:49:15[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 11:49:15[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 11:49:15[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:09:02[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:09:02[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 4 msec}
INFO  22-01-10 12:09:02[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:09:02[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:09:02[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:09:02[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:09:02[http-nio-8080-exec-2] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 12:09:02[http-nio-8080-exec-2] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 12:09:02[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:09:02[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:09:02[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:09:02[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=2

ERROR 22-01-10 12:09:02[http-nio-8080-exec-2] [sqlonly:140] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=2

java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
ERROR 22-01-10 12:09:02[http-nio-8080-exec-2] [sqltiming:150] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=2
 {FAILED after 142 msec}
java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
WARN  22-01-10 12:09:02[http-nio-8080-exec-2] [SqlExceptionHelper:137] - SQL Error: 1054, SQLState: 42S22
ERROR 22-01-10 12:09:02[http-nio-8080-exec-2] [SqlExceptionHelper:142] - Unknown column 'photolist0_.accommodation_id' in 'field list'
ERROR 22-01-10 12:09:03[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.hibernate.exception.SQLGrammarException: could not extract ResultSet] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 12:09:18[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:09:18[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:09:18[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:09:18[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:09:18[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:09:18[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:09:18[http-nio-8080-exec-4] [PhotoLogicServiceImpl:63] - Create Original Photo name: bnb_test4.jpg
INFO  22-01-10 12:09:18[http-nio-8080-exec-4] [PhotoLogicServiceImpl:64] - email: test@gmail.com
DEBUG 22-01-10 12:09:18[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:09:18[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:09:18[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:09:18[http-nio-8080-exec-4] [HandlingS3:63] - Create user: test@gmail.com
INFO  22-01-10 12:09:18[http-nio-8080-exec-4] [HandlingS3:66] - Upload photo name: bnb_test4_1641816558727.jpg
INFO  22-01-10 12:09:18[http-nio-8080-exec-4] [HandlingS3:111] - Photo: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@1da3a602
INFO  22-01-10 12:09:20[http-nio-8080-exec-4] [HandlingS3:71] - S3Url: https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641816558727.jpg
INFO  22-01-10 12:09:20[http-nio-8080-exec-4] [HandlingS3:76] - Create CALLBACK start
INFO  22-01-10 12:09:20[http-nio-8080-exec-4] [HandlingS3:86] - Create Photo: Photo(id=null, name=bnb_test4_1641816558727.jpg, size=93116, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641816558727.jpg, delFlg=STORED, createdAt=2022-01-10T12:09:20.368315, UpdatedAt=null, accommodation=null)
DEBUG 22-01-10 12:09:20[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:09:20.487', 0, 'bnb_test4_1641816558727.jpg', 93116, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641816558727.jpg', 2)

DEBUG 22-01-10 12:09:20[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:09:20.487', 0, 'bnb_test4_1641816558727.jpg', 93116, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641816558727.jpg', 2)
 {executed in 11 msec}
DEBUG 22-01-10 12:09:20[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:09:20.487', 0, 'bnb_test4_1641816558727.jpg', 93116, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641816558727.jpg', 2)
 {executed in 1 msec}
INFO  22-01-10 12:09:20[http-nio-8080-exec-4] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

DEBUG 22-01-10 12:09:24[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:09:24[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [PhotoLogicServiceImpl:63] - Create Original Photo name: bnb_test5.jpg
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [PhotoLogicServiceImpl:64] - email: test@gmail.com
DEBUG 22-01-10 12:09:24[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:09:24[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [HandlingS3:63] - Create user: test@gmail.com
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [HandlingS3:66] - Upload photo name: bnb_test5_1641816564759.jpg
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [HandlingS3:111] - Photo: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@246ecb44
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [HandlingS3:71] - S3Url: https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test5_1641816564759.jpg
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [HandlingS3:76] - Create CALLBACK start
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [HandlingS3:86] - Create Photo: Photo(id=null, name=bnb_test5_1641816564759.jpg, size=65006, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test5_1641816564759.jpg, delFlg=STORED, createdAt=2022-01-10T12:09:24.862136, UpdatedAt=null, accommodation=null)
DEBUG 22-01-10 12:09:24[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:09:24.862', 0, 'bnb_test5_1641816564759.jpg', 65006, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test5_1641816564759.jpg', 2)

DEBUG 22-01-10 12:09:24[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:09:24.862', 0, 'bnb_test5_1641816564759.jpg', 65006, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test5_1641816564759.jpg', 2)
 {executed in 1 msec}
DEBUG 22-01-10 12:09:24[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:09:24.862', 0, 'bnb_test5_1641816564759.jpg', 65006, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test5_1641816564759.jpg', 2)
 {executed in 0 msec}
INFO  22-01-10 12:09:24[http-nio-8080-exec-3] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

DEBUG 22-01-10 12:09:27[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:09:27[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [PhotoLogicServiceImpl:63] - Create Original Photo name: bnb_test6.jpg
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [PhotoLogicServiceImpl:64] - email: test@gmail.com
DEBUG 22-01-10 12:09:27[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:09:27[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [HandlingS3:63] - Create user: test@gmail.com
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [HandlingS3:66] - Upload photo name: bnb_test6_1641816567642.jpg
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [HandlingS3:111] - Photo: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@182f88bb
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [HandlingS3:71] - S3Url: https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test6_1641816567642.jpg
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [HandlingS3:76] - Create CALLBACK start
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [HandlingS3:86] - Create Photo: Photo(id=null, name=bnb_test6_1641816567642.jpg, size=39900, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test6_1641816567642.jpg, delFlg=STORED, createdAt=2022-01-10T12:09:27.845984, UpdatedAt=null, accommodation=null)
DEBUG 22-01-10 12:09:27[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:09:27.846', 0, 'bnb_test6_1641816567642.jpg', 39900, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test6_1641816567642.jpg', 2)

DEBUG 22-01-10 12:09:27[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:09:27.846', 0, 'bnb_test6_1641816567642.jpg', 39900, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test6_1641816567642.jpg', 2)
 {executed in 0 msec}
DEBUG 22-01-10 12:09:27[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:09:27.846', 0, 'bnb_test6_1641816567642.jpg', 39900, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test6_1641816567642.jpg', 2)
 {executed in 0 msec}
INFO  22-01-10 12:09:27[http-nio-8080-exec-5] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|3             |
|--------------|

DEBUG 22-01-10 12:11:24[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:11:24[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:11:24[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:11:24[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:11:24[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:11:24[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:11:24[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:11:24[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:11:24[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:12:05[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:12:05[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:12:05[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:12:05[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:12:05[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:12:05[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:12:05[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:12:05[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:12:05[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:15:40[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:15:40[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:55] - email: test@gmail.com
INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:76] - Conveniences builder.
DEBUG 22-01-10 12:15:40[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:15:40[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:15:40[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into accommodation (building_type, created_at, description, large_building_type, maximum_guest_count, title, user_id) values ('Annex For Guest', '01/10/2022 12:15:40.704', 'good accomodation
not bad', 'Secondary Unit', 1, 'test title', 2)

DEBUG 22-01-10 12:15:40[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into accommodation (building_type, created_at, description, large_building_type, maximum_guest_count, title, user_id) values ('Annex For Guest', '01/10/2022 12:15:40.704', 'good accomodation
not bad', 'Secondary Unit', 1, 'test title', 2)
 {executed in 4 msec}
DEBUG 22-01-10 12:15:40[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into accommodation (building_type, created_at, description, large_building_type, maximum_guest_count, title, user_id) values ('Annex For Guest', '01/10/2022 12:15:40.704', 'good accomodation
not bad', 'Secondary Unit', 1, 'test title', 2)
 {executed in 0 msec}
INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|14            |
|--------------|

INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:93] - Conveniences builder.
INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:105] - Conveniences save: Conveniences(id=null, kitchen=NOT, laundryRoom=NOT, parkingLot=NOT, gym=NOT, swimmingPool=NOT, jacuzzi=NOT, createdAt=null, updatedAt=null, accommodation=Accommodation(id=14, title=test title, largeBuildingType=Secondary Unit, buildingType=Annex For Guest, maximumGuestCount=1, description=good accomodation
not bad, createdAt=2022-01-10T12:15:40.704277, updatedAt=null, user=User(id=2, email=test@gmail.com, password=$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa, firstname=example, lastname=test, birthday=2011/September/18, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T09:34:40, createdAt=2022-01-09T19:34:19, updatedAt=null)))
DEBUG 22-01-10 12:15:40[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into conveniences (accommodation_id, created_at, gym, jacuzzi, kitchen, laundry_room, parking_lot, swimming_pool) values (14, '01/10/2022 12:15:40.950', 1, 1, 1, 1, 1, 1)

DEBUG 22-01-10 12:15:40[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into conveniences (accommodation_id, created_at, gym, jacuzzi, kitchen, laundry_room, parking_lot, swimming_pool) values (14, '01/10/2022 12:15:40.950', 1, 1, 1, 1, 1, 1)
 {executed in 6 msec}
DEBUG 22-01-10 12:15:40[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into conveniences (accommodation_id, created_at, gym, jacuzzi, kitchen, laundry_room, parking_lot, swimming_pool) values (14, '01/10/2022 12:15:40.950', 1, 1, 1, 1, 1, 1)
 {executed in 0 msec}
INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|12            |
|--------------|

INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:110] - Location builder.
INFO  22-01-10 12:15:40[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:123] - Location save: Location(id=null, latitude=35, longitude=139, state=Ota City, city=Ōmorihigashi, streetAddress=3-chōme 27, detailAddress=test, postcode=Japan, createdAt=null, updatedAt=null, accommodation=Accommodation(id=14, title=test title, largeBuildingType=Secondary Unit, buildingType=Annex For Guest, maximumGuestCount=1, description=good accomodation
not bad, createdAt=2022-01-10T12:15:40.704277, updatedAt=null, user=User(id=2, email=test@gmail.com, password=$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa, firstname=example, lastname=test, birthday=2011/September/18, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T09:34:40, createdAt=2022-01-09T19:34:19, updatedAt=null)))
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into location (accommodation_id, city, created_at, detail_address, latitude, longitude, postcode, state, street_address) values (14, 'Ōmorihigashi', '01/10/2022 12:15:41.039', 'test', 35, 139, 'Japan', 'Ota City', '3-chōme 27')

DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into location (accommodation_id, city, created_at, detail_address, latitude, longitude, postcode, state, street_address) values (14, 'Ōmorihigashi', '01/10/2022 12:15:41.039', 'test', 35, 139, 'Japan', 'Ota City', '3-chōme 27')
 {executed in 3 msec}
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into location (accommodation_id, city, created_at, detail_address, latitude, longitude, postcode, state, street_address) values (14, 'Ōmorihigashi', '01/10/2022 12:15:41.039', 'test', 35, 139, 'Japan', 'Ota City', '3-chōme 27')
 {executed in 0 msec}
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|12            |
|--------------|

INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:128] - Vacancy builder.
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:137] - Vacancy save: Vacancy(id=null, price=5013123000, startDate=2022-01-08, endDate=2022-02-04, createdAt=null, updatedAt=null, accommodation=Accommodation(id=14, title=test title, largeBuildingType=Secondary Unit, buildingType=Annex For Guest, maximumGuestCount=1, description=good accomodation
not bad, createdAt=2022-01-10T12:15:40.704277, updatedAt=null, user=User(id=2, email=test@gmail.com, password=$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa, firstname=example, lastname=test, birthday=2011/September/18, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T09:34:40, createdAt=2022-01-09T19:34:19, updatedAt=null)))
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into vacancy (accommodation_id, created_at, end_date, price, start_date) values (14, '01/10/2022 12:15:41.127', '2022-02-04', '5013123000', '2022-01-08')

DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into vacancy (accommodation_id, created_at, end_date, price, start_date) values (14, '01/10/2022 12:15:41.127', '2022-02-04', '5013123000', '2022-01-08')
 {executed in 3 msec}
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into vacancy (accommodation_id, created_at, end_date, price, start_date) values (14, '01/10/2022 12:15:41.127', '2022-02-04', '5013123000', '2022-01-08')
 {executed in 0 msec}
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|10            |
|--------------|

INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:142] - Room builder.
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:152] - Bed save: Room(id=null, number=0, type=private, isSetUpForGuest=NO, bathroomCount=2, bathroomType=private, createdAt=null, updatedAt=null, accommodation=Accommodation(id=14, title=test title, largeBuildingType=Secondary Unit, buildingType=Annex For Guest, maximumGuestCount=1, description=good accomodation
not bad, createdAt=2022-01-10T12:15:40.704277, updatedAt=null, user=User(id=2, email=test@gmail.com, password=$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa, firstname=example, lastname=test, birthday=2011/September/18, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T09:34:40, createdAt=2022-01-09T19:34:19, updatedAt=null)))
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into room (accommodation_id, bathroom_count, bathroom_type, created_at, is_set_up_for_guest, number, type) values (14, 2, 'private', '01/10/2022 12:15:41.216', 1, 0, 'private')

DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into room (accommodation_id, bathroom_count, bathroom_type, created_at, is_set_up_for_guest, number, type) values (14, 2, 'private', '01/10/2022 12:15:41.216', 1, 0, 'private')
 {executed in 4 msec}
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into room (accommodation_id, bathroom_count, bathroom_type, created_at, is_set_up_for_guest, number, type) values (14, 2, 'private', '01/10/2022 12:15:41.216', 1, 0, 'private')
 {executed in 0 msec}
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|9             |
|--------------|

INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:157] - Private bed builder.
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:171] - Private bed save: Bed(id=null, type=Air Mettress, count=3, isPrivate=Yes, createdAt=null, updatedAt=null, room=Room(id=9, number=0, type=private, isSetUpForGuest=NO, bathroomCount=2, bathroomType=private, createdAt=2022-01-10T12:15:41.216850, updatedAt=null, accommodation=Accommodation(id=14, title=test title, largeBuildingType=Secondary Unit, buildingType=Annex For Guest, maximumGuestCount=1, description=good accomodation
not bad, createdAt=2022-01-10T12:15:40.704277, updatedAt=null, user=User(id=2, email=test@gmail.com, password=$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa, firstname=example, lastname=test, birthday=2011/September/18, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T09:34:40, createdAt=2022-01-09T19:34:19, updatedAt=null))))
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into bed (count, created_at, is_private, room_id, type) values (3, '01/10/2022 12:15:41.311', 0, 9, 'Air Mettress')

DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into bed (count, created_at, is_private, room_id, type) values (3, '01/10/2022 12:15:41.311', 0, 9, 'Air Mettress')
 {executed in 4 msec}
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into bed (count, created_at, is_private, room_id, type) values (3, '01/10/2022 12:15:41.311', 0, 9, 'Air Mettress')
 {executed in 1 msec}
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|29            |
|--------------|

INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:171] - Private bed save: Bed(id=null, type=Double, count=3, isPrivate=Yes, createdAt=null, updatedAt=null, room=Room(id=9, number=0, type=private, isSetUpForGuest=NO, bathroomCount=2, bathroomType=private, createdAt=2022-01-10T12:15:41.216850, updatedAt=null, accommodation=Accommodation(id=14, title=test title, largeBuildingType=Secondary Unit, buildingType=Annex For Guest, maximumGuestCount=1, description=good accomodation
not bad, createdAt=2022-01-10T12:15:40.704277, updatedAt=null, user=User(id=2, email=test@gmail.com, password=$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa, firstname=example, lastname=test, birthday=2011/September/18, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T09:34:40, createdAt=2022-01-09T19:34:19, updatedAt=null))))
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into bed (count, created_at, is_private, room_id, type) values (3, '01/10/2022 12:15:41.340', 0, 9, 'Double')

DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into bed (count, created_at, is_private, room_id, type) values (3, '01/10/2022 12:15:41.340', 0, 9, 'Double')
 {executed in 1 msec}
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into bed (count, created_at, is_private, room_id, type) values (3, '01/10/2022 12:15:41.340', 0, 9, 'Double')
 {executed in 0 msec}
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|30            |
|--------------|

INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:171] - Private bed save: Bed(id=null, type=Air Mettress, count=4, isPrivate=Yes, createdAt=null, updatedAt=null, room=Room(id=9, number=0, type=private, isSetUpForGuest=NO, bathroomCount=2, bathroomType=private, createdAt=2022-01-10T12:15:41.216850, updatedAt=null, accommodation=Accommodation(id=14, title=test title, largeBuildingType=Secondary Unit, buildingType=Annex For Guest, maximumGuestCount=1, description=good accomodation
not bad, createdAt=2022-01-10T12:15:40.704277, updatedAt=null, user=User(id=2, email=test@gmail.com, password=$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa, firstname=example, lastname=test, birthday=2011/September/18, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T09:34:40, createdAt=2022-01-09T19:34:19, updatedAt=null))))
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into bed (count, created_at, is_private, room_id, type) values (4, '01/10/2022 12:15:41.350', 0, 9, 'Air Mettress')

DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into bed (count, created_at, is_private, room_id, type) values (4, '01/10/2022 12:15:41.350', 0, 9, 'Air Mettress')
 {executed in 1 msec}
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into bed (count, created_at, is_private, room_id, type) values (4, '01/10/2022 12:15:41.350', 0, 9, 'Air Mettress')
 {executed in 0 msec}
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|31            |
|--------------|

INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:177] - Public bed builder
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:189] - Public bed save: Bed(id=null, type=Single, count=2, isPrivate=NO, createdAt=null, updatedAt=null, room=Room(id=9, number=0, type=private, isSetUpForGuest=NO, bathroomCount=2, bathroomType=private, createdAt=2022-01-10T12:15:41.216850, updatedAt=null, accommodation=Accommodation(id=14, title=test title, largeBuildingType=Secondary Unit, buildingType=Annex For Guest, maximumGuestCount=1, description=good accomodation
not bad, createdAt=2022-01-10T12:15:40.704277, updatedAt=null, user=User(id=2, email=test@gmail.com, password=$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa, firstname=example, lastname=test, birthday=2011/September/18, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T09:34:40, createdAt=2022-01-09T19:34:19, updatedAt=null))))
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into bed (count, created_at, is_private, room_id, type) values (2, '01/10/2022 12:15:41.360', 1, 9, 'Single')

DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into bed (count, created_at, is_private, room_id, type) values (2, '01/10/2022 12:15:41.360', 1, 9, 'Single')
 {executed in 0 msec}
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into bed (count, created_at, is_private, room_id, type) values (2, '01/10/2022 12:15:41.360', 1, 9, 'Single')
 {executed in 0 msec}
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|32            |
|--------------|

INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:195] - Amenities builder.
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:215] - Amenities save: Amenities(id=null, wifi=NOT, tv=NOT, heater=NOT, airConditioner=NOT, iron=NOT, shampoo=NOT, hairDryer=NOT, breakfast=NOT, businessSpace=NOT, fireplace=NOT, closet=NOT, guestEntrance=NOT, createdAt=null, updatedAt=null, room=Room(id=9, number=0, type=private, isSetUpForGuest=NO, bathroomCount=2, bathroomType=private, createdAt=2022-01-10T12:15:41.216850, updatedAt=null, accommodation=Accommodation(id=14, title=test title, largeBuildingType=Secondary Unit, buildingType=Annex For Guest, maximumGuestCount=1, description=good accomodation
not bad, createdAt=2022-01-10T12:15:40.704277, updatedAt=null, user=User(id=2, email=test@gmail.com, password=$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa, firstname=example, lastname=test, birthday=2011/September/18, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T09:34:40, createdAt=2022-01-09T19:34:19, updatedAt=null))))
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into amenities (air_conditioner, breakfast, business_space, closet, created_at, fireplace, guest_entrance, hair_dryer, heater, iron, room_id, shampoo, tv, wifi) values (1, 1, 1, 1, '01/10/2022 12:15:41.459', 1, 1, 1, 1, 1, 9, 1, 1, 1)

DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into amenities (air_conditioner, breakfast, business_space, closet, created_at, fireplace, guest_entrance, hair_dryer, heater, iron, room_id, shampoo, tv, wifi) values (1, 1, 1, 1, '01/10/2022 12:15:41.459', 1, 1, 1, 1, 1, 9, 1, 1, 1)
 {executed in 5 msec}
DEBUG 22-01-10 12:15:41[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into amenities (air_conditioner, breakfast, business_space, closet, created_at, fireplace, guest_entrance, hair_dryer, heater, iron, room_id, shampoo, tv, wifi) values (1, 1, 1, 1, '01/10/2022 12:15:41.459', 1, 1, 1, 1, 1, 9, 1, 1, 1)
 {executed in 0 msec}
INFO  22-01-10 12:15:41[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|7             |
|--------------|

DEBUG 22-01-10 12:15:53[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:15:53[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:15:53[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:15:53[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:15:53[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:15:53[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:15:53[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:15:53[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:15:53[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:16:44[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:16:44[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:16:44[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:16:44[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:16:44[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 12:16:44[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:16:44[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 12:16:45[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 12:17:02[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:17:02[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:17:02[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:17:02[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:17:02[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:17:02[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:17:02[http-nio-8080-exec-7] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 12:17:02[http-nio-8080-exec-7] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 12:17:02[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:17:02[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:17:02[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:17:02[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=2

ERROR 22-01-10 12:17:02[http-nio-8080-exec-7] [sqlonly:140] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=2

java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
ERROR 22-01-10 12:17:02[http-nio-8080-exec-7] [sqltiming:150] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=2
 {FAILED after 1 msec}
java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
WARN  22-01-10 12:17:02[http-nio-8080-exec-7] [SqlExceptionHelper:137] - SQL Error: 1054, SQLState: 42S22
ERROR 22-01-10 12:17:02[http-nio-8080-exec-7] [SqlExceptionHelper:142] - Unknown column 'photolist0_.accommodation_id' in 'field list'
ERROR 22-01-10 12:17:02[http-nio-8080-exec-7] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.hibernate.exception.SQLGrammarException: could not extract ResultSet] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 12:17:06[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:17:06[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [PhotoLogicServiceImpl:63] - Create Original Photo name: bnb_test1.jpg
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [PhotoLogicServiceImpl:64] - email: test@gmail.com
DEBUG 22-01-10 12:17:06[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:17:06[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [HandlingS3:63] - Create user: test@gmail.com
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [HandlingS3:66] - Upload photo name: bnb_test1_1641817026228.jpg
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [HandlingS3:111] - Photo: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@62130a9a
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [HandlingS3:71] - S3Url: https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641817026228.jpg
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [HandlingS3:76] - Create CALLBACK start
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [HandlingS3:86] - Create Photo: Photo(id=null, name=bnb_test1_1641817026228.jpg, size=75715, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641817026228.jpg, delFlg=STORED, createdAt=2022-01-10T12:17:06.442937, UpdatedAt=null, accommodation=null)
DEBUG 22-01-10 12:17:06[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:17:06.443', 0, 'bnb_test1_1641817026228.jpg', 75715, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641817026228.jpg', 2)

DEBUG 22-01-10 12:17:06[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
51. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:17:06.443', 0, 'bnb_test1_1641817026228.jpg', 75715, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641817026228.jpg', 2)
 {executed in 1 msec}
DEBUG 22-01-10 12:17:06[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
51. getGeneratedKeys on query: insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:17:06.443', 0, 'bnb_test1_1641817026228.jpg', 75715, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641817026228.jpg', 2)
 {executed in 0 msec}
INFO  22-01-10 12:17:06[http-nio-8080-exec-8] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|4             |
|--------------|

DEBUG 22-01-10 12:18:07[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:18:07[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:18:07[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:18:07[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:18:07[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:18:07[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:18:07[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:18:07[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:18:07[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:21:29[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:21:29[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:21:29[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:21:29[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:21:29[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:21:29[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:21:29[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:21:29[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:21:29[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:22:03[Thread-5] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 12:22:03[Thread-5] [HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
INFO  22-01-10 12:22:03[Thread-5] [HikariDataSource:352] - HikariPool-1 - Shutdown completed.
INFO  22-01-10 12:22:04[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 12:22:04[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 12:22:10[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 12:22:12[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2186 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 12:22:13[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 12:22:14[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 12:22:14[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:22:14[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 12:22:14[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 12:22:14[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 12:22:14[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 10410 ms
INFO  22-01-10 12:22:15[restartedMain] [HikariDataSource:110] - HikariPool-2 - Starting...
INFO  22-01-10 12:22:15[restartedMain] [HikariDataSource:123] - HikariPool-2 - Start completed.
INFO  22-01-10 12:22:15[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 12:22:16[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 12:22:16[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 12:22:16[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 12:22:17[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 12:22:18[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: ef1aa48d-26ad-49e6-b4a8-868ec5b0801c

INFO  22-01-10 12:22:19[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2e35dc96, org.springframework.security.web.context.SecurityContextPersistenceFilter@234ba07a, org.springframework.security.web.header.HeaderWriterFilter@7b175a1e, org.springframework.web.filter.CorsFilter@23bd4072, org.springframework.security.web.authentication.logout.LogoutFilter@639c737e, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@79509ed7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@541640db, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@151037ed, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@75045395, org.springframework.security.web.session.SessionManagementFilter@6e0cc7d1, org.springframework.security.web.access.ExceptionTranslationFilter@245a6e16]
INFO  22-01-10 12:22:20[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 12:22:20[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:22:20[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 12:22:20[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 17.22 seconds (JVM running for 10377.924)
INFO  22-01-10 12:22:20[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 12:22:50[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 12:22:50[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 12:22:50[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 1 ms
WARN  22-01-10 12:22:51[http-nio-8080-exec-2] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public void com.example.gradlebnbadminapi.controller.RoomController.create(com.example.gradlebnbadminapi.model.network.Header<com.example.gradlebnbadminapi.model.network.request.RoomApiRequest>) throws java.lang.Exception]
INFO  22-01-10 12:23:28[Thread-7] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 12:23:28[Thread-7] [HikariDataSource:350] - HikariPool-2 - Shutdown initiated...
INFO  22-01-10 12:23:29[Thread-7] [HikariDataSource:352] - HikariPool-2 - Shutdown completed.
INFO  22-01-10 12:23:29[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 12:23:29[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 12:23:35[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 12:23:37[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1881 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 12:23:38[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 12:23:39[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 12:23:39[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:23:39[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 12:23:39[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 12:23:39[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 12:23:39[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9748 ms
INFO  22-01-10 12:23:39[restartedMain] [HikariDataSource:110] - HikariPool-3 - Starting...
INFO  22-01-10 12:23:39[restartedMain] [HikariDataSource:123] - HikariPool-3 - Start completed.
INFO  22-01-10 12:23:40[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 12:23:40[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 12:23:41[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 12:23:41[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 12:23:41[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 12:23:43[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 436d7ef5-f2ea-4eaa-85a0-85e8e9845914

INFO  22-01-10 12:23:44[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@47ef2c34, org.springframework.security.web.context.SecurityContextPersistenceFilter@1557a395, org.springframework.security.web.header.HeaderWriterFilter@3053a0be, org.springframework.web.filter.CorsFilter@5388f172, org.springframework.security.web.authentication.logout.LogoutFilter@428caad5, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@1878177a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@bfc81db, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2687864a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@55cfc18d, org.springframework.security.web.session.SessionManagementFilter@1d6a29cd, org.springframework.security.web.access.ExceptionTranslationFilter@4e5a0de1]
INFO  22-01-10 12:23:44[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 12:23:45[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:23:45[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 12:23:45[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.89 seconds (JVM running for 10462.041)
INFO  22-01-10 12:23:45[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 12:23:45[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 12:23:45[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 12:23:45[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-10 12:23:45[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:23:45[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:23:45[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:23:45[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:23:45[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 12:23:45[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:24:00[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:24:00[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:24:00[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:24:00[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:24:00[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:24:00[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:24:00[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:24:00[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:24:00[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:24:01[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:24:01[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:24:01[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:24:01[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:24:01[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 12:24:01[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:25:30[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:25:30[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-10 12:25:30[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:25:30[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:25:30[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:25:30[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:25:30[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:25:30[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:25:30[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-10T04:34:19 |test@gmail.com |example   |2022-01-10T18:34:40 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |[null]     |
|---|-------|------------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:25:32[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:25:32[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:25:32[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:25:32[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:25:32[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 12:25:32[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:25:40[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:25:40[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:25:40[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday          |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|2  |1      |2011/September/18 |2022-01-09 19:34:19.0 |test@gmail.com |example   |2022-01-10 09:34:40.0 |test     |$2a$10$JcXxA3s3mwiq71XZLqYjgeV8a4UuVRqXfvIN3iLtoI4sBcHo9shIa |0      |null       |
|---|-------|------------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:25:40[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:25:40[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 12:25:40[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:44:19[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:44:19[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 9 msec}
INFO  22-01-10 12:44:19[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|---------|-----------|------|----------|--------------|---------|---------|-------|-----------|
|id |access |birthday |created_at |email |firstname |last_login_at |lastname |password |status |updated_at |
|---|-------|---------|-----------|------|----------|--------------|---------|---------|-------|-----------|
|---|-------|---------|-----------|------|----------|--------------|---------|---------|-------|-----------|

ERROR 22-01-10 12:44:19[http-nio-8080-exec-3] [UnauthenticatedException:12] - Unauthenticated User.
WARN  22-01-10 12:44:19[http-nio-8080-exec-3] [ExceptionHandlerExceptionResolver:208] - Resolved [com.example.gradlebnbadminapi.exception.UnauthenticatedException: Unauthenticated User.]
DEBUG 22-01-10 12:44:37[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:44:37[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:44:37[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|---------|-----------|------|----------|--------------|---------|---------|-------|-----------|
|id |access |birthday |created_at |email |firstname |last_login_at |lastname |password |status |updated_at |
|---|-------|---------|-----------|------|----------|--------------|---------|---------|-------|-----------|
|---|-------|---------|-----------|------|----------|--------------|---------|---------|-------|-----------|

DEBUG 22-01-10 12:44:38[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
71. insert into user (access, birthday, created_at, email, firstname, lastname, password, status) values (1, '2004/October/21', '01/10/2022 12:44:38.034', 'test@gmail.com', 'example', 'test', '$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG', 0)

DEBUG 22-01-10 12:44:38[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
71. insert into user (access, birthday, created_at, email, firstname, lastname, password, status) values (1, '2004/October/21', '01/10/2022 12:44:38.034', 'test@gmail.com', 'example', 'test', '$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG', 0)
 {executed in 1 msec}
DEBUG 22-01-10 12:44:38[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
71. getGeneratedKeys on query: insert into user (access, birthday, created_at, email, firstname, lastname, password, status) values (1, '2004/October/21', '01/10/2022 12:44:38.034', 'test@gmail.com', 'example', 'test', '$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG', 0)
 {executed in 0 msec}
INFO  22-01-10 12:44:38[http-nio-8080-exec-5] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

INFO  22-01-10 12:44:38[http-nio-8080-exec-5] [UserApiLogicServiceImpl:61] - User Created:User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=null, createdAt=2022-01-10T12:44:38.034374, updatedAt=null)
DEBUG 22-01-10 12:44:45[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:44:45[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:44:45[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|--------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|--------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |null          |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|--------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:44:45[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
71. update user set last_login_at='01/10/2022 12:44:45.728' where id=1

DEBUG 22-01-10 12:44:45[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
71. update user set last_login_at='01/10/2022 12:44:45.728' where id=1
 {executed in 1 msec}
DEBUG 22-01-10 12:45:38[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:45:38[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:45:38[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:45:38[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:45:38[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 12:45:38[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:45:38[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 12:45:38[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 12:45:55[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:45:55[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:45:55[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:45:55[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:45:55[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:45:55[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:45:55[http-nio-8080-exec-10] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 12:45:55[http-nio-8080-exec-10] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 12:45:55[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:45:55[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:45:55[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:45:55[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=1

ERROR 22-01-10 12:45:55[http-nio-8080-exec-10] [sqlonly:140] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=1

java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
ERROR 22-01-10 12:45:55[http-nio-8080-exec-10] [sqltiming:150] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=1
 {FAILED after 8 msec}
java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
WARN  22-01-10 12:45:55[http-nio-8080-exec-10] [SqlExceptionHelper:137] - SQL Error: 1054, SQLState: 42S22
ERROR 22-01-10 12:45:55[http-nio-8080-exec-10] [SqlExceptionHelper:142] - Unknown column 'photolist0_.accommodation_id' in 'field list'
ERROR 22-01-10 12:45:55[http-nio-8080-exec-10] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.hibernate.exception.SQLGrammarException: could not extract ResultSet] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 12:45:59[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:45:59[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [PhotoLogicServiceImpl:63] - Create Original Photo name: bnb_test1.jpg
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [PhotoLogicServiceImpl:64] - email: test@gmail.com
DEBUG 22-01-10 12:45:59[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:45:59[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [HandlingS3:63] - Create user: test@gmail.com
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [HandlingS3:66] - Upload photo name: bnb_test1_1641818759328.jpg
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [HandlingS3:111] - Photo: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@40a862ea
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [HandlingS3:71] - S3Url: https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [HandlingS3:76] - Create CALLBACK start
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [HandlingS3:86] - Create Photo: Photo(id=null, name=bnb_test1_1641818759328.jpg, size=75715, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg, delFlg=STORED, createdAt=2022-01-10T12:45:59.522585, UpdatedAt=null, accommodation=null)
DEBUG 22-01-10 12:45:59[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
71. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:45:59.528', 0, 'bnb_test1_1641818759328.jpg', 75715, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg', 1)

DEBUG 22-01-10 12:45:59[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
71. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:45:59.528', 0, 'bnb_test1_1641818759328.jpg', 75715, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg', 1)
 {executed in 0 msec}
DEBUG 22-01-10 12:45:59[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
71. getGeneratedKeys on query: insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:45:59.528', 0, 'bnb_test1_1641818759328.jpg', 75715, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg', 1)
 {executed in 0 msec}
INFO  22-01-10 12:45:59[http-nio-8080-exec-1] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

DEBUG 22-01-10 12:46:03[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:46:03[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [PhotoLogicServiceImpl:63] - Create Original Photo name: bnb_test3.jpg
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [PhotoLogicServiceImpl:64] - email: test@gmail.com
DEBUG 22-01-10 12:46:03[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:46:03[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [HandlingS3:63] - Create user: test@gmail.com
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [HandlingS3:66] - Upload photo name: bnb_test3_1641818763060.jpg
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [HandlingS3:111] - Photo: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@5650c394
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [HandlingS3:71] - S3Url: https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [HandlingS3:76] - Create CALLBACK start
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [HandlingS3:86] - Create Photo: Photo(id=null, name=bnb_test3_1641818763060.jpg, size=51046, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg, delFlg=STORED, createdAt=2022-01-10T12:46:03.155940, UpdatedAt=null, accommodation=null)
DEBUG 22-01-10 12:46:03[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
71. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:46:03.156', 0, 'bnb_test3_1641818763060.jpg', 51046, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg', 1)

DEBUG 22-01-10 12:46:03[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
71. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:46:03.156', 0, 'bnb_test3_1641818763060.jpg', 51046, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg', 1)
 {executed in 1 msec}
DEBUG 22-01-10 12:46:03[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
71. getGeneratedKeys on query: insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:46:03.156', 0, 'bnb_test3_1641818763060.jpg', 51046, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg', 1)
 {executed in 0 msec}
INFO  22-01-10 12:46:03[http-nio-8080-exec-3] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

DEBUG 22-01-10 12:46:33[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:46:33[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:46:33[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:46:33[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:46:33[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:46:33[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:46:33[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:46:33[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:46:33[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:47:11[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:47:11[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:47:11[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:47:11[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:47:11[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:47:11[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:47:11[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:47:11[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:47:11[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:47:11[Thread-11] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 12:47:11[Thread-11] [HikariDataSource:350] - HikariPool-3 - Shutdown initiated...
INFO  22-01-10 12:47:11[Thread-11] [HikariDataSource:352] - HikariPool-3 - Shutdown completed.
INFO  22-01-10 12:47:12[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 12:47:12[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 12:47:17[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 12:47:19[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1661 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 12:47:20[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 12:47:21[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 12:47:21[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:47:21[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 12:47:21[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 12:47:21[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 12:47:21[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8738 ms
INFO  22-01-10 12:47:21[restartedMain] [HikariDataSource:110] - HikariPool-4 - Starting...
INFO  22-01-10 12:47:21[restartedMain] [HikariDataSource:123] - HikariPool-4 - Start completed.
INFO  22-01-10 12:47:22[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 12:47:22[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 12:47:22[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 12:47:22[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 12:47:23[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 12:47:24[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: e7e3defe-4926-46d6-9e9c-3a7f4ea98f3d

INFO  22-01-10 12:47:25[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@69f38a75, org.springframework.security.web.context.SecurityContextPersistenceFilter@5b42377c, org.springframework.security.web.header.HeaderWriterFilter@32bbac9, org.springframework.web.filter.CorsFilter@4ce9ad0b, org.springframework.security.web.authentication.logout.LogoutFilter@33311584, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@304fad94, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4216aa15, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1c35ad6c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@31b10ddb, org.springframework.security.web.session.SessionManagementFilter@58d7a0bd, org.springframework.security.web.access.ExceptionTranslationFilter@1130bda]
INFO  22-01-10 12:47:26[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 12:47:27[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:47:27[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 12:47:27[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.17 seconds (JVM running for 11884.031)
INFO  22-01-10 12:47:27[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 12:47:42[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 12:47:42[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 12:47:42[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-10 12:47:42[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:47:42[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:47:42[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:47:42[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:47:42[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 12:47:42[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:47:42[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 12:47:42[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 12:48:01[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:48:01[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:48:01[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:48:01[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:48:01[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:48:01[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:48:01[http-nio-8080-exec-3] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 12:48:01[http-nio-8080-exec-3] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 12:48:01[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:48:01[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:48:01[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:48:01[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=1

ERROR 22-01-10 12:48:01[http-nio-8080-exec-3] [sqlonly:140] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=1

java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
ERROR 22-01-10 12:48:01[http-nio-8080-exec-3] [sqltiming:150] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=1
 {FAILED after 1 msec}
java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
WARN  22-01-10 12:48:01[http-nio-8080-exec-3] [SqlExceptionHelper:137] - SQL Error: 1054, SQLState: 42S22
ERROR 22-01-10 12:48:01[http-nio-8080-exec-3] [SqlExceptionHelper:142] - Unknown column 'photolist0_.accommodation_id' in 'field list'
ERROR 22-01-10 12:48:01[http-nio-8080-exec-3] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.hibernate.exception.SQLGrammarException: could not extract ResultSet] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 12:48:23[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:48:23[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [PhotoLogicServiceImpl:63] - Create Original Photo name: bnb_test1.jpg
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [PhotoLogicServiceImpl:64] - email: test@gmail.com
DEBUG 22-01-10 12:48:23[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:48:23[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [HandlingS3:63] - Create user: test@gmail.com
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [HandlingS3:66] - Upload photo name: bnb_test1_1641818903793.jpg
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [HandlingS3:111] - Photo: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@5b068b8f
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [HandlingS3:71] - S3Url: https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [HandlingS3:76] - Create CALLBACK start
INFO  22-01-10 12:48:23[http-nio-8080-exec-4] [HandlingS3:86] - Create Photo: Photo(id=null, name=bnb_test1_1641818903793.jpg, size=75715, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg, delFlg=STORED, createdAt=2022-01-10T12:48:23.987903, UpdatedAt=null, accommodation=null)
DEBUG 22-01-10 12:48:24[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
81. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:48:24.001', 0, 'bnb_test1_1641818903793.jpg', 75715, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg', 1)

DEBUG 22-01-10 12:48:24[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
81. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:48:24.001', 0, 'bnb_test1_1641818903793.jpg', 75715, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg', 1)
 {executed in 1 msec}
DEBUG 22-01-10 12:48:24[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
81. getGeneratedKeys on query: insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:48:24.001', 0, 'bnb_test1_1641818903793.jpg', 75715, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg', 1)
 {executed in 0 msec}
INFO  22-01-10 12:48:24[http-nio-8080-exec-4] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|3             |
|--------------|

DEBUG 22-01-10 12:48:28[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:48:28[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [PhotoLogicServiceImpl:63] - Create Original Photo name: bnb_test3.jpg
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [PhotoLogicServiceImpl:64] - email: test@gmail.com
DEBUG 22-01-10 12:48:28[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:48:28[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [HandlingS3:63] - Create user: test@gmail.com
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [HandlingS3:66] - Upload photo name: bnb_test3_1641818908771.jpg
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [HandlingS3:111] - Photo: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@5505b71
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [HandlingS3:71] - S3Url: https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [HandlingS3:76] - Create CALLBACK start
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [HandlingS3:86] - Create Photo: Photo(id=null, name=bnb_test3_1641818908771.jpg, size=51046, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg, delFlg=STORED, createdAt=2022-01-10T12:48:28.864925, UpdatedAt=null, accommodation=null)
DEBUG 22-01-10 12:48:28[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
81. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:48:28.865', 0, 'bnb_test3_1641818908771.jpg', 51046, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg', 1)

DEBUG 22-01-10 12:48:28[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
81. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:48:28.865', 0, 'bnb_test3_1641818908771.jpg', 51046, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg', 1)
 {executed in 1 msec}
DEBUG 22-01-10 12:48:28[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
81. getGeneratedKeys on query: insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:48:28.865', 0, 'bnb_test3_1641818908771.jpg', 51046, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg', 1)
 {executed in 0 msec}
INFO  22-01-10 12:48:28[http-nio-8080-exec-5] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|4             |
|--------------|

DEBUG 22-01-10 12:49:09[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:49:09[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:49:09[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:49:09[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:49:09[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:49:09[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:49:09[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:49:09[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:49:09[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:49:27[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:49:27[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:49:27[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:49:27[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:49:27[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:49:27[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:49:27[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:49:27[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:49:27[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:49:29[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:49:29[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:49:29[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:49:29[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:49:29[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 12:49:29[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:49:29[http-nio-8080-exec-9] [RoomApiLogicServiceImpl:55] - email: test@gmail.com
INFO  22-01-10 12:49:29[http-nio-8080-exec-9] [RoomApiLogicServiceImpl:76] - Conveniences builder.
DEBUG 22-01-10 12:49:29[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:49:29[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:49:29[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

ERROR 22-01-10 12:49:29[http-nio-8080-exec-9] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=description, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=title, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]] with root cause
javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=description, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=title, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:140)
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:188)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:78)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:645)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:282)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:263)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:317)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:330)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:287)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:720)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:706)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at com.sun.proxy.$Proxy202.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at com.sun.proxy.$Proxy202.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:597)
	at jdk.internal.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:529)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:599)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:163)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:138)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at com.sun.proxy.$Proxy206.save(Unknown Source)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.saveAccommodation(RoomApiLogicServiceImpl.java:89)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.create(RoomApiLogicServiceImpl.java:58)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$FastClassBySpringCGLIB$$76604af8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$EnhancerBySpringCGLIB$$444cfc40.create(<generated>)
	at com.example.gradlebnbadminapi.controller.RoomController.create(RoomController.java:23)
	at com.example.gradlebnbadminapi.controller.RoomController$$FastClassBySpringCGLIB$$1a33f584.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.RoomController$$EnhancerBySpringCGLIB$$9ea45eb.create(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 12:50:30[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:50:30[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:50:30[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:50:30[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:50:30[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 12:50:30[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:50:30[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.577248,139.7335421&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 12:50:30[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPGM+VCV Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPGM+VCV"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-7 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5772416,
               "lng" : 139.7335671
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785905802915,
                  "lng" : 139.7349160802915
               },
               "southwest" : {
                  "lat" : 35.5758926197085,
                  "lng" : 139.7322181197085
               }
            }
         },
         "place_id" : "ChIJuTPMlrRhGGAR58k8QDgpc0U",
         "plus_code" : {
            "compound_code" : "HPGM+VC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+VC"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "4",
               "short_name" : "4",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-4 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5772549,
                  "lng" : 139.7336735
               },
               "southwest" : {
                  "lat" : 35.5771134,
                  "lng" : 139.7335315
               }
            },
            "location" : {
               "lat" : 35.5771713,
               "lng" : 139.7336089
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785331302915,
                  "lng" : 139.7349514802915
               },
               "southwest" : {
                  "lat" : 35.5758351697085,
                  "lng" : 139.7322535197085
               }
            }
         },
         "place_id" : "ChIJJ2mOkLRhGGAR6xfVY-yY1CI",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "12",
               "short_name" : "12",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-7-12 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5773426,
               "lng" : 139.7334094
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786915802915,
                  "lng" : 139.7347583802915
               },
               "southwest" : {
                  "lat" : 35.5759936197085,
                  "lng" : 139.7320604197085
               }
            }
         },
         "place_id" : "ChIJd5jGhqBhGGARFuYmd7IwmcE",
         "plus_code" : {
            "compound_code" : "HPGM+W9 Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+W9"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPGM+VC",
               "short_name" : "HPGM+VC",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPGM+VC Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.57725,
                  "lng" : 139.733625
               },
               "southwest" : {
                  "lat" : 35.577125,
                  "lng" : 139.7335
               }
            },
            "location" : {
               "lat" : 35.577248,
               "lng" : 139.7335421
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785364802915,
                  "lng" : 139.7349114802915
               },
               "southwest" : {
                  "lat" : 35.5758385197085,
                  "lng" : 139.7322135197085
               }
            }
         },
         "place_id" : "GhIJONcwQ-PJQUARpzdILXl3YUA",
         "plus_code" : {
            "compound_code" : "HPGM+VC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+VC"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 2-chōme Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577288,
                  "lng" : 139.7335273
               },
               "southwest" : {
                  "lat" : 35.5771081,
                  "lng" : 139.7334914
               }
            },
            "location" : {
               "lat" : 35.577198,
               "lng" : 139.7335093
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785470302915,
                  "lng" : 139.7348583302915
               },
               "southwest" : {
                  "lat" : 35.5758490697085,
                  "lng" : 139.7321603697085
               }
            }
         },
         "place_id" : "ChIJiSDelrRhGGARlvildbFBZlg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome-10 Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5775811,
                  "lng" : 139.7340108
               },
               "southwest" : {
                  "lat" : 35.5770128,
                  "lng" : 139.7334946
               }
            },
            "location" : {
               "lat" : 35.5773849,
               "lng" : 139.7338284
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786459302915,
                  "lng" : 139.7351016802915
               },
               "southwest" : {
                  "lat" : 35.5759479697085,
                  "lng" : 139.7324037197085
               }
            }
         },
         "place_id" : "ChIJ1XsHkbRhGGARCa_BksyfXj0",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            },
            "location" : {
               "lat" : 35.5768145,
               "lng" : 139.7300768
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            }
         },
         "place_id" : "ChIJTWi1HktgGGARtX9eKkbQVpI",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJKxelOkhgGGAR5EqpCfQ6L8U",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJSyM_AExgGGARJPeeVwe17K0",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 12:50:48[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:50:48[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:50:48[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:50:48[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:50:48[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:50:48[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:50:48[http-nio-8080-exec-2] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 12:50:48[http-nio-8080-exec-2] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 12:50:48[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:50:48[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:50:48[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:50:48[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=1

ERROR 22-01-10 12:50:48[http-nio-8080-exec-2] [sqlonly:140] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=1

java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
ERROR 22-01-10 12:50:48[http-nio-8080-exec-2] [sqltiming:150] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select photolist0_.user_id as user_id9_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.accommodation_id as accommod8_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id9_5_1_, accommodat1_.id as id1_0_2_, accommodat1_.building_type as building2_0_2_, accommodat1_.created_at as created_3_0_2_, accommodat1_.description as descript4_0_2_, accommodat1_.large_building_type as large_bu5_0_2_, accommodat1_.maximum_guest_count as maximum_6_0_2_, accommodat1_.title as title7_0_2_, accommodat1_.updated_at as updated_8_0_2_, accommodat1_.user_id as user_id9_0_2_, user2_.id as id1_7_3_, user2_.access as access2_7_3_, user2_.birthday as birthday3_7_3_, user2_.created_at as created_4_7_3_, user2_.email as email5_7_3_, user2_.firstname as firstnam6_7_3_, user2_.last_login_at as last_log7_7_3_, user2_.lastname as lastname8_7_3_, user2_.password as password9_7_3_, user2_.status as status10_7_3_, user2_.updated_at as updated11_7_3_, convenienc3_.id as id1_3_4_, convenienc3_.accommodation_id as accommo10_3_4_, convenienc3_.created_at as created_2_3_4_, convenienc3_.gym as gym3_3_4_, convenienc3_.jacuzzi as jacuzzi4_3_4_, convenienc3_.kitchen as kitchen5_3_4_, convenienc3_.laundry_room as laundry_6_3_4_, convenienc3_.parking_lot as parking_7_3_4_, convenienc3_.swimming_pool as swimming8_3_4_, convenienc3_.updated_at as updated_9_3_4_, location4_.id as id1_4_5_, location4_.accommodation_id as accommo11_4_5_, location4_.city as city2_4_5_, location4_.created_at as created_3_4_5_, location4_.detail_address as detail_a4_4_5_, location4_.latitude as latitude5_4_5_, location4_.longitude as longitud6_4_5_, location4_.postcode as postcode7_4_5_, location4_.state as state8_4_5_, location4_.street_address as street_a9_4_5_, location4_.updated_at as updated10_4_5_ from photo photolist0_ left outer join accommodation accommodat1_ on photolist0_.accommodation_id=accommodat1_.id left outer join user user2_ on accommodat1_.user_id=user2_.id left outer join conveniences convenienc3_ on accommodat1_.id=convenienc3_.accommodation_id left outer join location location4_ on accommodat1_.id=location4_.accommodation_id where photolist0_.user_id=1
 {FAILED after 2 msec}
java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
WARN  22-01-10 12:50:48[http-nio-8080-exec-2] [SqlExceptionHelper:137] - SQL Error: 1054, SQLState: 42S22
ERROR 22-01-10 12:50:48[http-nio-8080-exec-2] [SqlExceptionHelper:142] - Unknown column 'photolist0_.accommodation_id' in 'field list'
ERROR 22-01-10 12:50:48[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.hibernate.exception.SQLGrammarException: could not extract ResultSet] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'photolist0_.accommodation_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1003)
	at net.sf.log4jdbc.sql.jdbcapi.PreparedStatementSpy.executeQuery(PreparedStatementSpy.java:780)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)
	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)
	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)
	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl.index(PhotoLogicServiceImpl.java:54)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$FastClassBySpringCGLIB$$d375246b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at com.example.gradlebnbadminapi.service.PhotoLogicServiceImpl$$EnhancerBySpringCGLIB$$cdb98879.index(<generated>)
	at com.example.gradlebnbadminapi.controller.PhotoController.index(PhotoController.java:27)
	at com.example.gradlebnbadminapi.controller.PhotoController$$FastClassBySpringCGLIB$$b020f261.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.PhotoController$$EnhancerBySpringCGLIB$$e6f3aea2.index(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 12:50:51[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:50:51[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:50:51[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:50:51[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 12:50:51[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:50:51[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:50:51[http-nio-8080-exec-3] [PhotoLogicServiceImpl:63] - Create Original Photo name: bnb_test4.jpg
INFO  22-01-10 12:50:51[http-nio-8080-exec-3] [PhotoLogicServiceImpl:64] - email: test@gmail.com
DEBUG 22-01-10 12:50:51[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:50:51[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:50:51[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:50:51[http-nio-8080-exec-3] [HandlingS3:63] - Create user: test@gmail.com
INFO  22-01-10 12:50:51[http-nio-8080-exec-3] [HandlingS3:66] - Upload photo name: bnb_test4_1641819051803.jpg
INFO  22-01-10 12:50:51[http-nio-8080-exec-3] [HandlingS3:111] - Photo: org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@7404a400
INFO  22-01-10 12:50:52[http-nio-8080-exec-3] [HandlingS3:71] - S3Url: https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg
INFO  22-01-10 12:50:52[http-nio-8080-exec-3] [HandlingS3:76] - Create CALLBACK start
INFO  22-01-10 12:50:52[http-nio-8080-exec-3] [HandlingS3:86] - Create Photo: Photo(id=null, name=bnb_test4_1641819051803.jpg, size=93116, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg, delFlg=STORED, createdAt=2022-01-10T12:50:52.049662, UpdatedAt=null, accommodation=null)
DEBUG 22-01-10 12:50:52[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
81. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:50:52.050', 0, 'bnb_test4_1641819051803.jpg', 93116, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg', 1)

DEBUG 22-01-10 12:50:52[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
81. insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:50:52.050', 0, 'bnb_test4_1641819051803.jpg', 93116, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg', 1)
 {executed in 1 msec}
DEBUG 22-01-10 12:50:52[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
81. getGeneratedKeys on query: insert into photo (created_at, del_flg, name, size, url, user_id) values ('01/10/2022 12:50:52.050', 0, 'bnb_test4_1641819051803.jpg', 93116, 'https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg', 1)
 {executed in 0 msec}
INFO  22-01-10 12:50:52[http-nio-8080-exec-3] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|5             |
|--------------|

DEBUG 22-01-10 12:51:21[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:51:21[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:51:21[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:51:21[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:51:21[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:51:21[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:51:21[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:51:21[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:51:21[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:53:03[Thread-15] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 12:53:03[Thread-15] [HikariDataSource:350] - HikariPool-4 - Shutdown initiated...
INFO  22-01-10 12:53:03[Thread-15] [HikariDataSource:352] - HikariPool-4 - Shutdown completed.
INFO  22-01-10 12:53:04[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 12:53:04[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 12:53:10[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 12:53:12[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2370 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 12:53:13[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 12:53:14[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 12:53:14[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:53:14[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 12:53:14[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 12:53:14[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 12:53:14[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9706 ms
INFO  22-01-10 12:53:14[restartedMain] [HikariDataSource:110] - HikariPool-5 - Starting...
INFO  22-01-10 12:53:14[restartedMain] [HikariDataSource:123] - HikariPool-5 - Start completed.
INFO  22-01-10 12:53:15[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 12:53:15[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 12:53:16[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 12:53:16[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 12:53:16[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 12:53:18[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: cdb1dd3e-15bb-4703-96c4-a4f7150c8b2c

INFO  22-01-10 12:53:19[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@30b6b48e, org.springframework.security.web.context.SecurityContextPersistenceFilter@7431e671, org.springframework.security.web.header.HeaderWriterFilter@78ac49ce, org.springframework.web.filter.CorsFilter@6947badb, org.springframework.security.web.authentication.logout.LogoutFilter@3f85e9db, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@5d301c11, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6c04440, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1c389f6f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@72c53958, org.springframework.security.web.session.SessionManagementFilter@53f17dae, org.springframework.security.web.access.ExceptionTranslationFilter@dffef98]
INFO  22-01-10 12:53:20[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 12:53:20[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:53:20[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 12:53:20[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 16.19 seconds (JVM running for 12237.255)
INFO  22-01-10 12:53:20[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 12:53:45[Thread-19] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 12:53:45[Thread-19] [HikariDataSource:350] - HikariPool-5 - Shutdown initiated...
INFO  22-01-10 12:53:45[Thread-19] [HikariDataSource:352] - HikariPool-5 - Shutdown completed.
INFO  22-01-10 12:53:46[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 12:53:46[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 12:53:51[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 12:53:54[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2237 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 12:53:55[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 12:53:55[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 12:53:55[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:53:55[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 12:53:55[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 12:53:56[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 12:53:56[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9948 ms
INFO  22-01-10 12:53:56[restartedMain] [HikariDataSource:110] - HikariPool-6 - Starting...
INFO  22-01-10 12:53:56[restartedMain] [HikariDataSource:123] - HikariPool-6 - Start completed.
INFO  22-01-10 12:53:57[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 12:53:57[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 12:53:58[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 12:53:58[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 12:53:58[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 12:54:00[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 48488fee-3e95-439f-81b2-73aa060308f8

INFO  22-01-10 12:54:01[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@45c22505, org.springframework.security.web.context.SecurityContextPersistenceFilter@38021190, org.springframework.security.web.header.HeaderWriterFilter@72ec458f, org.springframework.web.filter.CorsFilter@3e3cef14, org.springframework.security.web.authentication.logout.LogoutFilter@3bb39d61, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@28ba7805, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5b83e726, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4b5311e4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@44e27834, org.springframework.security.web.session.SessionManagementFilter@e2ad69a, org.springframework.security.web.access.ExceptionTranslationFilter@3a3b2b35]
INFO  22-01-10 12:54:02[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 12:54:02[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:54:02[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 12:54:02[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 16.74 seconds (JVM running for 12279.208)
INFO  22-01-10 12:54:02[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 12:54:03[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 12:54:03[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 12:54:03[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 2 ms
DEBUG 22-01-10 12:54:03[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:54:03[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:54:03[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:54:03[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:54:03[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:54:03[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:54:03[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:54:03[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:54:03[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:54:08[Thread-23] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 12:54:08[Thread-23] [HikariDataSource:350] - HikariPool-6 - Shutdown initiated...
INFO  22-01-10 12:54:08[Thread-23] [HikariDataSource:352] - HikariPool-6 - Shutdown completed.
INFO  22-01-10 12:54:08[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 12:54:08[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 12:54:13[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 12:54:15[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2026 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 12:54:16[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 12:54:17[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 12:54:17[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:54:17[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 12:54:17[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 12:54:17[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 12:54:17[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8165 ms
INFO  22-01-10 12:54:17[restartedMain] [HikariDataSource:110] - HikariPool-7 - Starting...
INFO  22-01-10 12:54:17[restartedMain] [HikariDataSource:123] - HikariPool-7 - Start completed.
INFO  22-01-10 12:54:17[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 12:54:18[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 12:54:18[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 12:54:18[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 12:54:18[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 12:54:20[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 8b106d46-e35e-4273-b5c3-e5f67e849c77

INFO  22-01-10 12:54:21[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@262f1600, org.springframework.security.web.context.SecurityContextPersistenceFilter@4b336d81, org.springframework.security.web.header.HeaderWriterFilter@6a8bee7b, org.springframework.web.filter.CorsFilter@3c2f4755, org.springframework.security.web.authentication.logout.LogoutFilter@792b237f, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@a6dcbd0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@65e1e8da, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@50ac3a2b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@150ca669, org.springframework.security.web.session.SessionManagementFilter@1f2dcc, org.springframework.security.web.access.ExceptionTranslationFilter@5abe885d]
INFO  22-01-10 12:54:22[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 12:54:22[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 12:54:22[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 12:54:22[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 13.789 seconds (JVM running for 12299.18)
INFO  22-01-10 12:54:22[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 12:55:59[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 12:55:59[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 12:55:59[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-10 12:55:59[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:55:59[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:55:59[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:55:59[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:55:59[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 12:55:59[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:55:59[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 12:55:59[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 12:56:19[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:56:19[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:56:19[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:56:19[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:56:19[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 12:56:19[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 12:56:19[http-nio-8080-exec-2] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 12:56:19[http-nio-8080-exec-2] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 12:56:19[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:56:19[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:56:19[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:56:19[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 12:56:19[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 12:56:19[http-nio-8080-exec-2] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 12:56:19[http-nio-8080-exec-2] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 12:57:03[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:57:03[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:57:03[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:57:03[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:57:03[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:57:03[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:57:03[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:57:03[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 12:57:03[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 12:57:15[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:57:15[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:57:15[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 12:57:15[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 12:57:15[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 12:57:15[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 12:57:15[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 12:57:15[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 12:57:15[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:01:52[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:01:52[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:01:52[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:01:52[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:01:52[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:01:52[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:01:52[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:01:52[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:01:52[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:02:22[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:02:22[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:02:22[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:02:22[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:02:22[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:02:22[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:02:22[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:02:22[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:02:38[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:02:38[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:02:38[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:02:38[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:02:38[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:02:38[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:02:38[http-nio-8080-exec-8] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:02:38[http-nio-8080-exec-8] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:02:38[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:02:38[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:02:38[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:02:38[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:02:38[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 0 msec}
INFO  22-01-10 13:02:38[http-nio-8080-exec-8] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:02:38[http-nio-8080-exec-8] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:03:00[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:03:00[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:03:00[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:03:00[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:03:00[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:03:00[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:03:00[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:03:00[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:03:00[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:04:09[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:04:09[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:04:09[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:04:09[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:04:09[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:04:09[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:04:09[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:04:09[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:04:09[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:04:11[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:04:11[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:04:11[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:04:11[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:04:11[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:04:11[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:04:11[http-nio-8080-exec-2] [RoomApiLogicServiceImpl:55] - email: test@gmail.com
INFO  22-01-10 13:04:11[http-nio-8080-exec-2] [RoomApiLogicServiceImpl:76] - Conveniences builder.
DEBUG 22-01-10 13:04:11[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:04:11[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:04:11[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

ERROR 22-01-10 13:04:11[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]] with root cause
javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:140)
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:188)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:78)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:645)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:282)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:263)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:317)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:330)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:287)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:720)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:706)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at com.sun.proxy.$Proxy250.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at com.sun.proxy.$Proxy250.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:597)
	at jdk.internal.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:529)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:599)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:163)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:138)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at com.sun.proxy.$Proxy254.save(Unknown Source)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.saveAccommodation(RoomApiLogicServiceImpl.java:89)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.create(RoomApiLogicServiceImpl.java:58)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$FastClassBySpringCGLIB$$76604af8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$EnhancerBySpringCGLIB$$444cfc40.create(<generated>)
	at com.example.gradlebnbadminapi.controller.RoomController.create(RoomController.java:23)
	at com.example.gradlebnbadminapi.controller.RoomController$$FastClassBySpringCGLIB$$1a33f584.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.RoomController$$EnhancerBySpringCGLIB$$9ea45eb.create(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
INFO  22-01-10 13:05:41[Thread-27] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 13:05:41[Thread-27] [HikariDataSource:350] - HikariPool-7 - Shutdown initiated...
INFO  22-01-10 13:05:41[Thread-27] [HikariDataSource:352] - HikariPool-7 - Shutdown completed.
INFO  22-01-10 13:05:42[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 13:05:42[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 13:05:47[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 13:05:48[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1954 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 13:05:49[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 13:05:50[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 13:05:50[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:05:50[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 13:05:50[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 13:05:50[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 13:05:50[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8656 ms
INFO  22-01-10 13:05:51[restartedMain] [HikariDataSource:110] - HikariPool-8 - Starting...
INFO  22-01-10 13:05:51[restartedMain] [HikariDataSource:123] - HikariPool-8 - Start completed.
INFO  22-01-10 13:05:51[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 13:05:51[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 13:05:52[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 13:05:52[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 13:05:52[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 13:05:54[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 907d5234-137f-471e-b9b2-6d7c7821d0b6

INFO  22-01-10 13:05:55[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1089a207, org.springframework.security.web.context.SecurityContextPersistenceFilter@2b41ce95, org.springframework.security.web.header.HeaderWriterFilter@42be4daf, org.springframework.web.filter.CorsFilter@3d049851, org.springframework.security.web.authentication.logout.LogoutFilter@34830fb0, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@35c6ae61, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6bcc7763, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5b2f9c80, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1a047205, org.springframework.security.web.session.SessionManagementFilter@314f673b, org.springframework.security.web.access.ExceptionTranslationFilter@7086197f]
INFO  22-01-10 13:05:56[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 13:05:56[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:05:56[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 13:05:56[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 14.875 seconds (JVM running for 12993.431)
INFO  22-01-10 13:05:56[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 13:06:04[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 13:06:04[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 13:06:05[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-10 13:06:05[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:06:05[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:06:05[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:06:05[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:06:05[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:06:05[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:06:05[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:55] - email: test@gmail.com
INFO  22-01-10 13:06:05[http-nio-8080-exec-1] [RoomApiLogicServiceImpl:76] - Conveniences builder.
DEBUG 22-01-10 13:06:05[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:06:05[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:06:05[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

ERROR 22-01-10 13:06:05[http-nio-8080-exec-1] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]] with root cause
javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:140)
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:188)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:78)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:645)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:282)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:263)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:317)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:330)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:287)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:720)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:706)
	at jdk.internal.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at com.sun.proxy.$Proxy266.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at com.sun.proxy.$Proxy266.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:597)
	at jdk.internal.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:529)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:599)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:163)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:138)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at com.sun.proxy.$Proxy270.save(Unknown Source)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.saveAccommodation(RoomApiLogicServiceImpl.java:89)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.create(RoomApiLogicServiceImpl.java:58)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$FastClassBySpringCGLIB$$76604af8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$EnhancerBySpringCGLIB$$444cfc40.create(<generated>)
	at com.example.gradlebnbadminapi.controller.RoomController.create(RoomController.java:24)
	at com.example.gradlebnbadminapi.controller.RoomController$$FastClassBySpringCGLIB$$1a33f584.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.RoomController$$EnhancerBySpringCGLIB$$9ea45eb.create(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 13:06:53[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:06:53[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:06:53[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:06:53[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:06:53[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:06:53[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:06:53[http-nio-8080-exec-2] [RoomApiLogicServiceImpl:55] - email: test@gmail.com
INFO  22-01-10 13:06:53[http-nio-8080-exec-2] [RoomApiLogicServiceImpl:76] - Conveniences builder.
DEBUG 22-01-10 13:06:53[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:06:53[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:06:53[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

ERROR 22-01-10 13:06:53[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=title, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=description, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]] with root cause
javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=title, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=description, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:140)
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:188)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:78)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:645)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:282)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:263)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:317)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:330)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:287)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:720)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:706)
	at jdk.internal.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at com.sun.proxy.$Proxy266.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at com.sun.proxy.$Proxy266.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:597)
	at jdk.internal.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:529)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:599)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:163)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:138)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at com.sun.proxy.$Proxy270.save(Unknown Source)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.saveAccommodation(RoomApiLogicServiceImpl.java:89)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.create(RoomApiLogicServiceImpl.java:58)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$FastClassBySpringCGLIB$$76604af8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$EnhancerBySpringCGLIB$$444cfc40.create(<generated>)
	at com.example.gradlebnbadminapi.controller.RoomController.create(RoomController.java:24)
	at com.example.gradlebnbadminapi.controller.RoomController$$FastClassBySpringCGLIB$$1a33f584.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.RoomController$$EnhancerBySpringCGLIB$$9ea45eb.create(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 13:09:20[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:09:20[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:09:20[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:09:20[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:09:20[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:09:20[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:09:20[http-nio-8080-exec-3] [RoomApiLogicServiceImpl:55] - email: test@gmail.com
INFO  22-01-10 13:09:20[http-nio-8080-exec-3] [RoomApiLogicServiceImpl:76] - Conveniences builder.
DEBUG 22-01-10 13:09:20[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:09:20[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:09:20[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

ERROR 22-01-10 13:09:20[http-nio-8080-exec-3] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=description, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=title, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]] with root cause
javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=description, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=title, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:140)
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:188)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:78)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:645)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:282)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:263)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:317)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:330)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:287)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:720)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:706)
	at jdk.internal.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at com.sun.proxy.$Proxy266.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at com.sun.proxy.$Proxy266.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:597)
	at jdk.internal.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:529)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:599)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:163)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:138)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at com.sun.proxy.$Proxy270.save(Unknown Source)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.saveAccommodation(RoomApiLogicServiceImpl.java:89)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.create(RoomApiLogicServiceImpl.java:58)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$FastClassBySpringCGLIB$$76604af8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$EnhancerBySpringCGLIB$$444cfc40.create(<generated>)
	at com.example.gradlebnbadminapi.controller.RoomController.create(RoomController.java:24)
	at com.example.gradlebnbadminapi.controller.RoomController$$FastClassBySpringCGLIB$$1a33f584.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.RoomController$$EnhancerBySpringCGLIB$$9ea45eb.create(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 13:09:27[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:09:27[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:09:27[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:09:27[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:09:27[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:09:27[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:09:27[http-nio-8080-exec-4] [RoomApiLogicServiceImpl:55] - email: test@gmail.com
INFO  22-01-10 13:09:27[http-nio-8080-exec-4] [RoomApiLogicServiceImpl:76] - Conveniences builder.
DEBUG 22-01-10 13:09:27[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:09:27[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:09:27[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

ERROR 22-01-10 13:09:27[http-nio-8080-exec-4] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=description, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=title, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]] with root cause
javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=description, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=title, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:140)
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:188)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:78)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:645)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:282)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:263)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:317)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:330)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:287)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:720)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:706)
	at jdk.internal.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at com.sun.proxy.$Proxy266.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at com.sun.proxy.$Proxy266.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:597)
	at jdk.internal.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:529)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:599)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:163)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:138)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at com.sun.proxy.$Proxy270.save(Unknown Source)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.saveAccommodation(RoomApiLogicServiceImpl.java:89)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.create(RoomApiLogicServiceImpl.java:58)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$FastClassBySpringCGLIB$$76604af8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$EnhancerBySpringCGLIB$$444cfc40.create(<generated>)
	at com.example.gradlebnbadminapi.controller.RoomController.create(RoomController.java:24)
	at com.example.gradlebnbadminapi.controller.RoomController$$FastClassBySpringCGLIB$$1a33f584.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.RoomController$$EnhancerBySpringCGLIB$$9ea45eb.create(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 13:10:00[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:10:00[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:10:00[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:10:00[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:10:00[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:10:00[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:10:00[http-nio-8080-exec-5] [RoomApiLogicServiceImpl:55] - email: test@gmail.com
INFO  22-01-10 13:10:00[http-nio-8080-exec-5] [RoomApiLogicServiceImpl:76] - Conveniences builder.
DEBUG 22-01-10 13:10:00[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:10:00[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:10:00[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

ERROR 22-01-10 13:10:00[http-nio-8080-exec-5] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=title, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=description, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]] with root cause
javax.validation.ConstraintViolationException: Validation failed for classes [com.example.gradlebnbadminapi.model.entity.Accommodation] during persist time for groups [javax.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=largeBuildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=title, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=description, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
	ConstraintViolationImpl{interpolatedMessage='must not be blank', propertyPath=buildingType, rootBeanClass=class com.example.gradlebnbadminapi.model.entity.Accommodation, messageTemplate='{javax.validation.constraints.NotBlank.message}'}
]
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:140)
	at org.hibernate.cfg.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:80)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:188)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:78)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:645)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:282)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:263)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:317)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:330)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:287)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:123)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:55)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:720)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:706)
	at jdk.internal.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at com.sun.proxy.$Proxy266.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor252.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at com.sun.proxy.$Proxy266.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:597)
	at jdk.internal.reflect.GeneratedMethodAccessor185.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:289)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:529)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:599)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:163)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:138)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
	at com.sun.proxy.$Proxy270.save(Unknown Source)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.saveAccommodation(RoomApiLogicServiceImpl.java:89)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl.create(RoomApiLogicServiceImpl.java:58)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$FastClassBySpringCGLIB$$76604af8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.service.RoomApiLogicServiceImpl$$EnhancerBySpringCGLIB$$444cfc40.create(<generated>)
	at com.example.gradlebnbadminapi.controller.RoomController.create(RoomController.java:24)
	at com.example.gradlebnbadminapi.controller.RoomController$$FastClassBySpringCGLIB$$1a33f584.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.RoomController$$EnhancerBySpringCGLIB$$9ea45eb.create(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:55] - email: test@gmail.com
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:76] - Conveniences builder.
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into accommodation (building_type, created_at, description, large_building_type, maximum_guest_count, title, user_id) values ('Annex', '01/10/2022 13:10:51.269', 'test1
tet2
test3', 'Apartment', 1, 'test', 1)

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into accommodation (building_type, created_at, description, large_building_type, maximum_guest_count, title, user_id) values ('Annex', '01/10/2022 13:10:51.269', 'test1
tet2
test3', 'Apartment', 1, 'test', 1)
 {executed in 1 msec}
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
121. getGeneratedKeys on query: insert into accommodation (building_type, created_at, description, large_building_type, maximum_guest_count, title, user_id) values ('Annex', '01/10/2022 13:10:51.269', 'test1
tet2
test3', 'Apartment', 1, 'test', 1)
 {executed in 0 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:93] - Conveniences builder.
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:105] - Conveniences save: Conveniences(id=null, kitchen=NOT, laundryRoom=NOT, parkingLot=NOT, gym=NOT, swimmingPool=NOT, jacuzzi=NOT, createdAt=null, updatedAt=null, accommodation=Accommodation(id=1, title=test, largeBuildingType=Apartment, buildingType=Annex, maximumGuestCount=1, description=test1
tet2
test3, createdAt=2022-01-10T13:10:51.269976, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null)))
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into conveniences (accommodation_id, created_at, gym, jacuzzi, kitchen, laundry_room, parking_lot, swimming_pool) values (1, '01/10/2022 13:10:51.299', 1, 1, 1, 1, 1, 1)

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into conveniences (accommodation_id, created_at, gym, jacuzzi, kitchen, laundry_room, parking_lot, swimming_pool) values (1, '01/10/2022 13:10:51.299', 1, 1, 1, 1, 1, 1)
 {executed in 1 msec}
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
121. getGeneratedKeys on query: insert into conveniences (accommodation_id, created_at, gym, jacuzzi, kitchen, laundry_room, parking_lot, swimming_pool) values (1, '01/10/2022 13:10:51.299', 1, 1, 1, 1, 1, 1)
 {executed in 0 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:110] - Location builder.
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:123] - Location save: Location(id=null, latitude=35, longitude=139, state=Ota City, city=Ōmorihigashi, streetAddress=3-chōme 27, detailAddress=111, postcode=Japan, createdAt=null, updatedAt=null, accommodation=Accommodation(id=1, title=test, largeBuildingType=Apartment, buildingType=Annex, maximumGuestCount=1, description=test1
tet2
test3, createdAt=2022-01-10T13:10:51.269976, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null)))
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into location (accommodation_id, city, created_at, detail_address, latitude, longitude, postcode, state, street_address) values (1, 'Ōmorihigashi', '01/10/2022 13:10:51.338', '111', 35, 139, 'Japan', 'Ota City', '3-chōme 27')

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into location (accommodation_id, city, created_at, detail_address, latitude, longitude, postcode, state, street_address) values (1, 'Ōmorihigashi', '01/10/2022 13:10:51.338', '111', 35, 139, 'Japan', 'Ota City', '3-chōme 27')
 {executed in 1 msec}
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
121. getGeneratedKeys on query: insert into location (accommodation_id, city, created_at, detail_address, latitude, longitude, postcode, state, street_address) values (1, 'Ōmorihigashi', '01/10/2022 13:10:51.338', '111', 35, 139, 'Japan', 'Ota City', '3-chōme 27')
 {executed in 0 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:128] - Vacancy builder.
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:137] - Vacancy save: Vacancy(id=null, price=123456798, startDate=2022-01-10, endDate=2022-02-05, createdAt=null, updatedAt=null, accommodation=Accommodation(id=1, title=test, largeBuildingType=Apartment, buildingType=Annex, maximumGuestCount=1, description=test1
tet2
test3, createdAt=2022-01-10T13:10:51.269976, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null)))
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into vacancy (accommodation_id, created_at, end_date, price, start_date) values (1, '01/10/2022 13:10:51.372', '2022-02-05', '123456798', '2022-01-10')

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into vacancy (accommodation_id, created_at, end_date, price, start_date) values (1, '01/10/2022 13:10:51.372', '2022-02-05', '123456798', '2022-01-10')
 {executed in 9 msec}
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
121. getGeneratedKeys on query: insert into vacancy (accommodation_id, created_at, end_date, price, start_date) values (1, '01/10/2022 13:10:51.372', '2022-02-05', '123456798', '2022-01-10')
 {executed in 0 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:142] - Room builder.
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:152] - Bed save: Room(id=null, number=0, type=entire, isSetUpForGuest=Yes, bathroomCount=2, bathroomType=private, createdAt=null, updatedAt=null, accommodation=Accommodation(id=1, title=test, largeBuildingType=Apartment, buildingType=Annex, maximumGuestCount=1, description=test1
tet2
test3, createdAt=2022-01-10T13:10:51.269976, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null)))
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into room (accommodation_id, bathroom_count, bathroom_type, created_at, is_set_up_for_guest, number, type) values (1, 2, 'private', '01/10/2022 13:10:51.414', 0, 0, 'entire')

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into room (accommodation_id, bathroom_count, bathroom_type, created_at, is_set_up_for_guest, number, type) values (1, 2, 'private', '01/10/2022 13:10:51.414', 0, 0, 'entire')
 {executed in 3 msec}
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
121. getGeneratedKeys on query: insert into room (accommodation_id, bathroom_count, bathroom_type, created_at, is_set_up_for_guest, number, type) values (1, 2, 'private', '01/10/2022 13:10:51.414', 0, 0, 'entire')
 {executed in 0 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:157] - Private bed builder.
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:171] - Private bed save: Bed(id=null, type=Single, count=1, isPrivate=Yes, createdAt=null, updatedAt=null, room=Room(id=1, number=0, type=entire, isSetUpForGuest=Yes, bathroomCount=2, bathroomType=private, createdAt=2022-01-10T13:10:51.414414, updatedAt=null, accommodation=Accommodation(id=1, title=test, largeBuildingType=Apartment, buildingType=Annex, maximumGuestCount=1, description=test1
tet2
test3, createdAt=2022-01-10T13:10:51.269976, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null))))
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 13:10:51.476', 0, 1, 'Single')

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 13:10:51.476', 0, 1, 'Single')
 {executed in 2 msec}
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
121. getGeneratedKeys on query: insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 13:10:51.476', 0, 1, 'Single')
 {executed in 0 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:171] - Private bed save: Bed(id=null, type=Air Mettress, count=1, isPrivate=Yes, createdAt=null, updatedAt=null, room=Room(id=1, number=0, type=entire, isSetUpForGuest=Yes, bathroomCount=2, bathroomType=private, createdAt=2022-01-10T13:10:51.414414, updatedAt=null, accommodation=Accommodation(id=1, title=test, largeBuildingType=Apartment, buildingType=Annex, maximumGuestCount=1, description=test1
tet2
test3, createdAt=2022-01-10T13:10:51.269976, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null))))
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 13:10:51.493', 0, 1, 'Air Mettress')

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 13:10:51.493', 0, 1, 'Air Mettress')
 {executed in 1 msec}
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
121. getGeneratedKeys on query: insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 13:10:51.493', 0, 1, 'Air Mettress')
 {executed in 0 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:177] - Public bed builder
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:189] - Public bed save: Bed(id=null, type=Queen-size, count=1, isPrivate=NO, createdAt=null, updatedAt=null, room=Room(id=1, number=0, type=entire, isSetUpForGuest=Yes, bathroomCount=2, bathroomType=private, createdAt=2022-01-10T13:10:51.414414, updatedAt=null, accommodation=Accommodation(id=1, title=test, largeBuildingType=Apartment, buildingType=Annex, maximumGuestCount=1, description=test1
tet2
test3, createdAt=2022-01-10T13:10:51.269976, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null))))
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 13:10:51.500', 1, 1, 'Queen-size')

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 13:10:51.500', 1, 1, 'Queen-size')
 {executed in 1 msec}
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
121. getGeneratedKeys on query: insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 13:10:51.500', 1, 1, 'Queen-size')
 {executed in 0 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|3             |
|--------------|

INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:195] - Amenities builder.
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:215] - Amenities save: Amenities(id=null, wifi=NOT, tv=NOT, heater=NOT, airConditioner=NOT, iron=NOT, shampoo=NOT, hairDryer=NOT, breakfast=NOT, businessSpace=NOT, fireplace=NOT, closet=NOT, guestEntrance=NOT, createdAt=null, updatedAt=null, room=Room(id=1, number=0, type=entire, isSetUpForGuest=Yes, bathroomCount=2, bathroomType=private, createdAt=2022-01-10T13:10:51.414414, updatedAt=null, accommodation=Accommodation(id=1, title=test, largeBuildingType=Apartment, buildingType=Annex, maximumGuestCount=1, description=test1
tet2
test3, createdAt=2022-01-10T13:10:51.269976, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null))))
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into amenities (air_conditioner, breakfast, business_space, closet, created_at, fireplace, guest_entrance, hair_dryer, heater, iron, room_id, shampoo, tv, wifi) values (1, 1, 1, 1, '01/10/2022 13:10:51.528', 1, 1, 1, 1, 1, 1, 1, 1, 1)

DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
121. insert into amenities (air_conditioner, breakfast, business_space, closet, created_at, fireplace, guest_entrance, hair_dryer, heater, iron, room_id, shampoo, tv, wifi) values (1, 1, 1, 1, '01/10/2022 13:10:51.528', 1, 1, 1, 1, 1, 1, 1, 1, 1)
 {executed in 1 msec}
DEBUG 22-01-10 13:10:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
121. getGeneratedKeys on query: insert into amenities (air_conditioner, breakfast, business_space, closet, created_at, fireplace, guest_entrance, hair_dryer, heater, iron, room_id, shampoo, tv, wifi) values (1, 1, 1, 1, '01/10/2022 13:10:51.528', 1, 1, 1, 1, 1, 1, 1, 1, 1)
 {executed in 0 msec}
INFO  22-01-10 13:10:51[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|1             |
|--------------|

DEBUG 22-01-10 13:11:38[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:11:38[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:11:38[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:11:38[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:11:38[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:11:38[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:11:38[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:11:38[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:11:38[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:13:47[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:13:47[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:13:47[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:13:47[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:13:47[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:13:47[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:13:47[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5772561,139.7335453&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:13:47[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPGM+WC3 Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPGM+WC3"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-7 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5772416,
               "lng" : 139.7335671
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785905802915,
                  "lng" : 139.7349160802915
               },
               "southwest" : {
                  "lat" : 35.5758926197085,
                  "lng" : 139.7322181197085
               }
            }
         },
         "place_id" : "ChIJuTPMlrRhGGAR58k8QDgpc0U",
         "plus_code" : {
            "compound_code" : "HPGM+VC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+VC"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "4",
               "short_name" : "4",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-4 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5772549,
                  "lng" : 139.7336735
               },
               "southwest" : {
                  "lat" : 35.5771134,
                  "lng" : 139.7335315
               }
            },
            "location" : {
               "lat" : 35.5771713,
               "lng" : 139.7336089
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785331302915,
                  "lng" : 139.7349514802915
               },
               "southwest" : {
                  "lat" : 35.5758351697085,
                  "lng" : 139.7322535197085
               }
            }
         },
         "place_id" : "ChIJJ2mOkLRhGGAR6xfVY-yY1CI",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "12",
               "short_name" : "12",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-7-12 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5773426,
               "lng" : 139.7334094
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786915802915,
                  "lng" : 139.7347583802915
               },
               "southwest" : {
                  "lat" : 35.5759936197085,
                  "lng" : 139.7320604197085
               }
            }
         },
         "place_id" : "ChIJd5jGhqBhGGARFuYmd7IwmcE",
         "plus_code" : {
            "compound_code" : "HPGM+W9 Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+W9"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPGM+WC",
               "short_name" : "HPGM+WC",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPGM+WC Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577375,
                  "lng" : 139.733625
               },
               "southwest" : {
                  "lat" : 35.57725,
                  "lng" : 139.7335
               }
            },
            "location" : {
               "lat" : 35.5772561,
               "lng" : 139.7335453
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57866148029149,
                  "lng" : 139.7349114802915
               },
               "southwest" : {
                  "lat" : 35.57596351970849,
                  "lng" : 139.7322135197085
               }
            }
         },
         "place_id" : "GhIJUHUjh-PJQUARTjT-M3l3YUA",
         "plus_code" : {
            "compound_code" : "HPGM+WC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+WC"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 2-chōme Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577288,
                  "lng" : 139.7335273
               },
               "southwest" : {
                  "lat" : 35.5771081,
                  "lng" : 139.7334914
               }
            },
            "location" : {
               "lat" : 35.577198,
               "lng" : 139.7335093
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785470302915,
                  "lng" : 139.7348583302915
               },
               "southwest" : {
                  "lat" : 35.5758490697085,
                  "lng" : 139.7321603697085
               }
            }
         },
         "place_id" : "ChIJiSDelrRhGGARlvildbFBZlg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome-10 Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5775811,
                  "lng" : 139.7340108
               },
               "southwest" : {
                  "lat" : 35.5770128,
                  "lng" : 139.7334946
               }
            },
            "location" : {
               "lat" : 35.5773849,
               "lng" : 139.7338284
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786459302915,
                  "lng" : 139.7351016802915
               },
               "southwest" : {
                  "lat" : 35.5759479697085,
                  "lng" : 139.7324037197085
               }
            }
         },
         "place_id" : "ChIJ1XsHkbRhGGARCa_BksyfXj0",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            },
            "location" : {
               "lat" : 35.5768145,
               "lng" : 139.7300768
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            }
         },
         "place_id" : "ChIJTWi1HktgGGARtX9eKkbQVpI",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJKxelOkhgGGAR5EqpCfQ6L8U",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJSyM_AExgGGARJPeeVwe17K0",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:14:07[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:14:07[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:14:07[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:14:07[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:14:07[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:14:07[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:14:07[http-nio-8080-exec-1] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:14:07[http-nio-8080-exec-1] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:14:07[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:14:07[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:14:07[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:14:07[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:14:07[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:14:07[http-nio-8080-exec-1] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:14:07[http-nio-8080-exec-1] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:14:32[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:14:32[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:14:32[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:14:32[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:14:32[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:14:32[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:14:32[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:14:32[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:14:32[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:14:47[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:14:47[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:14:47[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:14:47[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:14:47[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:14:47[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:14:47[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:14:47[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:14:47[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:20:56[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:20:56[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:20:56[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:20:56[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:20:56[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:20:56[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:20:56[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:20:56[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:20:56[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:24:48[Thread-31] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 13:24:48[Thread-31] [HikariDataSource:350] - HikariPool-8 - Shutdown initiated...
INFO  22-01-10 13:24:48[Thread-31] [HikariDataSource:352] - HikariPool-8 - Shutdown completed.
INFO  22-01-10 13:24:49[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 13:24:49[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 13:24:55[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 13:24:57[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2257 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 13:24:58[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 13:24:58[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 13:24:58[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:24:58[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 13:24:58[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 13:24:59[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 13:24:59[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9660 ms
INFO  22-01-10 13:24:59[restartedMain] [HikariDataSource:110] - HikariPool-9 - Starting...
INFO  22-01-10 13:24:59[restartedMain] [HikariDataSource:123] - HikariPool-9 - Start completed.
INFO  22-01-10 13:25:00[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 13:25:00[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 13:25:00[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 13:25:00[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 13:25:01[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 13:25:02[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'roomController': Unsatisfied dependency expressed through field 'roomApiLogicService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.gradlebnbadminapi.service.RoomApiLogicService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
INFO  22-01-10 13:25:02[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 13:25:02[restartedMain] [HikariDataSource:350] - HikariPool-9 - Shutdown initiated...
INFO  22-01-10 13:25:02[restartedMain] [HikariDataSource:352] - HikariPool-9 - Shutdown completed.
INFO  22-01-10 13:25:02[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 13:25:02[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 13:25:03[restartedMain] [LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field roomApiLogicService in com.example.gradlebnbadminapi.controller.RoomController required a bean of type 'com.example.gradlebnbadminapi.service.RoomApiLogicService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.example.gradlebnbadminapi.service.RoomApiLogicService' in your configuration.

INFO  22-01-10 13:25:49[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 13:25:49[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 13:25:53[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 13:25:54[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1174 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 13:25:55[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 13:25:55[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 13:25:55[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:25:55[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 13:25:55[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 13:25:55[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 13:25:55[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5953 ms
INFO  22-01-10 13:25:55[restartedMain] [HikariDataSource:110] - HikariPool-10 - Starting...
INFO  22-01-10 13:25:55[restartedMain] [HikariDataSource:123] - HikariPool-10 - Start completed.
INFO  22-01-10 13:25:56[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 13:25:56[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 13:25:56[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 13:25:56[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 13:25:57[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 13:25:58[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'roomController': Unsatisfied dependency expressed through field 'roomApiLogicService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.gradlebnbadminapi.service.RoomApiLogicService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
INFO  22-01-10 13:25:58[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 13:25:58[restartedMain] [HikariDataSource:350] - HikariPool-10 - Shutdown initiated...
INFO  22-01-10 13:25:58[restartedMain] [HikariDataSource:352] - HikariPool-10 - Shutdown completed.
INFO  22-01-10 13:25:58[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 13:25:58[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 13:25:58[restartedMain] [LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field roomApiLogicService in com.example.gradlebnbadminapi.controller.RoomController required a bean of type 'com.example.gradlebnbadminapi.service.RoomApiLogicService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.example.gradlebnbadminapi.service.RoomApiLogicService' in your configuration.

INFO  22-01-10 13:26:27[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 13:26:27[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 13:26:31[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 13:26:32[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1554 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 13:26:33[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 13:26:34[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 13:26:34[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:26:34[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 13:26:34[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 13:26:34[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 13:26:34[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 7280 ms
INFO  22-01-10 13:26:34[restartedMain] [HikariDataSource:110] - HikariPool-11 - Starting...
INFO  22-01-10 13:26:34[restartedMain] [HikariDataSource:123] - HikariPool-11 - Start completed.
INFO  22-01-10 13:26:35[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 13:26:35[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 13:26:36[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 13:26:36[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 13:26:36[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 13:26:37[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'roomController': Unsatisfied dependency expressed through field 'roomApiLogicService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.gradlebnbadminapi.service.RoomApiLogicService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
INFO  22-01-10 13:26:37[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 13:26:37[restartedMain] [HikariDataSource:350] - HikariPool-11 - Shutdown initiated...
INFO  22-01-10 13:26:37[restartedMain] [HikariDataSource:352] - HikariPool-11 - Shutdown completed.
INFO  22-01-10 13:26:37[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 13:26:37[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 13:26:37[restartedMain] [LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field roomApiLogicService in com.example.gradlebnbadminapi.controller.RoomController required a bean of type 'com.example.gradlebnbadminapi.service.RoomApiLogicService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.example.gradlebnbadminapi.service.RoomApiLogicService' in your configuration.

INFO  22-01-10 13:27:35[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 13:27:35[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 13:27:39[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 13:27:41[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1559 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 13:27:41[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 13:27:42[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 13:27:42[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:27:42[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 13:27:42[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 13:27:42[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 13:27:42[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 7451 ms
INFO  22-01-10 13:27:42[restartedMain] [HikariDataSource:110] - HikariPool-12 - Starting...
INFO  22-01-10 13:27:42[restartedMain] [HikariDataSource:123] - HikariPool-12 - Start completed.
INFO  22-01-10 13:27:43[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 13:27:43[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 13:27:44[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 13:27:44[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 13:27:44[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 13:27:45[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 237210d2-a23c-4e0c-92f2-28072c88f0b1

INFO  22-01-10 13:27:46[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2ca55d53, org.springframework.security.web.context.SecurityContextPersistenceFilter@6bd6a36c, org.springframework.security.web.header.HeaderWriterFilter@3126393c, org.springframework.web.filter.CorsFilter@19fb57c2, org.springframework.security.web.authentication.logout.LogoutFilter@64b3cc98, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@23bd957b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@24171274, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@24783013, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3d1094bb, org.springframework.security.web.session.SessionManagementFilter@7dfc7758, org.springframework.security.web.access.ExceptionTranslationFilter@2e9c2240]
INFO  22-01-10 13:27:47[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 13:27:47[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:27:47[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 13:27:47[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 12.708 seconds (JVM running for 14304.367)
INFO  22-01-10 13:27:47[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 13:27:49[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 13:27:49[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 13:27:49[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 2 ms
DEBUG 22-01-10 13:27:49[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
161. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:27:49[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
161. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:27:49[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:27:49[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:27:49[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:27:49[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:27:49[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
161. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:27:49[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
161. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:27:49[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:27:52[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
161. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:27:52[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
161. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:27:52[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:27:52[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:27:52[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:27:52[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:27:52[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
161. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:27:52[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
161. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:27:52[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:27:59[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
161. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:27:59[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
161. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:27:59[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:27:59[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:27:59[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:27:59[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:29:23[Thread-35] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 13:29:23[Thread-35] [HikariDataSource:350] - HikariPool-12 - Shutdown initiated...
INFO  22-01-10 13:29:23[Thread-35] [HikariDataSource:352] - HikariPool-12 - Shutdown completed.
INFO  22-01-10 13:29:23[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 13:29:23[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 13:29:27[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 13:29:27[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 894 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 13:29:28[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 13:29:28[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 13:29:28[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:29:28[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 13:29:28[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 13:29:28[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 13:29:28[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 4920 ms
INFO  22-01-10 13:29:29[restartedMain] [HikariDataSource:110] - HikariPool-13 - Starting...
INFO  22-01-10 13:29:29[restartedMain] [HikariDataSource:123] - HikariPool-13 - Start completed.
INFO  22-01-10 13:29:29[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 13:29:29[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 13:29:30[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 13:29:30[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 13:29:30[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 13:29:31[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: d28ea0b3-3143-44d4-8951-7ed875be7169

INFO  22-01-10 13:29:31[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@211b3ffc, org.springframework.security.web.context.SecurityContextPersistenceFilter@639e0636, org.springframework.security.web.header.HeaderWriterFilter@2121ce27, org.springframework.web.filter.CorsFilter@6a99768d, org.springframework.security.web.authentication.logout.LogoutFilter@2d5c8269, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@1d0ab485, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@497bbac0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6684153e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@38201f5f, org.springframework.security.web.session.SessionManagementFilter@4573b9f2, org.springframework.security.web.access.ExceptionTranslationFilter@fb4bf6a]
INFO  22-01-10 13:29:32[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 13:29:32[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:29:32[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 13:29:32[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 8.846 seconds (JVM running for 14409.583)
INFO  22-01-10 13:29:32[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 13:29:42[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 13:29:42[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 13:29:42[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 2 ms
DEBUG 22-01-10 13:29:42[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
171. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:29:42[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
171. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:29:42[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:29:42[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:29:42[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:29:42[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:29:42[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
171. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:29:42[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
171. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:29:42[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:29:45[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
171. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:29:45[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
171. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:29:45[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:29:45[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:29:45[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:29:45[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:30:13[Thread-48] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 13:30:13[Thread-48] [HikariDataSource:350] - HikariPool-13 - Shutdown initiated...
INFO  22-01-10 13:30:13[Thread-48] [HikariDataSource:352] - HikariPool-13 - Shutdown completed.
INFO  22-01-10 13:30:14[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 13:30:14[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 13:30:17[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 13:30:18[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 872 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 13:30:18[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 13:30:19[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 13:30:19[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:30:19[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 13:30:19[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 13:30:19[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 13:30:19[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 4898 ms
INFO  22-01-10 13:30:19[restartedMain] [HikariDataSource:110] - HikariPool-14 - Starting...
INFO  22-01-10 13:30:19[restartedMain] [HikariDataSource:123] - HikariPool-14 - Start completed.
INFO  22-01-10 13:30:19[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 13:30:19[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 13:30:20[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 13:30:20[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 13:30:20[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 13:30:21[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 10c3b234-3d80-4bf1-9b6d-1d269bfd64cb

INFO  22-01-10 13:30:22[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@bf173c7, org.springframework.security.web.context.SecurityContextPersistenceFilter@705741cc, org.springframework.security.web.header.HeaderWriterFilter@6a7b43d9, org.springframework.web.filter.CorsFilter@1cc8edcc, org.springframework.security.web.authentication.logout.LogoutFilter@70549ea5, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@60cdfff7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4185e92b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71d00f49, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4bdf3118, org.springframework.security.web.session.SessionManagementFilter@19fa54df, org.springframework.security.web.access.ExceptionTranslationFilter@61ca1538]
INFO  22-01-10 13:30:22[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 13:30:22[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 13:30:22[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 13:30:22[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 9.102 seconds (JVM running for 14459.86)
INFO  22-01-10 13:30:22[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 13:30:38[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 13:30:38[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 13:30:38[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-10 13:30:38[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:30:38[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:30:38[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:30:38[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:30:38[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:30:38[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:30:38[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:30:38[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:30:38[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:30:39[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:30:39[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:30:39[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:30:39[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:30:39[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:30:39[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:32:13[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:32:13[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:32:13[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:32:13[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:32:13[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:32:13[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:32:13[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:32:13[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:32:31[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:32:31[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:32:31[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:32:31[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:32:31[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:32:31[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:32:31[http-nio-8080-exec-7] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:32:31[http-nio-8080-exec-7] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:32:31[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:32:31[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:32:31[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:32:31[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:32:31[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:32:31[http-nio-8080-exec-7] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:32:31[http-nio-8080-exec-7] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:32:59[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:32:59[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:32:59[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:32:59[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:32:59[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:32:59[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:32:59[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:32:59[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:32:59[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:33:35[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:33:35[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:33:35[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:33:35[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:33:35[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:33:35[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:33:35[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:33:35[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:33:35[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:35:08[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:35:08[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:35:08[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:35:08[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:35:08[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:35:08[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:36:17[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:36:17[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:36:17[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:36:17[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:36:17[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:36:17[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:36:17[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:36:17[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:36:33[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:36:33[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:36:33[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:36:33[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:36:33[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:36:33[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:36:33[http-nio-8080-exec-4] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:36:33[http-nio-8080-exec-4] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:36:33[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:36:33[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:36:33[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:36:33[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:36:33[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:36:33[http-nio-8080-exec-4] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:36:33[http-nio-8080-exec-4] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:37:02[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:37:02[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:37:02[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:37:02[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:37:02[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:37:02[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:37:02[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:37:02[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:37:02[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:38:56[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:38:56[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:38:56[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:38:56[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:38:56[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:38:56[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:38:56[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:38:56[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:38:56[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:39:55[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:39:55[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:39:55[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:39:55[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:39:55[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:39:55[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:41:16[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:41:16[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:41:16[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:41:16[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:41:16[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:41:16[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:41:16[http-nio-8080-exec-10] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:41:16[http-nio-8080-exec-10] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:41:16[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:41:16[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:41:16[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:41:16[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:41:16[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:41:16[http-nio-8080-exec-10] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:41:16[http-nio-8080-exec-10] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:41:21[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:41:21[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:41:21[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:41:21[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:41:21[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:41:21[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:41:29[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:41:29[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:41:29[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:41:29[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:41:29[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:41:29[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:42:04[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:42:04[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:42:04[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:42:04[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:42:04[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:42:04[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:42:04[http-nio-8080-exec-3] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:42:04[http-nio-8080-exec-3] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:42:04[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:42:04[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:42:04[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:42:04[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:42:04[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:42:04[http-nio-8080-exec-3] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:42:04[http-nio-8080-exec-3] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:42:11[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:42:11[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:42:11[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:42:11[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:42:11[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:42:11[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:42:18[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:42:18[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:42:18[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:42:18[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:42:18[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:42:18[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:42:18[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:42:18[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:42:22[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:42:22[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:42:22[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:42:22[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:42:22[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:42:22[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:42:22[http-nio-8080-exec-6] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:42:22[http-nio-8080-exec-6] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:42:22[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:42:22[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:42:22[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:42:22[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:42:22[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:42:22[http-nio-8080-exec-6] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:42:22[http-nio-8080-exec-6] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:42:27[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:42:27[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:42:27[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:42:27[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:42:27[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:42:27[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:42:44[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:42:44[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:42:44[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:42:44[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:42:44[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:42:44[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:42:44[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:42:44[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:42:59[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:42:59[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:42:59[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:42:59[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:42:59[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:42:59[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:42:59[http-nio-8080-exec-9] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:42:59[http-nio-8080-exec-9] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:42:59[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:42:59[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:42:59[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:42:59[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:42:59[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:42:59[http-nio-8080-exec-9] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:42:59[http-nio-8080-exec-9] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:43:04[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:43:04[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:43:04[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:43:04[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:43:04[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:43:04[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:43:24[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:43:24[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:43:24[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:43:24[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:43:24[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:43:24[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:43:39[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:43:39[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:43:39[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:43:39[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:43:39[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:43:39[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:44:05[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:44:05[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:44:05[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:44:05[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:44:05[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:44:05[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:44:26[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:44:26[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:44:26[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:44:26[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:44:26[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:44:26[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:44:26[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:44:26[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:44:26[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:44:58[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:44:58[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:44:58[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:44:58[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:44:58[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:44:58[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:44:58[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:44:58[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:44:58[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:46:56[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:46:56[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:46:56[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:46:56[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:46:56[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:46:56[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:46:56[http-nio-8080-exec-8] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:46:56[http-nio-8080-exec-8] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:46:56[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:46:56[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:46:56[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:46:56[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:46:56[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:46:56[http-nio-8080-exec-8] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:46:56[http-nio-8080-exec-8] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:47:07[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:47:07[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:47:07[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:47:07[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:47:07[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:47:07[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:47:13[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:47:13[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:47:13[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:47:13[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:47:13[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:47:13[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:47:18[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:47:18[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:47:18[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:47:18[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:47:18[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:47:18[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:47:18[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:47:18[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:48:39[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:48:39[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:48:39[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:48:39[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:48:39[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:48:39[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:48:39[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:48:39[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:49:34[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:49:34[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:49:34[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:49:34[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:49:34[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:49:34[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:49:34[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:49:34[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:49:34[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:49:35[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:49:35[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:49:35[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:49:35[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:49:35[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:49:35[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:49:35[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:49:35[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:49:56[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:49:56[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:49:56[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:49:56[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:49:56[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:49:56[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:49:56[http-nio-8080-exec-6] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:49:56[http-nio-8080-exec-6] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:49:56[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:49:56[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:49:56[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:49:56[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:49:56[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 0 msec}
INFO  22-01-10 13:49:56[http-nio-8080-exec-6] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:49:56[http-nio-8080-exec-6] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:50:45[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:50:45[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:50:45[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:50:45[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:50:45[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:50:45[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:50:45[http-nio-8080-exec-7] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:50:45[http-nio-8080-exec-7] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:50:45[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:50:45[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:50:45[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:50:45[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:50:45[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:50:45[http-nio-8080-exec-7] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:50:45[http-nio-8080-exec-7] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:50:57[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:50:57[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:50:57[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:50:57[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:50:57[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:50:57[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:50:57[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:50:57[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:50:57[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:51:01[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:51:01[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:51:01[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:51:01[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:51:01[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:51:01[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:51:01[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:51:01[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:51:01[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:51:20[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:51:20[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:51:20[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:51:20[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:51:20[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:51:20[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:51:20[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:51:20[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:51:28[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:51:28[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:51:28[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:51:28[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:51:28[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:51:28[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:51:28[http-nio-8080-exec-1] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:51:28[http-nio-8080-exec-1] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:51:28[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:51:28[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:51:28[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:51:28[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:51:28[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:51:28[http-nio-8080-exec-1] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:51:28[http-nio-8080-exec-1] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:51:47[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:51:47[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:51:47[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:51:47[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:51:47[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:51:47[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:52:04[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:52:04[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:52:04[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:52:04[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:52:04[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:52:04[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:52:06[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:52:06[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:52:06[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:52:06[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:52:06[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:52:06[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:52:18[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:52:18[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-10 13:52:18[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:52:18[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:52:18[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:52:18[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:52:18[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:52:18[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:52:18[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:52:21[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:52:21[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:52:21[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:52:21[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:52:21[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:52:21[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:52:21[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:52:21[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:52:21[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:53:42[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:53:42[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:53:42[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:53:42[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:53:42[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:53:42[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:53:42[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5772566,139.7335407&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:53:42[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPGM+WC3 Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPGM+WC3"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-7 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5772416,
               "lng" : 139.7335671
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785905802915,
                  "lng" : 139.7349160802915
               },
               "southwest" : {
                  "lat" : 35.5758926197085,
                  "lng" : 139.7322181197085
               }
            }
         },
         "place_id" : "ChIJuTPMlrRhGGAR58k8QDgpc0U",
         "plus_code" : {
            "compound_code" : "HPGM+VC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+VC"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "4",
               "short_name" : "4",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-4 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5772549,
                  "lng" : 139.7336735
               },
               "southwest" : {
                  "lat" : 35.5771134,
                  "lng" : 139.7335315
               }
            },
            "location" : {
               "lat" : 35.5771713,
               "lng" : 139.7336089
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785331302915,
                  "lng" : 139.7349514802915
               },
               "southwest" : {
                  "lat" : 35.5758351697085,
                  "lng" : 139.7322535197085
               }
            }
         },
         "place_id" : "ChIJJ2mOkLRhGGAR6xfVY-yY1CI",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "12",
               "short_name" : "12",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-7-12 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5773426,
               "lng" : 139.7334094
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786915802915,
                  "lng" : 139.7347583802915
               },
               "southwest" : {
                  "lat" : 35.5759936197085,
                  "lng" : 139.7320604197085
               }
            }
         },
         "place_id" : "ChIJd5jGhqBhGGARFuYmd7IwmcE",
         "plus_code" : {
            "compound_code" : "HPGM+W9 Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+W9"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPGM+WC",
               "short_name" : "HPGM+WC",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPGM+WC Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577375,
                  "lng" : 139.733625
               },
               "southwest" : {
                  "lat" : 35.57725,
                  "lng" : 139.7335
               }
            },
            "location" : {
               "lat" : 35.5772566,
               "lng" : 139.7335407
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57866148029149,
                  "lng" : 139.7349114802915
               },
               "southwest" : {
                  "lat" : 35.57596351970849,
                  "lng" : 139.7322135197085
               }
            }
         },
         "place_id" : "GhIJODNVi-PJQUARHplYKnl3YUA",
         "plus_code" : {
            "compound_code" : "HPGM+WC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+WC"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 2-chōme Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577288,
                  "lng" : 139.7335273
               },
               "southwest" : {
                  "lat" : 35.5771081,
                  "lng" : 139.7334914
               }
            },
            "location" : {
               "lat" : 35.577198,
               "lng" : 139.7335093
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785470302915,
                  "lng" : 139.7348583302915
               },
               "southwest" : {
                  "lat" : 35.5758490697085,
                  "lng" : 139.7321603697085
               }
            }
         },
         "place_id" : "ChIJiSDelrRhGGARlvildbFBZlg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome-10 Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5775811,
                  "lng" : 139.7340108
               },
               "southwest" : {
                  "lat" : 35.5770128,
                  "lng" : 139.7334946
               }
            },
            "location" : {
               "lat" : 35.5773849,
               "lng" : 139.7338284
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786459302915,
                  "lng" : 139.7351016802915
               },
               "southwest" : {
                  "lat" : 35.5759479697085,
                  "lng" : 139.7324037197085
               }
            }
         },
         "place_id" : "ChIJ1XsHkbRhGGARCa_BksyfXj0",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            },
            "location" : {
               "lat" : 35.5768145,
               "lng" : 139.7300768
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            }
         },
         "place_id" : "ChIJTWi1HktgGGARtX9eKkbQVpI",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJKxelOkhgGGAR5EqpCfQ6L8U",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJSyM_AExgGGARJPeeVwe17K0",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:53:48[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:53:48[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:53:48[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:53:48[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:53:48[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:53:48[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:53:48[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5772566,139.7335407&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:53:48[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPGM+WC3 Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPGM+WC3"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-7 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5772416,
               "lng" : 139.7335671
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785905802915,
                  "lng" : 139.7349160802915
               },
               "southwest" : {
                  "lat" : 35.5758926197085,
                  "lng" : 139.7322181197085
               }
            }
         },
         "place_id" : "ChIJuTPMlrRhGGAR58k8QDgpc0U",
         "plus_code" : {
            "compound_code" : "HPGM+VC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+VC"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "4",
               "short_name" : "4",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-4 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5772549,
                  "lng" : 139.7336735
               },
               "southwest" : {
                  "lat" : 35.5771134,
                  "lng" : 139.7335315
               }
            },
            "location" : {
               "lat" : 35.5771713,
               "lng" : 139.7336089
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785331302915,
                  "lng" : 139.7349514802915
               },
               "southwest" : {
                  "lat" : 35.5758351697085,
                  "lng" : 139.7322535197085
               }
            }
         },
         "place_id" : "ChIJJ2mOkLRhGGAR6xfVY-yY1CI",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "12",
               "short_name" : "12",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-7-12 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5773426,
               "lng" : 139.7334094
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786915802915,
                  "lng" : 139.7347583802915
               },
               "southwest" : {
                  "lat" : 35.5759936197085,
                  "lng" : 139.7320604197085
               }
            }
         },
         "place_id" : "ChIJd5jGhqBhGGARFuYmd7IwmcE",
         "plus_code" : {
            "compound_code" : "HPGM+W9 Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+W9"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPGM+WC",
               "short_name" : "HPGM+WC",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPGM+WC Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577375,
                  "lng" : 139.733625
               },
               "southwest" : {
                  "lat" : 35.57725,
                  "lng" : 139.7335
               }
            },
            "location" : {
               "lat" : 35.5772566,
               "lng" : 139.7335407
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57866148029149,
                  "lng" : 139.7349114802915
               },
               "southwest" : {
                  "lat" : 35.57596351970849,
                  "lng" : 139.7322135197085
               }
            }
         },
         "place_id" : "GhIJODNVi-PJQUARHplYKnl3YUA",
         "plus_code" : {
            "compound_code" : "HPGM+WC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+WC"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 2-chōme Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577288,
                  "lng" : 139.7335273
               },
               "southwest" : {
                  "lat" : 35.5771081,
                  "lng" : 139.7334914
               }
            },
            "location" : {
               "lat" : 35.577198,
               "lng" : 139.7335093
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785470302915,
                  "lng" : 139.7348583302915
               },
               "southwest" : {
                  "lat" : 35.5758490697085,
                  "lng" : 139.7321603697085
               }
            }
         },
         "place_id" : "ChIJiSDelrRhGGARlvildbFBZlg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome-10 Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5775811,
                  "lng" : 139.7340108
               },
               "southwest" : {
                  "lat" : 35.5770128,
                  "lng" : 139.7334946
               }
            },
            "location" : {
               "lat" : 35.5773849,
               "lng" : 139.7338284
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786459302915,
                  "lng" : 139.7351016802915
               },
               "southwest" : {
                  "lat" : 35.5759479697085,
                  "lng" : 139.7324037197085
               }
            }
         },
         "place_id" : "ChIJ1XsHkbRhGGARCa_BksyfXj0",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            },
            "location" : {
               "lat" : 35.5768145,
               "lng" : 139.7300768
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            }
         },
         "place_id" : "ChIJTWi1HktgGGARtX9eKkbQVpI",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJKxelOkhgGGAR5EqpCfQ6L8U",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJSyM_AExgGGARJPeeVwe17K0",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:54:52[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:54:52[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:54:52[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:54:52[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:54:52[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:54:52[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:54:52[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:54:52[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:54:52[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:54:53[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:54:53[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:54:53[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:54:53[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:54:53[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:54:53[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:54:53[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5772566,139.7335407&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:54:53[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPGM+WC3 Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPGM+WC3"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-7 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5772416,
               "lng" : 139.7335671
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785905802915,
                  "lng" : 139.7349160802915
               },
               "southwest" : {
                  "lat" : 35.5758926197085,
                  "lng" : 139.7322181197085
               }
            }
         },
         "place_id" : "ChIJuTPMlrRhGGAR58k8QDgpc0U",
         "plus_code" : {
            "compound_code" : "HPGM+VC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+VC"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "4",
               "short_name" : "4",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-4 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5772549,
                  "lng" : 139.7336735
               },
               "southwest" : {
                  "lat" : 35.5771134,
                  "lng" : 139.7335315
               }
            },
            "location" : {
               "lat" : 35.5771713,
               "lng" : 139.7336089
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785331302915,
                  "lng" : 139.7349514802915
               },
               "southwest" : {
                  "lat" : 35.5758351697085,
                  "lng" : 139.7322535197085
               }
            }
         },
         "place_id" : "ChIJJ2mOkLRhGGAR6xfVY-yY1CI",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "12",
               "short_name" : "12",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-7-12 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5773426,
               "lng" : 139.7334094
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786915802915,
                  "lng" : 139.7347583802915
               },
               "southwest" : {
                  "lat" : 35.5759936197085,
                  "lng" : 139.7320604197085
               }
            }
         },
         "place_id" : "ChIJd5jGhqBhGGARFuYmd7IwmcE",
         "plus_code" : {
            "compound_code" : "HPGM+W9 Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+W9"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPGM+WC",
               "short_name" : "HPGM+WC",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPGM+WC Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577375,
                  "lng" : 139.733625
               },
               "southwest" : {
                  "lat" : 35.57725,
                  "lng" : 139.7335
               }
            },
            "location" : {
               "lat" : 35.5772566,
               "lng" : 139.7335407
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57866148029149,
                  "lng" : 139.7349114802915
               },
               "southwest" : {
                  "lat" : 35.57596351970849,
                  "lng" : 139.7322135197085
               }
            }
         },
         "place_id" : "GhIJODNVi-PJQUARHplYKnl3YUA",
         "plus_code" : {
            "compound_code" : "HPGM+WC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+WC"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 2-chōme Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577288,
                  "lng" : 139.7335273
               },
               "southwest" : {
                  "lat" : 35.5771081,
                  "lng" : 139.7334914
               }
            },
            "location" : {
               "lat" : 35.577198,
               "lng" : 139.7335093
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785470302915,
                  "lng" : 139.7348583302915
               },
               "southwest" : {
                  "lat" : 35.5758490697085,
                  "lng" : 139.7321603697085
               }
            }
         },
         "place_id" : "ChIJiSDelrRhGGARlvildbFBZlg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome-10 Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5775811,
                  "lng" : 139.7340108
               },
               "southwest" : {
                  "lat" : 35.5770128,
                  "lng" : 139.7334946
               }
            },
            "location" : {
               "lat" : 35.5773849,
               "lng" : 139.7338284
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786459302915,
                  "lng" : 139.7351016802915
               },
               "southwest" : {
                  "lat" : 35.5759479697085,
                  "lng" : 139.7324037197085
               }
            }
         },
         "place_id" : "ChIJ1XsHkbRhGGARCa_BksyfXj0",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            },
            "location" : {
               "lat" : 35.5768145,
               "lng" : 139.7300768
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            }
         },
         "place_id" : "ChIJTWi1HktgGGARtX9eKkbQVpI",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJKxelOkhgGGAR5EqpCfQ6L8U",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJSyM_AExgGGARJPeeVwe17K0",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:54:57[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:54:57[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:54:57[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:54:57[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:54:57[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:54:57[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:54:57[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:54:57[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:54:57[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:54:58[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:54:58[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:54:58[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:54:58[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:54:58[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:54:58[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:54:58[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5772566,139.7335407&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:54:58[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPGM+WC3 Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPGM+WC3"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-7 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5772416,
               "lng" : 139.7335671
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785905802915,
                  "lng" : 139.7349160802915
               },
               "southwest" : {
                  "lat" : 35.5758926197085,
                  "lng" : 139.7322181197085
               }
            }
         },
         "place_id" : "ChIJuTPMlrRhGGAR58k8QDgpc0U",
         "plus_code" : {
            "compound_code" : "HPGM+VC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+VC"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "4",
               "short_name" : "4",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-4 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5772549,
                  "lng" : 139.7336735
               },
               "southwest" : {
                  "lat" : 35.5771134,
                  "lng" : 139.7335315
               }
            },
            "location" : {
               "lat" : 35.5771713,
               "lng" : 139.7336089
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785331302915,
                  "lng" : 139.7349514802915
               },
               "southwest" : {
                  "lat" : 35.5758351697085,
                  "lng" : 139.7322535197085
               }
            }
         },
         "place_id" : "ChIJJ2mOkLRhGGAR6xfVY-yY1CI",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "12",
               "short_name" : "12",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-7-12 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5773426,
               "lng" : 139.7334094
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786915802915,
                  "lng" : 139.7347583802915
               },
               "southwest" : {
                  "lat" : 35.5759936197085,
                  "lng" : 139.7320604197085
               }
            }
         },
         "place_id" : "ChIJd5jGhqBhGGARFuYmd7IwmcE",
         "plus_code" : {
            "compound_code" : "HPGM+W9 Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+W9"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPGM+WC",
               "short_name" : "HPGM+WC",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPGM+WC Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577375,
                  "lng" : 139.733625
               },
               "southwest" : {
                  "lat" : 35.57725,
                  "lng" : 139.7335
               }
            },
            "location" : {
               "lat" : 35.5772566,
               "lng" : 139.7335407
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57866148029149,
                  "lng" : 139.7349114802915
               },
               "southwest" : {
                  "lat" : 35.57596351970849,
                  "lng" : 139.7322135197085
               }
            }
         },
         "place_id" : "GhIJODNVi-PJQUARHplYKnl3YUA",
         "plus_code" : {
            "compound_code" : "HPGM+WC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+WC"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 2-chōme Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577288,
                  "lng" : 139.7335273
               },
               "southwest" : {
                  "lat" : 35.5771081,
                  "lng" : 139.7334914
               }
            },
            "location" : {
               "lat" : 35.577198,
               "lng" : 139.7335093
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785470302915,
                  "lng" : 139.7348583302915
               },
               "southwest" : {
                  "lat" : 35.5758490697085,
                  "lng" : 139.7321603697085
               }
            }
         },
         "place_id" : "ChIJiSDelrRhGGARlvildbFBZlg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome-10 Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5775811,
                  "lng" : 139.7340108
               },
               "southwest" : {
                  "lat" : 35.5770128,
                  "lng" : 139.7334946
               }
            },
            "location" : {
               "lat" : 35.5773849,
               "lng" : 139.7338284
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786459302915,
                  "lng" : 139.7351016802915
               },
               "southwest" : {
                  "lat" : 35.5759479697085,
                  "lng" : 139.7324037197085
               }
            }
         },
         "place_id" : "ChIJ1XsHkbRhGGARCa_BksyfXj0",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            },
            "location" : {
               "lat" : 35.5768145,
               "lng" : 139.7300768
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            }
         },
         "place_id" : "ChIJTWi1HktgGGARtX9eKkbQVpI",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJKxelOkhgGGAR5EqpCfQ6L8U",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJSyM_AExgGGARJPeeVwe17K0",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:55:32[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:55:32[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:55:32[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:55:32[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:55:32[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:55:32[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:55:32[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5772566,139.7335407&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:55:32[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPGM+WC3 Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPGM+WC3"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-7 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5772416,
               "lng" : 139.7335671
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785905802915,
                  "lng" : 139.7349160802915
               },
               "southwest" : {
                  "lat" : 35.5758926197085,
                  "lng" : 139.7322181197085
               }
            }
         },
         "place_id" : "ChIJuTPMlrRhGGAR58k8QDgpc0U",
         "plus_code" : {
            "compound_code" : "HPGM+VC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+VC"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "4",
               "short_name" : "4",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-4 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5772549,
                  "lng" : 139.7336735
               },
               "southwest" : {
                  "lat" : 35.5771134,
                  "lng" : 139.7335315
               }
            },
            "location" : {
               "lat" : 35.5771713,
               "lng" : 139.7336089
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785331302915,
                  "lng" : 139.7349514802915
               },
               "southwest" : {
                  "lat" : 35.5758351697085,
                  "lng" : 139.7322535197085
               }
            }
         },
         "place_id" : "ChIJJ2mOkLRhGGAR6xfVY-yY1CI",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "12",
               "short_name" : "12",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-7-12 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5773426,
               "lng" : 139.7334094
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786915802915,
                  "lng" : 139.7347583802915
               },
               "southwest" : {
                  "lat" : 35.5759936197085,
                  "lng" : 139.7320604197085
               }
            }
         },
         "place_id" : "ChIJd5jGhqBhGGARFuYmd7IwmcE",
         "plus_code" : {
            "compound_code" : "HPGM+W9 Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+W9"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPGM+WC",
               "short_name" : "HPGM+WC",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPGM+WC Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577375,
                  "lng" : 139.733625
               },
               "southwest" : {
                  "lat" : 35.57725,
                  "lng" : 139.7335
               }
            },
            "location" : {
               "lat" : 35.5772566,
               "lng" : 139.7335407
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57866148029149,
                  "lng" : 139.7349114802915
               },
               "southwest" : {
                  "lat" : 35.57596351970849,
                  "lng" : 139.7322135197085
               }
            }
         },
         "place_id" : "GhIJODNVi-PJQUARHplYKnl3YUA",
         "plus_code" : {
            "compound_code" : "HPGM+WC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+WC"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 2-chōme Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577288,
                  "lng" : 139.7335273
               },
               "southwest" : {
                  "lat" : 35.5771081,
                  "lng" : 139.7334914
               }
            },
            "location" : {
               "lat" : 35.577198,
               "lng" : 139.7335093
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785470302915,
                  "lng" : 139.7348583302915
               },
               "southwest" : {
                  "lat" : 35.5758490697085,
                  "lng" : 139.7321603697085
               }
            }
         },
         "place_id" : "ChIJiSDelrRhGGARlvildbFBZlg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome-10 Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5775811,
                  "lng" : 139.7340108
               },
               "southwest" : {
                  "lat" : 35.5770128,
                  "lng" : 139.7334946
               }
            },
            "location" : {
               "lat" : 35.5773849,
               "lng" : 139.7338284
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786459302915,
                  "lng" : 139.7351016802915
               },
               "southwest" : {
                  "lat" : 35.5759479697085,
                  "lng" : 139.7324037197085
               }
            }
         },
         "place_id" : "ChIJ1XsHkbRhGGARCa_BksyfXj0",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            },
            "location" : {
               "lat" : 35.5768145,
               "lng" : 139.7300768
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            }
         },
         "place_id" : "ChIJTWi1HktgGGARtX9eKkbQVpI",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJKxelOkhgGGAR5EqpCfQ6L8U",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJSyM_AExgGGARJPeeVwe17K0",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:56:11[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:56:11[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:56:11[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:56:11[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:56:11[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:56:11[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:56:11[http-nio-8080-exec-7] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:56:11[http-nio-8080-exec-7] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:56:11[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:56:11[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:56:11[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:56:11[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:56:11[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:56:11[http-nio-8080-exec-7] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:56:11[http-nio-8080-exec-7] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:56:40[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:56:40[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:56:40[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:56:40[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:56:40[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:56:40[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:56:40[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:56:40[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:56:40[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:56:44[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:56:44[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:56:44[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:56:44[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:56:44[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:56:44[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:56:44[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:56:44[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:56:44[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:56:46[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:56:46[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:56:46[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:56:46[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:56:46[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 13:56:46[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:56:46[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:56:46[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:56:46[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:57:01[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:57:01[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:57:01[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:57:01[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:57:01[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 13:57:01[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:57:01[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 13:57:01[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 13:58:46[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:58:46[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:58:46[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:58:46[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:58:46[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:58:46[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:58:46[http-nio-8080-exec-3] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:58:46[http-nio-8080-exec-3] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:58:46[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:58:46[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:58:46[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:58:46[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:58:46[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:58:46[http-nio-8080-exec-3] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:58:46[http-nio-8080-exec-3] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:59:06[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:59:06[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:59:06[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:59:06[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:59:06[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:59:06[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:59:15[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:59:15[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:59:15[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:59:15[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 13:59:15[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 13:59:15[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 13:59:15[http-nio-8080-exec-6] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 13:59:15[http-nio-8080-exec-6] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 13:59:15[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:59:15[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:59:15[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 13:59:15[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 13:59:15[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 13:59:15[http-nio-8080-exec-6] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 13:59:15[http-nio-8080-exec-6] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 13:59:22[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:59:22[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
181. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 13:59:22[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:59:22[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:59:22[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:59:22[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 13:59:58[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
182. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 13:59:58[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
182. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 13:59:58[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 13:59:58[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 13:59:58[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 13:59:58[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:00:22[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:00:22[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:00:22[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:00:22[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:00:22[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 14:00:22[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:00:22[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:00:22[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 14:00:22[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 14:00:58[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:00:58[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:00:58[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:00:58[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:00:58[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 14:00:58[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:00:58[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:00:58[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:00:58[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 14:01:58[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:01:58[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 14:01:58[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:01:58[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:01:58[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 14:01:58[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:01:58[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:01:58[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:01:58[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 14:02:14[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:02:14[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:02:14[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:02:14[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:02:14[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 14:02:14[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 14:02:14[http-nio-8080-exec-3] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 14:02:14[http-nio-8080-exec-3] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 14:02:14[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:02:14[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 14:02:14[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 14:02:14[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 14:02:14[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 0 msec}
INFO  22-01-10 14:02:14[http-nio-8080-exec-3] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 14:02:14[http-nio-8080-exec-3] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 14:02:21[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:02:21[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 14:02:21[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:02:21[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:02:21[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:02:21[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:03:29[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:03:29[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 14:03:29[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:03:29[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:03:29[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 14:03:29[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 14:03:29[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5772512,139.7335504&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 14:03:30[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPGM+WC3 Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPGM+WC3"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-7 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5772416,
               "lng" : 139.7335671
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785905802915,
                  "lng" : 139.7349160802915
               },
               "southwest" : {
                  "lat" : 35.5758926197085,
                  "lng" : 139.7322181197085
               }
            }
         },
         "place_id" : "ChIJuTPMlrRhGGAR58k8QDgpc0U",
         "plus_code" : {
            "compound_code" : "HPGM+VC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+VC"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "4",
               "short_name" : "4",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-10-4 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5772549,
                  "lng" : 139.7336735
               },
               "southwest" : {
                  "lat" : 35.5771134,
                  "lng" : 139.7335315
               }
            },
            "location" : {
               "lat" : 35.5771713,
               "lng" : 139.7336089
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5785331302915,
                  "lng" : 139.7349514802915
               },
               "southwest" : {
                  "lat" : 35.5758351697085,
                  "lng" : 139.7322535197085
               }
            }
         },
         "place_id" : "ChIJJ2mOkLRhGGAR6xfVY-yY1CI",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "12",
               "short_name" : "12",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "7",
               "short_name" : "7",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2-chōme-7-12 Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5773426,
               "lng" : 139.7334094
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786915802915,
                  "lng" : 139.7347583802915
               },
               "southwest" : {
                  "lat" : 35.5759936197085,
                  "lng" : 139.7320604197085
               }
            }
         },
         "place_id" : "ChIJd5jGhqBhGGARFuYmd7IwmcE",
         "plus_code" : {
            "compound_code" : "HPGM+W9 Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+W9"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPGM+WC",
               "short_name" : "HPGM+WC",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPGM+WC Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.577375,
                  "lng" : 139.733625
               },
               "southwest" : {
                  "lat" : 35.57725,
                  "lng" : 139.7335
               }
            },
            "location" : {
               "lat" : 35.5772512,
               "lng" : 139.7335504
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57866148029149,
                  "lng" : 139.7349114802915
               },
               "southwest" : {
                  "lat" : 35.57596351970849,
                  "lng" : 139.7322135197085
               }
            }
         },
         "place_id" : "GhIJ08kIXuPJQUAR9z6wPnl3YUA",
         "plus_code" : {
            "compound_code" : "HPGM+WC Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPGM+WC"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "2-chōme",
               "short_name" : "2-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorinishi",
               "short_name" : "Ōmorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 2-chōme Ōmorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5774348,
                  "lng" : 139.7337001
               },
               "southwest" : {
                  "lat" : 35.577288,
                  "lng" : 139.7334914
               }
            },
            "location" : {
               "lat" : 35.5773418,
               "lng" : 139.7336157
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5787103802915,
                  "lng" : 139.7349447302915
               },
               "southwest" : {
                  "lat" : 35.5760124197085,
                  "lng" : 139.7322467697085
               }
            }
         },
         "place_id" : "ChIJk_tVkbRhGGARWiTVJ0l_SEo",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "10",
               "short_name" : "10",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome-10 Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5775811,
                  "lng" : 139.7340108
               },
               "southwest" : {
                  "lat" : 35.5770128,
                  "lng" : 139.7334946
               }
            },
            "location" : {
               "lat" : 35.5773849,
               "lng" : 139.7338284
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5786459302915,
                  "lng" : 139.7351016802915
               },
               "southwest" : {
                  "lat" : 35.5759479697085,
                  "lng" : 139.7324037197085
               }
            }
         },
         "place_id" : "ChIJ1XsHkbRhGGARCa_BksyfXj0",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "2 Chome",
               "short_name" : "2 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "2 Chome Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            },
            "location" : {
               "lat" : 35.5768145,
               "lng" : 139.7300768
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5793048,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5751587,
                  "lng" : 139.7258235
               }
            }
         },
         "place_id" : "ChIJTWi1HktgGGARtX9eKkbQVpI",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJKxelOkhgGGAR5EqpCfQ6L8U",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorinishi",
               "short_name" : "Omorinishi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0015",
               "short_name" : "143-0015",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorinishi, Ota City, Tokyo 143-0015, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5725375,
               "lng" : 139.7294382
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5804557,
                  "lng" : 139.7351177
               },
               "southwest" : {
                  "lat" : 35.5669497,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJSyM_AExgGGARJPeeVwe17K0",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 14:03:36[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:03:36[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:03:36[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:03:36[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:03:36[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 14:03:36[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 14:03:36[http-nio-8080-exec-9] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 14:03:36[http-nio-8080-exec-9] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 14:03:36[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:03:36[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:03:36[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 14:03:36[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 14:03:36[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 14:03:36[http-nio-8080-exec-9] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 14:03:36[http-nio-8080-exec-9] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 14:03:41[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:03:41[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:03:41[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:03:41[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:03:41[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:03:41[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:04:06[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:04:06[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:04:06[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:04:06[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:04:06[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 14:04:06[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 14:04:06[http-nio-8080-exec-1] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 14:04:06[http-nio-8080-exec-1] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 14:04:06[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:04:06[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:04:06[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 14:04:06[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 14:04:06[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 0 msec}
INFO  22-01-10 14:04:06[http-nio-8080-exec-1] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 14:04:06[http-nio-8080-exec-1] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 14:04:11[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:04:11[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:04:11[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:04:11[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:04:11[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:04:11[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:04:23[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:04:23[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:04:23[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:04:23[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:04:23[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:04:23[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:04:32[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:04:32[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:04:32[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:04:32[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:04:32[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:04:32[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:04:40[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:04:40[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:04:40[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:04:40[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:04:40[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 14:04:40[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:04:40[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:04:40[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:04:40[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 14:04:58[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:04:58[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:04:58[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:04:58[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:04:58[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 14:04:58[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:04:58[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:04:58[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:04:58[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 14:09:57[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:09:57[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 14:09:57[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:09:57[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:09:57[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 14:09:57[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 14:09:57[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 14:09:57[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 14:10:04[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:10:04[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:10:04[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:10:04[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:10:04[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 14:10:04[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 14:10:04[http-nio-8080-exec-10] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 14:10:04[http-nio-8080-exec-10] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 14:10:04[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:10:04[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:10:04[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 14:10:04[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 14:10:04[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 14:10:04[http-nio-8080-exec-10] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 14:10:04[http-nio-8080-exec-10] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 14:14:04[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:14:04[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:14:04[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:14:04[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:14:04[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:14:04[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:14:14[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:14:14[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 14:14:14[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:14:14[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:14:14[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 14:14:14[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 14:14:14[http-nio-8080-exec-3] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 14:14:14[http-nio-8080-exec-3] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 14:14:14[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:14:14[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:14:14[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 14:14:14[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 14:14:14[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 14:14:14[http-nio-8080-exec-3] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 14:14:14[http-nio-8080-exec-3] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 14:14:22[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:14:22[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:14:22[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:14:22[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:14:22[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:14:22[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:14:33[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:14:33[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 14:14:33[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:14:33[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:14:33[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:14:33[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:14:48[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:14:48[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:14:48[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:14:48[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:14:48[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:14:48[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:14:56[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:14:56[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:14:56[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:14:56[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:14:56[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:14:56[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:15:11[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:15:11[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:15:11[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:15:11[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:15:11[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:15:11[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:15:12[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:15:12[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:15:12[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:15:12[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:15:12[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:15:12[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:15:25[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:15:25[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:15:25[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:15:25[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 14:15:25[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 14:15:25[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:15:36[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:15:36[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:15:36[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 14:15:36[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 14:15:36[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 14:15:36[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 14:15:36[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 14:15:36[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
191. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 14:15:36[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 15:52:54[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:52:54[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:52:54[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 15:52:54[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 15:52:54[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 15:52:54[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 15:52:54[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:52:54[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 15:52:54[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 15:53:57[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:53:57[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:53:57[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 15:53:57[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 15:53:57[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 15:53:57[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 15:53:57[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:53:57[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 15:53:57[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 15:55:39[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:55:39[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 15:55:39[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 15:55:39[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 15:55:39[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 15:55:39[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 15:55:39[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 15:55:39[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 15:56:12[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:56:12[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:56:12[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 15:56:12[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 15:56:12[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 15:56:12[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 15:56:12[http-nio-8080-exec-2] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 15:56:12[http-nio-8080-exec-2] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 15:56:12[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:56:12[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:56:12[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 15:56:12[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 15:56:12[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 2 msec}
INFO  22-01-10 15:56:12[http-nio-8080-exec-2] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 15:56:12[http-nio-8080-exec-2] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 15:56:47[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:56:47[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:56:47[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 15:56:47[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 15:56:47[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 15:56:47[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 15:56:47[http-nio-8080-exec-3] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 15:56:47[http-nio-8080-exec-3] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 15:56:47[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:56:47[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:56:47[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 15:56:47[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 15:56:47[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 15:56:47[http-nio-8080-exec-3] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 15:56:47[http-nio-8080-exec-3] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
INFO  22-01-10 15:57:26[Thread-52] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 15:57:26[Thread-52] [HikariDataSource:350] - HikariPool-14 - Shutdown initiated...
INFO  22-01-10 15:57:26[Thread-52] [HikariDataSource:352] - HikariPool-14 - Shutdown completed.
INFO  22-01-10 15:57:27[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 15:57:27[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 15:57:30[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 15:57:31[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 806 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 15:57:31[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 15:57:32[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 15:57:32[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 15:57:32[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 15:57:32[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 15:57:32[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 15:57:32[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5063 ms
INFO  22-01-10 15:57:32[restartedMain] [HikariDataSource:110] - HikariPool-15 - Starting...
INFO  22-01-10 15:57:32[restartedMain] [HikariDataSource:123] - HikariPool-15 - Start completed.
INFO  22-01-10 15:57:32[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 15:57:32[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 15:57:33[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 15:57:33[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 15:57:33[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 15:57:34[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: cc45a42f-9fc4-4589-ad3b-75cd9c053320

INFO  22-01-10 15:57:35[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@bf71945, org.springframework.security.web.context.SecurityContextPersistenceFilter@55cb3d2a, org.springframework.security.web.header.HeaderWriterFilter@34d30376, org.springframework.web.filter.CorsFilter@4c4ecfa3, org.springframework.security.web.authentication.logout.LogoutFilter@2b1614d9, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@3abd63e2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6ab6aa, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2c0ecd62, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@472836, org.springframework.security.web.session.SessionManagementFilter@4a683aa0, org.springframework.security.web.access.ExceptionTranslationFilter@255e154c]
INFO  22-01-10 15:57:36[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 15:57:36[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 15:57:36[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 15:57:36[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 9.563 seconds (JVM running for 23293.311)
INFO  22-01-10 15:57:36[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 15:58:21[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 15:58:21[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 15:58:21[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-10 15:58:21[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:58:21[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:58:21[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 15:58:21[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 15:58:21[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 15:58:21[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 15:58:21[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:58:21[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 15:58:21[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 15:58:30[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:58:30[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:58:30[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 15:58:30[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 15:58:30[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 15:58:30[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 15:58:30[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:58:30[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:58:30[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 15:58:53[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:58:53[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:58:53[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 15:58:53[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 15:58:53[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location
INFO  22-01-10 15:58:53[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 15:58:53[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:32] - Google Geometry Url: https://maps.googleapis.com/maps/api/geocode/json?latlng=35.5729408,139.739136&language=en&key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc
INFO  22-01-10 15:58:53[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:40] - Responded Geometry info:{
   "plus_code" : {
      "compound_code" : "HPFQ+5MC Ota City, Tokyo, Japan",
      "global_code" : "8Q7XHPFQ+5MC"
   },
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5728752,
                  "lng" : 139.7391158
               },
               "southwest" : {
                  "lat" : 35.5726838,
                  "lng" : 139.7388572
               }
            },
            "location" : {
               "lat" : 35.5728063,
               "lng" : 139.7389774
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741284802915,
                  "lng" : 139.7403354802915
               },
               "southwest" : {
                  "lat" : 35.5714305197085,
                  "lng" : 139.7376375197085
               }
            }
         },
         "place_id" : "ChIJh7_SR65hGGARdTUZzy-iYgM",
         "types" : [ "premise" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3-chōme-27-6 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJjwvMSK5hGGAR864ht7lEEcE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "street_address" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "三光熱処理",
               "short_name" : "三光熱処理",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "6",
               "short_name" : "6",
               "types" : [ "premise" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Japan, 〒143-0012 Tokyo, Ota City, Ōmorihigashi, 3-chōme−27−６ 三光熱処理",
         "geometry" : {
            "location" : {
               "lat" : 35.5727769,
               "lng" : 139.7389821
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5741258802915,
                  "lng" : 139.7403310802915
               },
               "southwest" : {
                  "lat" : 35.5714279197085,
                  "lng" : 139.7376331197085
               }
            }
         },
         "place_id" : "ChIJQ5XSR65hGGARfN2veB2uvmE",
         "plus_code" : {
            "compound_code" : "HPFQ+4H Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+4H"
         },
         "types" : [ "establishment", "point_of_interest" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "HPFQ+5M",
               "short_name" : "HPFQ+5M",
               "types" : [ "plus_code" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "HPFQ+5M Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.573,
                  "lng" : 139.73925
               },
               "southwest" : {
                  "lat" : 35.572875,
                  "lng" : 139.739125
               }
            },
            "location" : {
               "lat" : 35.5729408,
               "lng" : 139.739136
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5742864802915,
                  "lng" : 139.7405364802915
               },
               "southwest" : {
                  "lat" : 35.5715885197085,
                  "lng" : 139.7378385197085
               }
            }
         },
         "place_id" : "GhIJpEXHH1bJQUARe2mKAKd3YUA",
         "plus_code" : {
            "compound_code" : "HPFQ+5M Ota City, Tokyo, Japan",
            "global_code" : "8Q7XHPFQ+5M"
         },
         "types" : [ "plus_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Unnamed Road",
               "short_name" : "Unnamed Road",
               "types" : [ "route" ]
            },
            {
               "long_name" : "27",
               "short_name" : "27",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3-chōme",
               "short_name" : "3-chōme",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Ōmorihigashi",
               "short_name" : "Ōmorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Unnamed Road, 3-chōme-27 Ōmorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5730769,
                  "lng" : 139.7394607
               },
               "southwest" : {
                  "lat" : 35.5725324,
                  "lng" : 139.738844
               }
            },
            "location" : {
               "lat" : 35.5728067,
               "lng" : 139.739155
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.57415363029149,
                  "lng" : 139.7405013302915
               },
               "southwest" : {
                  "lat" : 35.57145566970849,
                  "lng" : 139.7378033697085
               }
            }
         },
         "place_id" : "ChIJTxgCq69hGGARmOQYLBqo9rg",
         "types" : [ "route" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "28",
               "short_name" : "28",
               "types" : [ "political", "sublocality", "sublocality_level_4" ]
            },
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome-28 Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            },
            "location" : {
               "lat" : 35.5723895,
               "lng" : 139.7412526
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5701818,
                  "lng" : 139.7383277
               }
            }
         },
         "place_id" : "ChIJv8B5eq9hGGARxgJQcfpdNhs",
         "types" : [ "political", "sublocality", "sublocality_level_4" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "3 Chome",
               "short_name" : "3 Chome",
               "types" : [ "political", "sublocality", "sublocality_level_3" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "3 Chome Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            },
            "location" : {
               "lat" : 35.5717183,
               "lng" : 139.7402946
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5746443,
                  "lng" : 139.7448357
               },
               "southwest" : {
                  "lat" : 35.5692606,
                  "lng" : 139.7346021
               }
            }
         },
         "place_id" : "ChIJcw0nAK9hGGARyVm1HP2Gk7M",
         "types" : [ "political", "sublocality", "sublocality_level_3" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            },
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJxZNj_qhhGGARTW5fPBcmOYU",
         "types" : [ "postal_code" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Omorihigashi",
               "short_name" : "Omorihigashi",
               "types" : [ "political", "sublocality", "sublocality_level_2" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "143-0012",
               "short_name" : "143-0012",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Omorihigashi, Ota City, Tokyo 143-0012, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            },
            "location" : {
               "lat" : 35.5726741,
               "lng" : 139.7383786
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5792457,
                  "lng" : 139.7467245
               },
               "southwest" : {
                  "lat" : 35.56491219999999,
                  "lng" : 139.7340047
               }
            }
         },
         "place_id" : "ChIJLRKfCK9hGGARvfLtFpOxWWw",
         "types" : [ "political", "sublocality", "sublocality_level_2" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ōmori",
               "short_name" : "Ōmori",
               "types" : [ "neighborhood", "political" ]
            },
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ōmori, Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            },
            "location" : {
               "lat" : 35.5736324,
               "lng" : 139.7338633
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.5902714,
                  "lng" : 139.7539586
               },
               "southwest" : {
                  "lat" : 35.5607246,
                  "lng" : 139.7188174
               }
            }
         },
         "place_id" : "ChIJExMzH6pvGGARsS6Ipgy1Jn0",
         "types" : [ "neighborhood", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Ota City",
               "short_name" : "Ota City",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Ota City, Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            },
            "location" : {
               "lat" : 35.561407,
               "lng" : 139.7160626
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.6131066,
                  "lng" : 139.8259949
               },
               "southwest" : {
                  "lat" : 35.5209792,
                  "lng" : 139.6528164
               }
            }
         },
         "place_id" : "ChIJQ2ajwVJgGGARSQ1cUKxqwk8",
         "types" : [ "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "colloquial_area", "locality", "political" ]
            },
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            },
            "location" : {
               "lat" : 35.6803997,
               "lng" : 139.7690174
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8174453,
                  "lng" : 139.9188743
               },
               "southwest" : {
                  "lat" : 35.519042,
                  "lng" : 139.5628611
               }
            }
         },
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "types" : [ "colloquial_area", "locality", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Tokyo",
               "short_name" : "Tokyo",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Tokyo, Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            },
            "location" : {
               "lat" : 35.6761919,
               "lng" : 139.6503106
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 35.8984074,
                  "lng" : 153.9867945
               },
               "southwest" : {
                  "lat" : 20.4231216,
                  "lng" : 136.0696826
               }
            }
         },
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "types" : [ "administrative_area_level_1", "political" ]
      },
      {
         "address_components" : [
            {
               "long_name" : "Japan",
               "short_name" : "JP",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Japan",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            },
            "location" : {
               "lat" : 36.204824,
               "lng" : 138.252924
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 45.6412626,
                  "lng" : 154.0031455
               },
               "southwest" : {
                  "lat" : 20.3585295,
                  "lng" : 122.8554688
               }
            }
         },
         "place_id" : "ChIJLxl_1w9OZzQRRFJmfNR1QvU",
         "types" : [ "country", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-10 15:59:17[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:59:17[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:59:17[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 15:59:17[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 15:59:17[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-10 15:59:17[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 15:59:17[http-nio-8080-exec-4] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-10 15:59:17[http-nio-8080-exec-4] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-10 15:59:17[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:59:17[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:59:17[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 15:59:17[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-10 15:59:17[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 1 msec}
INFO  22-01-10 15:59:17[http-nio-8080-exec-4] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-10 15:59:17[http-nio-8080-exec-4] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: POST
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/room
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:55] - email: test@gmail.com
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:76] - Conveniences builder.
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
231. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into accommodation (building_type, created_at, description, large_building_type, maximum_guest_count, title, user_id) values ('Flat', '01/10/2022 15:59:38.693', 'test1
test2', 'Apartment', 1, 'test', 1)

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into accommodation (building_type, created_at, description, large_building_type, maximum_guest_count, title, user_id) values ('Flat', '01/10/2022 15:59:38.693', 'test1
test2', 'Apartment', 1, 'test', 1)
 {executed in 12 msec}
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
231. getGeneratedKeys on query: insert into accommodation (building_type, created_at, description, large_building_type, maximum_guest_count, title, user_id) values ('Flat', '01/10/2022 15:59:38.693', 'test1
test2', 'Apartment', 1, 'test', 1)
 {executed in 0 msec}
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:93] - Conveniences builder.
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:105] - Conveniences save: Conveniences(id=null, kitchen=NOT, laundryRoom=NOT, parkingLot=NOT, gym=NOT, swimmingPool=NOT, jacuzzi=NOT, createdAt=null, updatedAt=null, accommodation=Accommodation(id=2, title=test, largeBuildingType=Apartment, buildingType=Flat, maximumGuestCount=1, description=test1
test2, createdAt=2022-01-10T15:59:38.693046, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null)))
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into conveniences (accommodation_id, created_at, gym, jacuzzi, kitchen, laundry_room, parking_lot, swimming_pool) values (2, '01/10/2022 15:59:38.775', 1, 1, 1, 1, 1, 1)

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into conveniences (accommodation_id, created_at, gym, jacuzzi, kitchen, laundry_room, parking_lot, swimming_pool) values (2, '01/10/2022 15:59:38.775', 1, 1, 1, 1, 1, 1)
 {executed in 1 msec}
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
231. getGeneratedKeys on query: insert into conveniences (accommodation_id, created_at, gym, jacuzzi, kitchen, laundry_room, parking_lot, swimming_pool) values (2, '01/10/2022 15:59:38.775', 1, 1, 1, 1, 1, 1)
 {executed in 0 msec}
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:110] - Location builder.
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:123] - Location save: Location(id=null, latitude=35, longitude=139, state=Ota City, city=Ōmorihigashi, streetAddress=3-chōme 27, detailAddress=1111, postcode=Japan, createdAt=null, updatedAt=null, accommodation=Accommodation(id=2, title=test, largeBuildingType=Apartment, buildingType=Flat, maximumGuestCount=1, description=test1
test2, createdAt=2022-01-10T15:59:38.693046, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null)))
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into location (accommodation_id, city, created_at, detail_address, latitude, longitude, postcode, state, street_address) values (2, 'Ōmorihigashi', '01/10/2022 15:59:38.808', '1111', 35, 139, 'Japan', 'Ota City', '3-chōme 27')

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into location (accommodation_id, city, created_at, detail_address, latitude, longitude, postcode, state, street_address) values (2, 'Ōmorihigashi', '01/10/2022 15:59:38.808', '1111', 35, 139, 'Japan', 'Ota City', '3-chōme 27')
 {executed in 2 msec}
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
231. getGeneratedKeys on query: insert into location (accommodation_id, city, created_at, detail_address, latitude, longitude, postcode, state, street_address) values (2, 'Ōmorihigashi', '01/10/2022 15:59:38.808', '1111', 35, 139, 'Japan', 'Ota City', '3-chōme 27')
 {executed in 0 msec}
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:128] - Vacancy builder.
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:137] - Vacancy save: Vacancy(id=null, price=1234567890, startDate=2022-01-11, endDate=2022-02-05, createdAt=null, updatedAt=null, accommodation=Accommodation(id=2, title=test, largeBuildingType=Apartment, buildingType=Flat, maximumGuestCount=1, description=test1
test2, createdAt=2022-01-10T15:59:38.693046, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null)))
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into vacancy (accommodation_id, created_at, end_date, price, start_date) values (2, '01/10/2022 15:59:38.845', '2022-02-05', '1234567890', '2022-01-11')

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into vacancy (accommodation_id, created_at, end_date, price, start_date) values (2, '01/10/2022 15:59:38.845', '2022-02-05', '1234567890', '2022-01-11')
 {executed in 2 msec}
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
231. getGeneratedKeys on query: insert into vacancy (accommodation_id, created_at, end_date, price, start_date) values (2, '01/10/2022 15:59:38.845', '2022-02-05', '1234567890', '2022-01-11')
 {executed in 0 msec}
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:142] - Room builder.
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:152] - Bed save: Room(id=null, number=0, type=entire, isSetUpForGuest=Yes, bathroomCount=1, bathroomType=private, createdAt=null, updatedAt=null, accommodation=Accommodation(id=2, title=test, largeBuildingType=Apartment, buildingType=Flat, maximumGuestCount=1, description=test1
test2, createdAt=2022-01-10T15:59:38.693046, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null)))
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into room (accommodation_id, bathroom_count, bathroom_type, created_at, is_set_up_for_guest, number, type) values (2, 1, 'private', '01/10/2022 15:59:38.877', 0, 0, 'entire')

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into room (accommodation_id, bathroom_count, bathroom_type, created_at, is_set_up_for_guest, number, type) values (2, 1, 'private', '01/10/2022 15:59:38.877', 0, 0, 'entire')
 {executed in 2 msec}
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
231. getGeneratedKeys on query: insert into room (accommodation_id, bathroom_count, bathroom_type, created_at, is_set_up_for_guest, number, type) values (2, 1, 'private', '01/10/2022 15:59:38.877', 0, 0, 'entire')
 {executed in 0 msec}
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:157] - Private bed builder.
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:171] - Private bed save: Bed(id=null, type=Single, count=1, isPrivate=Yes, createdAt=null, updatedAt=null, room=Room(id=2, number=0, type=entire, isSetUpForGuest=Yes, bathroomCount=1, bathroomType=private, createdAt=2022-01-10T15:59:38.877661, updatedAt=null, accommodation=Accommodation(id=2, title=test, largeBuildingType=Apartment, buildingType=Flat, maximumGuestCount=1, description=test1
test2, createdAt=2022-01-10T15:59:38.693046, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null))))
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 15:59:38.911', 0, 2, 'Single')

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 15:59:38.911', 0, 2, 'Single')
 {executed in 1 msec}
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
231. getGeneratedKeys on query: insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 15:59:38.911', 0, 2, 'Single')
 {executed in 0 msec}
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|4             |
|--------------|

INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:177] - Public bed builder
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:189] - Public bed save: Bed(id=null, type=Double, count=1, isPrivate=NO, createdAt=null, updatedAt=null, room=Room(id=2, number=0, type=entire, isSetUpForGuest=Yes, bathroomCount=1, bathroomType=private, createdAt=2022-01-10T15:59:38.877661, updatedAt=null, accommodation=Accommodation(id=2, title=test, largeBuildingType=Apartment, buildingType=Flat, maximumGuestCount=1, description=test1
test2, createdAt=2022-01-10T15:59:38.693046, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null))))
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 15:59:38.939', 1, 2, 'Double')

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 15:59:38.939', 1, 2, 'Double')
 {executed in 0 msec}
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
231. getGeneratedKeys on query: insert into bed (count, created_at, is_private, room_id, type) values (1, '01/10/2022 15:59:38.939', 1, 2, 'Double')
 {executed in 0 msec}
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|5             |
|--------------|

INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:195] - Amenities builder.
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [RoomApiLogicServiceImpl:215] - Amenities save: Amenities(id=null, wifi=NOT, tv=NOT, heater=NOT, airConditioner=NOT, iron=NOT, shampoo=NOT, hairDryer=NOT, breakfast=NOT, businessSpace=NOT, fireplace=NOT, closet=NOT, guestEntrance=NOT, createdAt=null, updatedAt=null, room=Room(id=2, number=0, type=entire, isSetUpForGuest=Yes, bathroomCount=1, bathroomType=private, createdAt=2022-01-10T15:59:38.877661, updatedAt=null, accommodation=Accommodation(id=2, title=test, largeBuildingType=Apartment, buildingType=Flat, maximumGuestCount=1, description=test1
test2, createdAt=2022-01-10T15:59:38.693046, updatedAt=null, user=User(id=1, email=test@gmail.com, password=$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG, firstname=example, lastname=test, birthday=2004/October/21, status=ACTIVATED, access=MANAGER, lastLoginAt=2022-01-10T12:44:46, createdAt=2022-01-10T12:44:38, updatedAt=null))))
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into amenities (air_conditioner, breakfast, business_space, closet, created_at, fireplace, guest_entrance, hair_dryer, heater, iron, room_id, shampoo, tv, wifi) values (1, 1, 1, 1, '01/10/2022 15:59:38.968', 1, 1, 1, 1, 1, 2, 1, 1, 1)

DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
231. insert into amenities (air_conditioner, breakfast, business_space, closet, created_at, fireplace, guest_entrance, hair_dryer, heater, iron, room_id, shampoo, tv, wifi) values (1, 1, 1, 1, '01/10/2022 15:59:38.968', 1, 1, 1, 1, 1, 2, 1, 1, 1)
 {executed in 2 msec}
DEBUG 22-01-10 15:59:38[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyStatement.getGeneratedKeys(ProxyStatement.java:229)
231. getGeneratedKeys on query: insert into amenities (air_conditioner, breakfast, business_space, closet, created_at, fireplace, guest_entrance, hair_dryer, heater, iron, room_id, shampoo, tv, wifi) values (1, 1, 1, 1, '01/10/2022 15:59:38.968', 1, 1, 1, 1, 1, 2, 1, 1, 1)
 {executed in 0 msec}
INFO  22-01-10 15:59:38[http-nio-8080-exec-6] [resultsettable:610] - 
|--------------|
|generated_key |
|--------------|
|2             |
|--------------|

INFO  22-01-10 16:01:36[Thread-56] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 16:01:36[Thread-56] [HikariDataSource:350] - HikariPool-15 - Shutdown initiated...
INFO  22-01-10 16:01:36[Thread-56] [HikariDataSource:352] - HikariPool-15 - Shutdown completed.
INFO  22-01-10 16:01:36[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 16:01:36[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 16:01:40[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 16:01:41[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1067 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 16:01:41[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 16:01:42[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 16:01:42[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 16:01:42[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 16:01:42[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 16:01:42[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 16:01:42[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5668 ms
INFO  22-01-10 16:01:42[restartedMain] [HikariDataSource:110] - HikariPool-16 - Starting...
INFO  22-01-10 16:01:42[restartedMain] [HikariDataSource:123] - HikariPool-16 - Start completed.
INFO  22-01-10 16:01:43[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 16:01:43[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 16:01:43[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 16:01:43[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 16:01:44[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 16:01:45[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: c0643970-7c73-4010-a10e-838144f5ce0f

INFO  22-01-10 16:01:46[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3405223, org.springframework.security.web.context.SecurityContextPersistenceFilter@778268d4, org.springframework.security.web.header.HeaderWriterFilter@7ef49335, org.springframework.web.filter.CorsFilter@2983f1b5, org.springframework.security.web.authentication.logout.LogoutFilter@39301dbd, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@55ccab26, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6ee92c77, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@345e67a4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6fc61d98, org.springframework.security.web.session.SessionManagementFilter@6f40dce0, org.springframework.security.web.access.ExceptionTranslationFilter@36f5e0eb]
INFO  22-01-10 16:01:46[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 16:01:46[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 16:01:46[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 16:01:46[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 10.263 seconds (JVM running for 23543.753)
INFO  22-01-10 16:01:46[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 17:57:25[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-10 17:57:25[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-10 17:57:25[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-10 17:57:25[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
271. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 17:57:25[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
271. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-10 17:57:25[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 17:57:25[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 17:57:25[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 17:57:25[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 17:57:25[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
271. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 17:57:25[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
271. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 17:57:25[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 18:09:34[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 18:09:34[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 18:09:34[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 18:09:34[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 18:09:34[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 18:09:34[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 18:09:34[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 18:09:34[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 18:09:34[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 18:09:41[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 18:09:41[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 18:09:41[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 18:09:41[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 18:09:41[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 18:09:41[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 18:09:41[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 18:09:41[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 18:09:41[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 18:22:31[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 18:22:31[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 18:22:31[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 18:22:31[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 18:22:31[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 18:22:31[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 18:22:31[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 18:22:31[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
281. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-10 18:22:31[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-10 18:36:58[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
291. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 18:36:58[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
291. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 5 msec}
INFO  22-01-10 18:36:58[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 18:36:58[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-10 18:36:58[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-10 18:36:58[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-10 18:36:58[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
291. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-10 18:36:58[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
291. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-10 18:36:58[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-10T21:44:46 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-10 18:44:58[Thread-60] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:44:58[Thread-60] [HikariDataSource:350] - HikariPool-16 - Shutdown initiated...
INFO  22-01-10 18:44:58[Thread-60] [HikariDataSource:352] - HikariPool-16 - Shutdown completed.
INFO  22-01-10 18:44:59[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 18:44:59[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 18:45:03[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 18:45:03[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 858 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 18:45:04[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 18:45:05[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 18:45:05[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:45:05[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 18:45:05[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 18:45:05[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 18:45:05[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5958 ms
INFO  22-01-10 18:45:05[restartedMain] [HikariDataSource:110] - HikariPool-17 - Starting...
INFO  22-01-10 18:45:05[restartedMain] [HikariDataSource:123] - HikariPool-17 - Start completed.
INFO  22-01-10 18:45:05[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 18:45:06[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 18:45:06[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 18:45:06[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 18:45:06[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 18:45:07[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 9ff64b8a-9059-4d47-bddc-9f323e0ae74b

INFO  22-01-10 18:45:08[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@dba658a, org.springframework.security.web.context.SecurityContextPersistenceFilter@8828109, org.springframework.security.web.header.HeaderWriterFilter@4b702f73, org.springframework.web.filter.CorsFilter@29b2d77c, org.springframework.security.web.authentication.logout.LogoutFilter@710f1a2d, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@eaea02f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@38234a53, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@72e2f193, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@77e66dae, org.springframework.security.web.session.SessionManagementFilter@6e1e2f5e, org.springframework.security.web.access.ExceptionTranslationFilter@5e0dc381]
INFO  22-01-10 18:45:09[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 18:45:09[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:45:09[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 18:45:09[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 10.763 seconds (JVM running for 33346.623)
INFO  22-01-10 18:45:09[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 18:45:59[Thread-64] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:45:59[Thread-64] [HikariDataSource:350] - HikariPool-17 - Shutdown initiated...
INFO  22-01-10 18:45:59[Thread-64] [HikariDataSource:352] - HikariPool-17 - Shutdown completed.
INFO  22-01-10 18:45:59[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 18:45:59[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 18:46:03[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 18:46:04[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1229 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 18:46:05[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 18:46:05[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 18:46:05[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:46:05[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 18:46:05[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 18:46:05[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 18:46:05[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5704 ms
INFO  22-01-10 18:46:06[restartedMain] [HikariDataSource:110] - HikariPool-18 - Starting...
INFO  22-01-10 18:46:06[restartedMain] [HikariDataSource:123] - HikariPool-18 - Start completed.
INFO  22-01-10 18:46:06[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 18:46:06[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 18:46:06[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 18:46:06[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 18:46:07[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-10 18:46:08[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 97cb8ecc-f927-4e78-a2b4-63cc0d023297

INFO  22-01-10 18:46:09[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4564e5a8, org.springframework.security.web.context.SecurityContextPersistenceFilter@7e3fb708, org.springframework.security.web.header.HeaderWriterFilter@76441c84, org.springframework.web.filter.CorsFilter@60223507, org.springframework.security.web.authentication.logout.LogoutFilter@11892882, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@66146261, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4643fe87, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@10356af7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7ac2061, org.springframework.security.web.session.SessionManagementFilter@43383055, org.springframework.security.web.access.ExceptionTranslationFilter@2ad242da]
INFO  22-01-10 18:46:09[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-10 18:46:09[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:46:09[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-10 18:46:09[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 10.192 seconds (JVM running for 33406.739)
INFO  22-01-10 18:46:09[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-10 18:48:36[Thread-68] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:48:36[Thread-68] [HikariDataSource:350] - HikariPool-18 - Shutdown initiated...
INFO  22-01-10 18:48:36[Thread-68] [HikariDataSource:352] - HikariPool-18 - Shutdown completed.
INFO  22-01-10 18:48:37[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 18:48:37[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 18:48:40[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 18:48:41[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1119 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 18:48:42[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 18:48:42[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 18:48:42[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:48:42[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 18:48:42[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 18:48:42[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 18:48:42[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5413 ms
INFO  22-01-10 18:48:43[restartedMain] [HikariDataSource:110] - HikariPool-19 - Starting...
INFO  22-01-10 18:48:43[restartedMain] [HikariDataSource:123] - HikariPool-19 - Start completed.
INFO  22-01-10 18:48:43[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 18:48:43[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 18:48:43[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 18:48:43[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 18:48:44[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 18:48:44[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
INFO  22-01-10 18:48:44[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:48:44[restartedMain] [HikariDataSource:350] - HikariPool-19 - Shutdown initiated...
INFO  22-01-10 18:48:45[restartedMain] [HikariDataSource:352] - HikariPool-19 - Shutdown completed.
INFO  22-01-10 18:48:45[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 18:48:45[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 18:48:45[restartedMain] [SpringApplication:843] - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:659)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	... 25 common frames omitted
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 36 common frames omitted
INFO  22-01-10 18:49:59[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 18:49:59[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 18:50:02[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 18:50:04[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1556 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 18:50:04[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 18:50:05[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 18:50:05[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:50:05[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 18:50:05[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 18:50:05[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 18:50:05[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 6408 ms
INFO  22-01-10 18:50:05[restartedMain] [HikariDataSource:110] - HikariPool-20 - Starting...
INFO  22-01-10 18:50:05[restartedMain] [HikariDataSource:123] - HikariPool-20 - Start completed.
INFO  22-01-10 18:50:06[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 18:50:06[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 18:50:06[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 18:50:06[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 18:50:06[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 18:50:07[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
INFO  22-01-10 18:50:07[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:50:07[restartedMain] [HikariDataSource:350] - HikariPool-20 - Shutdown initiated...
INFO  22-01-10 18:50:07[restartedMain] [HikariDataSource:352] - HikariPool-20 - Shutdown completed.
INFO  22-01-10 18:50:07[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 18:50:07[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 18:50:07[restartedMain] [SpringApplication:843] - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:659)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	... 25 common frames omitted
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 36 common frames omitted
INFO  22-01-10 18:51:26[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 18:51:26[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 18:51:29[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 18:51:30[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 984 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 18:51:31[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 18:51:32[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 18:51:32[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:51:32[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 18:51:32[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 18:51:32[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 18:51:32[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5901 ms
INFO  22-01-10 18:51:32[restartedMain] [HikariDataSource:110] - HikariPool-21 - Starting...
INFO  22-01-10 18:51:32[restartedMain] [HikariDataSource:123] - HikariPool-21 - Start completed.
INFO  22-01-10 18:51:33[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 18:51:33[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 18:51:33[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 18:51:33[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 18:51:33[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 18:51:34[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
INFO  22-01-10 18:51:34[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:51:34[restartedMain] [HikariDataSource:350] - HikariPool-21 - Shutdown initiated...
INFO  22-01-10 18:51:34[restartedMain] [HikariDataSource:352] - HikariPool-21 - Shutdown completed.
INFO  22-01-10 18:51:34[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 18:51:34[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 18:51:34[restartedMain] [SpringApplication:843] - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:659)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	... 25 common frames omitted
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 36 common frames omitted
INFO  22-01-10 18:52:55[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 18:52:55[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 18:52:59[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 18:53:00[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 977 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 18:53:00[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 18:53:01[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 18:53:01[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:53:01[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 18:53:01[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 18:53:01[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 18:53:01[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5845 ms
INFO  22-01-10 18:53:01[restartedMain] [HikariDataSource:110] - HikariPool-22 - Starting...
INFO  22-01-10 18:53:01[restartedMain] [HikariDataSource:123] - HikariPool-22 - Start completed.
INFO  22-01-10 18:53:02[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 18:53:02[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 18:53:02[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 18:53:02[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 18:53:02[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 18:53:03[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
INFO  22-01-10 18:53:03[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:53:03[restartedMain] [HikariDataSource:350] - HikariPool-22 - Shutdown initiated...
INFO  22-01-10 18:53:03[restartedMain] [HikariDataSource:352] - HikariPool-22 - Shutdown completed.
INFO  22-01-10 18:53:03[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 18:53:03[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 18:53:03[restartedMain] [LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field locationApiLogicService in com.example.gradlebnbadminapi.controller.LocationController required a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' in your configuration.

INFO  22-01-10 18:55:09[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 18:55:09[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 18:55:12[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 18:55:14[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1189 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 18:55:14[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 18:55:15[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 18:55:15[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:55:15[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 18:55:15[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 18:55:15[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 18:55:15[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 6318 ms
INFO  22-01-10 18:55:15[restartedMain] [HikariDataSource:110] - HikariPool-23 - Starting...
INFO  22-01-10 18:55:15[restartedMain] [HikariDataSource:123] - HikariPool-23 - Start completed.
INFO  22-01-10 18:55:16[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 18:55:16[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 18:55:16[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 18:55:16[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 18:55:17[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 18:55:18[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
INFO  22-01-10 18:55:18[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:55:18[restartedMain] [HikariDataSource:350] - HikariPool-23 - Shutdown initiated...
INFO  22-01-10 18:55:18[restartedMain] [HikariDataSource:352] - HikariPool-23 - Shutdown completed.
INFO  22-01-10 18:55:18[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 18:55:18[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 18:55:18[restartedMain] [SpringApplication:843] - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:659)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	... 25 common frames omitted
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 36 common frames omitted
INFO  22-01-10 18:55:52[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 18:55:52[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 18:55:56[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 18:55:58[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1182 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 18:55:58[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 18:55:59[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 18:55:59[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:55:59[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 18:55:59[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 18:55:59[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 18:55:59[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 6199 ms
INFO  22-01-10 18:55:59[restartedMain] [HikariDataSource:110] - HikariPool-24 - Starting...
INFO  22-01-10 18:55:59[restartedMain] [HikariDataSource:123] - HikariPool-24 - Start completed.
INFO  22-01-10 18:56:00[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 18:56:00[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 18:56:00[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 18:56:00[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 18:56:01[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 18:56:02[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
INFO  22-01-10 18:56:02[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:56:02[restartedMain] [HikariDataSource:350] - HikariPool-24 - Shutdown initiated...
INFO  22-01-10 18:56:02[restartedMain] [HikariDataSource:352] - HikariPool-24 - Shutdown completed.
INFO  22-01-10 18:56:02[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 18:56:02[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 18:56:02[restartedMain] [SpringApplication:843] - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:659)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	... 25 common frames omitted
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 36 common frames omitted
INFO  22-01-10 18:57:02[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 18:57:02[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 18:57:07[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 18:57:08[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1271 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 18:57:09[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 18:57:10[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 18:57:10[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:57:10[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 18:57:10[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 18:57:10[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 18:57:10[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 7341 ms
INFO  22-01-10 18:57:10[restartedMain] [HikariDataSource:110] - HikariPool-25 - Starting...
INFO  22-01-10 18:57:10[restartedMain] [HikariDataSource:123] - HikariPool-25 - Start completed.
INFO  22-01-10 18:57:10[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 18:57:11[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 18:57:11[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 18:57:11[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 18:57:11[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 18:57:12[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
INFO  22-01-10 18:57:12[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:57:12[restartedMain] [HikariDataSource:350] - HikariPool-25 - Shutdown initiated...
INFO  22-01-10 18:57:12[restartedMain] [HikariDataSource:352] - HikariPool-25 - Shutdown completed.
INFO  22-01-10 18:57:12[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 18:57:12[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 18:57:12[restartedMain] [SpringApplication:843] - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:659)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	... 25 common frames omitted
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 36 common frames omitted
INFO  22-01-10 18:57:48[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on 32d93d36785a with PID 250 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-10 18:57:48[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-10 18:57:53[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-10 18:57:54[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1194 ms. Found 9 JPA repository interfaces.
WARN  22-01-10 18:57:55[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-10 18:57:56[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-10 18:57:56[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-10 18:57:56[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-10 18:57:56[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-10 18:57:56[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-10 18:57:56[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 7706 ms
INFO  22-01-10 18:57:56[restartedMain] [HikariDataSource:110] - HikariPool-26 - Starting...
INFO  22-01-10 18:57:56[restartedMain] [HikariDataSource:123] - HikariPool-26 - Start completed.
INFO  22-01-10 18:57:57[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-10 18:57:57[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-10 18:57:58[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-10 18:57:58[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-10 18:57:59[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-10 18:57:59[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
INFO  22-01-10 18:57:59[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-10 18:57:59[restartedMain] [HikariDataSource:350] - HikariPool-26 - Shutdown initiated...
INFO  22-01-10 18:57:59[restartedMain] [HikariDataSource:352] - HikariPool-26 - Shutdown completed.
INFO  22-01-10 18:57:59[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-10 18:57:59[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-10 18:57:59[restartedMain] [SpringApplication:843] - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:659)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'locationApiLogicServiceImpl': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	... 25 common frames omitted
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'gcp.place.url' in value "${gcp.place.url}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:180)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:126)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:239)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:936)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:656)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:639)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 36 common frames omitted
