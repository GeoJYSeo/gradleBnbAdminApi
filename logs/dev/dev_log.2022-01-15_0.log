INFO  22-01-15 09:40:21[background-preinit] [Version:21] - HV000001: Hibernate Validator 6.2.0.Final
INFO  22-01-15 09:40:21[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 316 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 09:40:21[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 09:40:22[restartedMain] [DevToolsPropertyDefaultsPostProcessor:255] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
INFO  22-01-15 09:40:22[restartedMain] [DevToolsPropertyDefaultsPostProcessor:255] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
INFO  22-01-15 09:40:33[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 09:40:35[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2527 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 09:40:38[restartedMain] [InstanceMetadataServiceResourceFetcher:105] - Fail to retrieve token 
com.amazonaws.SdkClientException: Failed to connect to service endpoint: 
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:100)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.getToken(InstanceMetadataServiceResourceFetcher.java:91)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.readResource(InstanceMetadataServiceResourceFetcher.java:69)
	at com.amazonaws.internal.EC2ResourceFetcher.readResource(EC2ResourceFetcher.java:66)
	at com.amazonaws.util.EC2MetadataUtils.getItems(EC2MetadataUtils.java:402)
	at com.amazonaws.util.EC2MetadataUtils.getData(EC2MetadataUtils.java:371)
	at org.springframework.cloud.aws.context.support.env.AwsCloudEnvironmentCheckUtils.isRunningOnCloudEnvironment(AwsCloudEnvironmentCheckUtils.java:38)
	at org.springframework.cloud.aws.context.annotation.OnAwsCloudEnvironmentCondition.matches(OnAwsCloudEnvironmentCondition.java:38)
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:489)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.Socket.connect(Socket.java:609)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:177)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:341)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:362)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1253)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1232)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1015)
	at com.amazonaws.internal.ConnectionUtils.connectToEndpoint(ConnectionUtils.java:52)
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:80)
	... 29 common frames omitted
WARN  22-01-15 09:40:38[restartedMain] [EC2MetadataUtils:409] - Unable to retrieve the requested metadata (/latest/meta-data/instance-id). Failed to connect to service endpoint: 
com.amazonaws.SdkClientException: Failed to connect to service endpoint: 
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:100)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.getToken(InstanceMetadataServiceResourceFetcher.java:91)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.readResource(InstanceMetadataServiceResourceFetcher.java:69)
	at com.amazonaws.internal.EC2ResourceFetcher.readResource(EC2ResourceFetcher.java:66)
	at com.amazonaws.util.EC2MetadataUtils.getItems(EC2MetadataUtils.java:402)
	at com.amazonaws.util.EC2MetadataUtils.getData(EC2MetadataUtils.java:371)
	at org.springframework.cloud.aws.context.support.env.AwsCloudEnvironmentCheckUtils.isRunningOnCloudEnvironment(AwsCloudEnvironmentCheckUtils.java:38)
	at org.springframework.cloud.aws.context.annotation.OnAwsCloudEnvironmentCondition.matches(OnAwsCloudEnvironmentCondition.java:38)
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:489)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.Socket.connect(Socket.java:609)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:177)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:341)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:362)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1253)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1232)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1015)
	at com.amazonaws.internal.ConnectionUtils.connectToEndpoint(ConnectionUtils.java:52)
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:80)
	... 29 common frames omitted
WARN  22-01-15 09:40:39[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 09:40:44[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 09:40:44[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 09:40:44[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 09:40:44[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 09:40:44[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 09:40:44[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 22326 ms
INFO  22-01-15 09:40:45[restartedMain] [HikariDataSource:110] - HikariPool-1 - Starting...
INFO  22-01-15 09:40:46[restartedMain] [HikariDataSource:123] - HikariPool-1 - Start completed.
INFO  22-01-15 09:40:47[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 09:40:47[restartedMain] [Version:44] - HHH000412: Hibernate ORM core version 5.4.32.Final
INFO  22-01-15 09:40:48[restartedMain] [Version:56] - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
INFO  22-01-15 09:41:34[background-preinit] [Version:21] - HV000001: Hibernate Validator 6.2.0.Final
INFO  22-01-15 09:41:34[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 09:41:34[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 09:41:34[restartedMain] [DevToolsPropertyDefaultsPostProcessor:255] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
INFO  22-01-15 09:41:34[restartedMain] [DevToolsPropertyDefaultsPostProcessor:255] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
INFO  22-01-15 09:41:43[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 09:41:45[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2064 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 09:41:46[restartedMain] [InstanceMetadataServiceResourceFetcher:105] - Fail to retrieve token 
com.amazonaws.SdkClientException: Failed to connect to service endpoint: 
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:100)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.getToken(InstanceMetadataServiceResourceFetcher.java:91)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.readResource(InstanceMetadataServiceResourceFetcher.java:69)
	at com.amazonaws.internal.EC2ResourceFetcher.readResource(EC2ResourceFetcher.java:66)
	at com.amazonaws.util.EC2MetadataUtils.getItems(EC2MetadataUtils.java:402)
	at com.amazonaws.util.EC2MetadataUtils.getData(EC2MetadataUtils.java:371)
	at org.springframework.cloud.aws.context.support.env.AwsCloudEnvironmentCheckUtils.isRunningOnCloudEnvironment(AwsCloudEnvironmentCheckUtils.java:38)
	at org.springframework.cloud.aws.context.annotation.OnAwsCloudEnvironmentCondition.matches(OnAwsCloudEnvironmentCondition.java:38)
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:489)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.Socket.connect(Socket.java:609)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:177)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:341)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:362)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1253)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1232)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1015)
	at com.amazonaws.internal.ConnectionUtils.connectToEndpoint(ConnectionUtils.java:52)
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:80)
	... 29 common frames omitted
WARN  22-01-15 09:41:46[restartedMain] [EC2MetadataUtils:409] - Unable to retrieve the requested metadata (/latest/meta-data/instance-id). Failed to connect to service endpoint: 
com.amazonaws.SdkClientException: Failed to connect to service endpoint: 
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:100)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.getToken(InstanceMetadataServiceResourceFetcher.java:91)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.readResource(InstanceMetadataServiceResourceFetcher.java:69)
	at com.amazonaws.internal.EC2ResourceFetcher.readResource(EC2ResourceFetcher.java:66)
	at com.amazonaws.util.EC2MetadataUtils.getItems(EC2MetadataUtils.java:402)
	at com.amazonaws.util.EC2MetadataUtils.getData(EC2MetadataUtils.java:371)
	at org.springframework.cloud.aws.context.support.env.AwsCloudEnvironmentCheckUtils.isRunningOnCloudEnvironment(AwsCloudEnvironmentCheckUtils.java:38)
	at org.springframework.cloud.aws.context.annotation.OnAwsCloudEnvironmentCondition.matches(OnAwsCloudEnvironmentCondition.java:38)
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:489)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.Socket.connect(Socket.java:609)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:177)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:341)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:362)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1253)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1232)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1015)
	at com.amazonaws.internal.ConnectionUtils.connectToEndpoint(ConnectionUtils.java:52)
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:80)
	... 29 common frames omitted
WARN  22-01-15 09:41:47[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 09:41:51[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 09:41:51[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 09:41:51[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 09:41:51[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 09:41:51[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 09:41:51[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 17320 ms
INFO  22-01-15 09:41:52[restartedMain] [HikariDataSource:110] - HikariPool-1 - Starting...
INFO  22-01-15 09:41:53[restartedMain] [HikariDataSource:123] - HikariPool-1 - Start completed.
INFO  22-01-15 09:41:54[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 09:41:54[restartedMain] [Version:44] - HHH000412: Hibernate ORM core version 5.4.32.Final
INFO  22-01-15 09:41:55[restartedMain] [Version:56] - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
INFO  22-01-15 09:41:57[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 09:42:03[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 09:42:03[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 09:42:04[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 09:42:09[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: ce924df1-b361-412c-8498-f3e758c04ac6

INFO  22-01-15 09:42:12[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6a5a82e, org.springframework.security.web.context.SecurityContextPersistenceFilter@66216878, org.springframework.security.web.header.HeaderWriterFilter@643005ce, org.springframework.web.filter.CorsFilter@2ba80f11, org.springframework.security.web.authentication.logout.LogoutFilter@1af030f2, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@245274ff, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@531f085b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7b70ddc5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@40ef94c3, org.springframework.security.web.session.SessionManagementFilter@ed931d1, org.springframework.security.web.access.ExceptionTranslationFilter@4de21e1c]
INFO  22-01-15 09:42:16[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 09:42:18[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 09:42:18[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 09:42:18[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 47.334 seconds (JVM running for 48.937)
INFO  22-01-15 09:53:19[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 09:53:19[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 09:53:19[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
ERROR 22-01-15 09:53:20[http-nio-8080-exec-9] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:53:20Z, a difference of 335315310 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 09:53:20[http-nio-8080-exec-5] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:53:20Z, a difference of 335315310 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 09:53:20[http-nio-8080-exec-8] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:53:20Z, a difference of 335315310 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 09:53:20[http-nio-8080-exec-7] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:53:20Z, a difference of 335315310 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 09:53:20[http-nio-8080-exec-3] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:53:20Z, a difference of 335315310 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 09:53:20[http-nio-8080-exec-10] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:53:20Z, a difference of 335315310 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 09:53:20[http-nio-8080-exec-4] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:53:20Z, a difference of 335315646 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 09:53:20[http-nio-8080-exec-2] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:53:20Z, a difference of 335315645 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 09:53:20[http-nio-8080-exec-1] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:53:20Z, a difference of 335315654 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 09:54:20[http-nio-8080-exec-6] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:54:20Z, a difference of 335375073 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 09:57:40[http-nio-8080-exec-2] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:57:40Z, a difference of 335575471 milliseconds.  Allowed clock skew: 0 milliseconds.
WARN  22-01-15 09:57:40[http-nio-8080-exec-2] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
ERROR 22-01-15 09:58:46[http-nio-8080-exec-6] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:58:46Z, a difference of 335641115 milliseconds.  Allowed clock skew: 0 milliseconds.
WARN  22-01-15 09:58:46[http-nio-8080-exec-6] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
ERROR 22-01-15 09:59:23[http-nio-8080-exec-3] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:59:23Z, a difference of 335678840 milliseconds.  Allowed clock skew: 0 milliseconds.
DEBUG 22-01-15 09:59:24[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 09:59:24[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 24 msec}
INFO  22-01-15 09:59:24[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-10 12:44:46.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 09:59:25[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. update user set last_login_at='01/15/2022 09:59:24.798' where id=1

DEBUG 22-01-15 09:59:25[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. update user set last_login_at='01/15/2022 09:59:24.798' where id=1
 {executed in 3 msec}
ERROR 22-01-15 09:59:29[http-nio-8080-exec-5] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-11T12:44:45Z. Current time: 2022-01-15T09:59:29Z, a difference of 335684975 milliseconds.  Allowed clock skew: 0 milliseconds.
WARN  22-01-15 09:59:29[http-nio-8080-exec-5] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
DEBUG 22-01-15 09:59:47[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 09:59:47[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 09:59:47[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 09:59:47[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 09:59:47[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 09:59:47[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 09:59:47[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 09:59:47[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 09:59:47[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

WARN  22-01-15 09:59:51[http-nio-8080-exec-4] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
WARN  22-01-15 09:59:52[http-nio-8080-exec-1] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
WARN  22-01-15 09:59:52[http-nio-8080-exec-7] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
WARN  22-01-15 09:59:52[http-nio-8080-exec-5] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
WARN  22-01-15 09:59:52[http-nio-8080-exec-10] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
WARN  22-01-15 09:59:53[http-nio-8080-exec-4] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
WARN  22-01-15 09:59:53[http-nio-8080-exec-1] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
WARN  22-01-15 09:59:53[http-nio-8080-exec-6] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
WARN  22-01-15 09:59:53[http-nio-8080-exec-3] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
WARN  22-01-15 09:59:53[http-nio-8080-exec-5] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
INFO  22-01-15 10:03:07[Thread-5] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:03:07[Thread-5] [HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
INFO  22-01-15 10:03:07[Thread-5] [HikariDataSource:352] - HikariPool-1 - Shutdown completed.
INFO  22-01-15 10:03:08[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:03:08[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:03:13[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:03:15[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1927 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:03:16[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:03:17[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:03:17[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:03:17[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:03:17[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:03:17[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:03:17[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9380 ms
INFO  22-01-15 10:03:17[restartedMain] [HikariDataSource:110] - HikariPool-2 - Starting...
INFO  22-01-15 10:03:17[restartedMain] [HikariDataSource:123] - HikariPool-2 - Start completed.
INFO  22-01-15 10:03:18[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:03:18[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:03:19[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:03:19[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:03:19[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:03:21[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: b0461b6c-bc67-4f30-8d00-38bebae903ab

INFO  22-01-15 10:03:22[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@33a233b4, org.springframework.security.web.context.SecurityContextPersistenceFilter@3678bb78, org.springframework.security.web.header.HeaderWriterFilter@732b9cf2, org.springframework.web.filter.CorsFilter@27f6cb4, org.springframework.security.web.authentication.logout.LogoutFilter@5ddd324e, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@6929c4cd, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7bc3100f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@54a0df89, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1f2ca967, org.springframework.security.web.session.SessionManagementFilter@3a380dec, org.springframework.security.web.access.ExceptionTranslationFilter@7e943e3]
INFO  22-01-15 10:03:23[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:03:23[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:03:23[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:03:23[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 16.136 seconds (JVM running for 1314.565)
INFO  22-01-15 10:03:23[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:03:23[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:03:23[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:03:23[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
WARN  22-01-15 10:03:23[http-nio-8080-exec-2] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyWord' for method parameter type String is not present]
INFO  22-01-15 10:03:44[Thread-7] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:03:44[Thread-7] [HikariDataSource:350] - HikariPool-2 - Shutdown initiated...
INFO  22-01-15 10:03:44[Thread-7] [HikariDataSource:352] - HikariPool-2 - Shutdown completed.
INFO  22-01-15 10:03:45[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:03:45[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:03:50[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:03:52[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1883 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:03:53[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:03:54[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:03:54[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:03:54[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:03:54[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:03:54[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:03:54[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8987 ms
INFO  22-01-15 10:03:54[restartedMain] [HikariDataSource:110] - HikariPool-3 - Starting...
INFO  22-01-15 10:03:54[restartedMain] [HikariDataSource:123] - HikariPool-3 - Start completed.
INFO  22-01-15 10:03:55[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:03:55[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:03:56[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:03:56[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:03:56[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:03:57[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 2bfef32e-46bc-4144-9c1c-211ec845d69e

INFO  22-01-15 10:03:58[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2e1e4133, org.springframework.security.web.context.SecurityContextPersistenceFilter@2f7a0eb0, org.springframework.security.web.header.HeaderWriterFilter@14cfcb99, org.springframework.web.filter.CorsFilter@3445564c, org.springframework.security.web.authentication.logout.LogoutFilter@1f1d008a, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@3dc2f982, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@406f8297, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2a160a00, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@71161c26, org.springframework.security.web.session.SessionManagementFilter@35afe3d8, org.springframework.security.web.access.ExceptionTranslationFilter@72a3bb2b]
INFO  22-01-15 10:03:59[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:04:00[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:04:00[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:04:00[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.433 seconds (JVM running for 1350.901)
INFO  22-01-15 10:04:00[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:04:46[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:04:46[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:04:46[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 2 ms
ERROR 22-01-15 10:04:46[http-nio-8080-exec-2] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-10T19:34:25Z. Current time: 2022-01-15T10:04:46Z, a difference of 397821169 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 10:04:46[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
ERROR 22-01-15 10:05:20[http-nio-8080-exec-4] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
ERROR 22-01-15 10:05:31[http-nio-8080-exec-6] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-10T19:34:25Z. Current time: 2022-01-15T10:05:31Z, a difference of 397866337 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 10:05:31[http-nio-8080-exec-6] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
INFO  22-01-15 10:06:54[Thread-11] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:06:54[Thread-11] [HikariDataSource:350] - HikariPool-3 - Shutdown initiated...
INFO  22-01-15 10:06:54[Thread-11] [HikariDataSource:352] - HikariPool-3 - Shutdown completed.
INFO  22-01-15 10:06:55[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:06:55[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:07:01[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:07:03[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2120 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:07:04[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:07:05[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:07:05[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:07:05[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:07:05[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:07:05[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:07:05[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 10167 ms
INFO  22-01-15 10:07:06[restartedMain] [HikariDataSource:110] - HikariPool-4 - Starting...
INFO  22-01-15 10:07:06[restartedMain] [HikariDataSource:123] - HikariPool-4 - Start completed.
INFO  22-01-15 10:07:06[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:07:06[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:07:07[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:07:07[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:07:07[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:07:09[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 2a0d3138-a72a-4cd7-a926-e6a675517e3b

INFO  22-01-15 10:07:10[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6279ec6a, org.springframework.security.web.context.SecurityContextPersistenceFilter@1f3d79a4, org.springframework.security.web.header.HeaderWriterFilter@51e0ffc0, org.springframework.web.filter.CorsFilter@543f8f4c, org.springframework.security.web.authentication.logout.LogoutFilter@3786d13a, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@261c6552, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2336f6a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@547b8e13, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5254733b, org.springframework.security.web.session.SessionManagementFilter@4bfb92a1, org.springframework.security.web.access.ExceptionTranslationFilter@2ee66ebf]
INFO  22-01-15 10:07:11[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:07:11[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:07:11[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:07:11[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 16.213 seconds (JVM running for 1542.032)
INFO  22-01-15 10:07:11[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:07:17[Thread-15] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:07:17[Thread-15] [HikariDataSource:350] - HikariPool-4 - Shutdown initiated...
INFO  22-01-15 10:07:17[Thread-15] [HikariDataSource:352] - HikariPool-4 - Shutdown completed.
INFO  22-01-15 10:07:17[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:07:17[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:07:23[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:07:25[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1995 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:07:26[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:07:26[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:07:27[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:07:27[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:07:27[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:07:27[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:07:27[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8994 ms
INFO  22-01-15 10:07:27[restartedMain] [HikariDataSource:110] - HikariPool-5 - Starting...
INFO  22-01-15 10:07:27[restartedMain] [HikariDataSource:123] - HikariPool-5 - Start completed.
INFO  22-01-15 10:07:27[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:07:28[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:07:28[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:07:28[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:07:29[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:07:30[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 9042a0df-907b-4d51-8db5-c1c4fc931528

INFO  22-01-15 10:07:31[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4e283961, org.springframework.security.web.context.SecurityContextPersistenceFilter@23e57d5c, org.springframework.security.web.header.HeaderWriterFilter@26be746c, org.springframework.web.filter.CorsFilter@298d5a8e, org.springframework.security.web.authentication.logout.LogoutFilter@38fbea15, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@17b5274b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5647c58a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@30fc63a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@29b073eb, org.springframework.security.web.session.SessionManagementFilter@a8728e8, org.springframework.security.web.access.ExceptionTranslationFilter@1ecd7351]
INFO  22-01-15 10:07:32[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:07:32[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:07:32[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:07:32[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.065 seconds (JVM running for 1563.446)
INFO  22-01-15 10:07:32[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:07:49[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:07:49[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:07:49[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 1 ms
ERROR 22-01-15 10:07:49[http-nio-8080-exec-2] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-10T19:34:25Z. Current time: 2022-01-15T10:07:49Z, a difference of 398004755 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 10:07:49[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
INFO  22-01-15 10:08:53[Thread-19] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:08:53[Thread-19] [HikariDataSource:350] - HikariPool-5 - Shutdown initiated...
INFO  22-01-15 10:08:53[Thread-19] [HikariDataSource:352] - HikariPool-5 - Shutdown completed.
INFO  22-01-15 10:08:54[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:08:54[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:08:59[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:09:01[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1975 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:09:02[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:09:02[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:09:02[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:09:02[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:09:02[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:09:02[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:09:02[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8850 ms
INFO  22-01-15 10:09:03[restartedMain] [HikariDataSource:110] - HikariPool-6 - Starting...
INFO  22-01-15 10:09:03[restartedMain] [HikariDataSource:123] - HikariPool-6 - Start completed.
INFO  22-01-15 10:09:03[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:09:04[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:09:04[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:09:04[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:09:05[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:09:07[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 9d2559dd-8669-4a59-acc4-49fa2e864f87

INFO  22-01-15 10:09:08[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3489d64c, org.springframework.security.web.context.SecurityContextPersistenceFilter@e09ded5, org.springframework.security.web.header.HeaderWriterFilter@40fb251d, org.springframework.web.filter.CorsFilter@7bbe471b, org.springframework.security.web.authentication.logout.LogoutFilter@754952c8, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@7bd4e194, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@484c4f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@19025296, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7bcfcb99, org.springframework.security.web.session.SessionManagementFilter@43bdfca7, org.springframework.security.web.access.ExceptionTranslationFilter@516be487]
INFO  22-01-15 10:09:09[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:09:09[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:09:09[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:09:09[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.541 seconds (JVM running for 1659.986)
INFO  22-01-15 10:09:09[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:09:41[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:09:41[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:09:41[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 1 ms
ERROR 22-01-15 10:09:41[http-nio-8080-exec-2] [TokenProvider:48] - JWT TOKEN ERROR: JWT expired at 2022-01-10T19:34:25Z. Current time: 2022-01-15T10:09:41Z, a difference of 398116175 milliseconds.  Allowed clock skew: 0 milliseconds.
ERROR 22-01-15 10:09:41[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
ERROR 22-01-15 10:10:24[http-nio-8080-exec-4] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
INFO  22-01-15 10:15:23[Thread-23] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:15:23[Thread-23] [HikariDataSource:350] - HikariPool-6 - Shutdown initiated...
INFO  22-01-15 10:15:23[Thread-23] [HikariDataSource:352] - HikariPool-6 - Shutdown completed.
INFO  22-01-15 10:15:23[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:15:23[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:15:30[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:15:31[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1984 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:15:33[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:15:33[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:15:33[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:15:33[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:15:33[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:15:33[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:15:33[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9953 ms
INFO  22-01-15 10:15:34[restartedMain] [HikariDataSource:110] - HikariPool-7 - Starting...
INFO  22-01-15 10:15:34[restartedMain] [HikariDataSource:123] - HikariPool-7 - Start completed.
INFO  22-01-15 10:15:35[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:15:35[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:15:36[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:15:36[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:15:36[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:15:38[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 3717d1cc-5c81-4294-8afa-8715a6ee6b32

INFO  22-01-15 10:15:39[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@71734536, org.springframework.security.web.context.SecurityContextPersistenceFilter@bfa9069, org.springframework.security.web.header.HeaderWriterFilter@6b7c24a8, org.springframework.web.filter.CorsFilter@5e35f5bd, org.springframework.security.web.authentication.logout.LogoutFilter@3e54b252, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@336312c3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6ba35715, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@617077ad, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@74a9033d, org.springframework.security.web.session.SessionManagementFilter@393736b8, org.springframework.security.web.access.ExceptionTranslationFilter@54468fec]
INFO  22-01-15 10:15:40[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:15:40[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:15:40[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:15:40[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 16.772 seconds (JVM running for 2051.023)
INFO  22-01-15 10:15:40[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:15:43[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:15:43[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:15:43[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 2 ms
ERROR 22-01-15 10:15:43[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
INFO  22-01-15 10:16:59[Thread-27] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:16:59[Thread-27] [HikariDataSource:350] - HikariPool-7 - Shutdown initiated...
INFO  22-01-15 10:16:59[Thread-27] [HikariDataSource:352] - HikariPool-7 - Shutdown completed.
INFO  22-01-15 10:17:00[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:17:00[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:17:05[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:17:07[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1871 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:17:08[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:17:09[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:17:09[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:17:09[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:17:09[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:17:09[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:17:09[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9012 ms
INFO  22-01-15 10:17:09[restartedMain] [HikariDataSource:110] - HikariPool-8 - Starting...
INFO  22-01-15 10:17:09[restartedMain] [HikariDataSource:123] - HikariPool-8 - Start completed.
INFO  22-01-15 10:17:10[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:17:10[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:17:10[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:17:10[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:17:11[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:17:13[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 34abb1d3-8886-45cb-8d66-edb18c8b3dfd

INFO  22-01-15 10:17:13[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@13273df6, org.springframework.security.web.context.SecurityContextPersistenceFilter@1b98e72d, org.springframework.security.web.header.HeaderWriterFilter@57085d99, org.springframework.web.filter.CorsFilter@6a2dc6d0, org.springframework.security.web.authentication.logout.LogoutFilter@1792b60e, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@171688e8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4ea0ee47, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5bd1869f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@b021bab, org.springframework.security.web.session.SessionManagementFilter@40ba0296, org.springframework.security.web.access.ExceptionTranslationFilter@6556076e]
INFO  22-01-15 10:17:14[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:17:14[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:17:14[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:17:14[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.316 seconds (JVM running for 2145.788)
INFO  22-01-15 10:17:14[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:17:18[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:17:18[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:17:18[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 1 ms
ERROR 22-01-15 10:17:18[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
ERROR 22-01-15 10:17:20[http-nio-8080-exec-4] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
INFO  22-01-15 10:17:46[Thread-31] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:17:46[Thread-31] [HikariDataSource:350] - HikariPool-8 - Shutdown initiated...
INFO  22-01-15 10:17:46[Thread-31] [HikariDataSource:352] - HikariPool-8 - Shutdown completed.
INFO  22-01-15 10:17:47[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:17:47[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:17:53[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:17:55[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2238 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:17:56[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:17:57[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:17:57[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:17:57[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:17:57[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:17:57[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:17:57[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 10086 ms
INFO  22-01-15 10:17:57[restartedMain] [HikariDataSource:110] - HikariPool-9 - Starting...
INFO  22-01-15 10:17:57[restartedMain] [HikariDataSource:123] - HikariPool-9 - Start completed.
INFO  22-01-15 10:17:58[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:17:58[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:17:59[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:17:59[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:17:59[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:18:01[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 568b1cca-ee44-4983-9487-961c7ece9481

INFO  22-01-15 10:18:02[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@37d63b03, org.springframework.security.web.context.SecurityContextPersistenceFilter@23218bef, org.springframework.security.web.header.HeaderWriterFilter@7497b394, org.springframework.web.filter.CorsFilter@21deeb8b, org.springframework.security.web.authentication.logout.LogoutFilter@7c3eafec, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@58988135, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1de5a710, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@54a7bc2b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@219fa203, org.springframework.security.web.session.SessionManagementFilter@100c9e3, org.springframework.security.web.access.ExceptionTranslationFilter@5a2c8ad9]
INFO  22-01-15 10:18:03[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:18:04[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:18:04[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:18:04[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 17.553 seconds (JVM running for 2194.89)
INFO  22-01-15 10:18:04[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:18:05[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:18:05[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:18:05[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 1 ms
ERROR 22-01-15 10:18:05[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
INFO  22-01-15 10:19:37[background-preinit] [Version:21] - HV000001: Hibernate Validator 6.2.0.Final
INFO  22-01-15 10:19:37[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:19:37[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:19:37[restartedMain] [DevToolsPropertyDefaultsPostProcessor:255] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
INFO  22-01-15 10:19:37[restartedMain] [DevToolsPropertyDefaultsPostProcessor:255] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
INFO  22-01-15 10:19:46[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:19:48[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1949 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:19:49[restartedMain] [InstanceMetadataServiceResourceFetcher:105] - Fail to retrieve token 
com.amazonaws.SdkClientException: Failed to connect to service endpoint: 
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:100)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.getToken(InstanceMetadataServiceResourceFetcher.java:91)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.readResource(InstanceMetadataServiceResourceFetcher.java:69)
	at com.amazonaws.internal.EC2ResourceFetcher.readResource(EC2ResourceFetcher.java:66)
	at com.amazonaws.util.EC2MetadataUtils.getItems(EC2MetadataUtils.java:402)
	at com.amazonaws.util.EC2MetadataUtils.getData(EC2MetadataUtils.java:371)
	at org.springframework.cloud.aws.context.support.env.AwsCloudEnvironmentCheckUtils.isRunningOnCloudEnvironment(AwsCloudEnvironmentCheckUtils.java:38)
	at org.springframework.cloud.aws.context.annotation.OnAwsCloudEnvironmentCondition.matches(OnAwsCloudEnvironmentCondition.java:38)
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:489)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.Socket.connect(Socket.java:609)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:177)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:341)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:362)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1253)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1232)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1015)
	at com.amazonaws.internal.ConnectionUtils.connectToEndpoint(ConnectionUtils.java:52)
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:80)
	... 29 common frames omitted
WARN  22-01-15 10:19:49[restartedMain] [EC2MetadataUtils:409] - Unable to retrieve the requested metadata (/latest/meta-data/instance-id). Failed to connect to service endpoint: 
com.amazonaws.SdkClientException: Failed to connect to service endpoint: 
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:100)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.getToken(InstanceMetadataServiceResourceFetcher.java:91)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.readResource(InstanceMetadataServiceResourceFetcher.java:69)
	at com.amazonaws.internal.EC2ResourceFetcher.readResource(EC2ResourceFetcher.java:66)
	at com.amazonaws.util.EC2MetadataUtils.getItems(EC2MetadataUtils.java:402)
	at com.amazonaws.util.EC2MetadataUtils.getData(EC2MetadataUtils.java:371)
	at org.springframework.cloud.aws.context.support.env.AwsCloudEnvironmentCheckUtils.isRunningOnCloudEnvironment(AwsCloudEnvironmentCheckUtils.java:38)
	at org.springframework.cloud.aws.context.annotation.OnAwsCloudEnvironmentCondition.matches(OnAwsCloudEnvironmentCondition.java:38)
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:489)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.Socket.connect(Socket.java:609)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:177)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:341)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:362)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1253)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1232)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1015)
	at com.amazonaws.internal.ConnectionUtils.connectToEndpoint(ConnectionUtils.java:52)
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:80)
	... 29 common frames omitted
WARN  22-01-15 10:19:50[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:19:54[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:19:54[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:19:54[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:19:54[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:19:54[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:19:54[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 16935 ms
INFO  22-01-15 10:19:55[restartedMain] [HikariDataSource:110] - HikariPool-1 - Starting...
INFO  22-01-15 10:19:56[restartedMain] [HikariDataSource:123] - HikariPool-1 - Start completed.
INFO  22-01-15 10:19:57[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:19:57[restartedMain] [Version:44] - HHH000412: Hibernate ORM core version 5.4.32.Final
INFO  22-01-15 10:19:58[restartedMain] [Version:56] - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
INFO  22-01-15 10:20:00[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:20:06[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:20:06[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:20:07[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:20:13[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 734cc4f4-4185-4921-b63e-6da8086d54a4

INFO  22-01-15 10:20:15[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@26f1081f, org.springframework.security.web.context.SecurityContextPersistenceFilter@7c950472, org.springframework.security.web.header.HeaderWriterFilter@72ed19c, org.springframework.web.filter.CorsFilter@427803ed, org.springframework.security.web.authentication.logout.LogoutFilter@280ca1fd, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@334b48ee, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@25211898, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5f00b712, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@55b500f2, org.springframework.security.web.session.SessionManagementFilter@4afc11d6, org.springframework.security.web.access.ExceptionTranslationFilter@47697629]
INFO  22-01-15 10:20:20[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:20:21[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:20:21[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:20:21[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 47.002 seconds (JVM running for 48.526)
INFO  22-01-15 10:21:34[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:21:34[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:21:34[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 2 ms
ERROR 22-01-15 10:21:35[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
INFO  22-01-15 10:23:08[Thread-5] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:23:08[Thread-5] [HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
INFO  22-01-15 10:23:08[Thread-5] [HikariDataSource:352] - HikariPool-1 - Shutdown completed.
INFO  22-01-15 10:23:09[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:23:09[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:23:15[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:23:17[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2053 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:23:18[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:23:19[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:23:19[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:23:19[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:23:19[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:23:19[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:23:19[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 10145 ms
INFO  22-01-15 10:23:20[restartedMain] [HikariDataSource:110] - HikariPool-2 - Starting...
INFO  22-01-15 10:23:20[restartedMain] [HikariDataSource:123] - HikariPool-2 - Start completed.
INFO  22-01-15 10:23:20[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:23:20[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:23:21[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:23:21[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:23:21[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:23:23[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 81a62064-e932-4497-8d6e-43b664ab104c

INFO  22-01-15 10:23:24[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6ea70702, org.springframework.security.web.context.SecurityContextPersistenceFilter@3f9c73d3, org.springframework.security.web.header.HeaderWriterFilter@41f3f0a7, org.springframework.web.filter.CorsFilter@138d81bd, org.springframework.security.web.authentication.logout.LogoutFilter@112392db, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@7254032e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@434a65d2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1de2d3d4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@75956d43, org.springframework.security.web.session.SessionManagementFilter@596125d9, org.springframework.security.web.access.ExceptionTranslationFilter@7b30f349]
INFO  22-01-15 10:23:25[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:23:25[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:23:25[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:23:25[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 16.272 seconds (JVM running for 232.37)
INFO  22-01-15 10:23:25[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:23:30[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:23:30[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:23:30[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-15 10:23:31[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 10:23:31[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 21 msec}
INFO  22-01-15 10:23:31[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 10:23:31[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 10:23:31[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 10:23:31[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 10:23:57[Thread-7] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:23:57[Thread-7] [HikariDataSource:350] - HikariPool-2 - Shutdown initiated...
INFO  22-01-15 10:23:57[Thread-7] [HikariDataSource:352] - HikariPool-2 - Shutdown completed.
INFO  22-01-15 10:23:57[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:23:57[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:24:03[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:24:05[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1898 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:24:06[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:24:07[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:24:07[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:24:07[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:24:07[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:24:07[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:24:07[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9196 ms
INFO  22-01-15 10:24:07[restartedMain] [HikariDataSource:110] - HikariPool-3 - Starting...
INFO  22-01-15 10:24:07[restartedMain] [HikariDataSource:123] - HikariPool-3 - Start completed.
INFO  22-01-15 10:24:08[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:24:08[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:24:09[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:24:09[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:24:09[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:24:11[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 2cc83f78-116b-43cb-9f09-c0ff98225a43

INFO  22-01-15 10:24:12[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@35c21c75, org.springframework.security.web.context.SecurityContextPersistenceFilter@fa327bb, org.springframework.security.web.header.HeaderWriterFilter@344fe28, org.springframework.web.filter.CorsFilter@12900ccb, org.springframework.security.web.authentication.logout.LogoutFilter@1a53ffec, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@75167ba, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@49f7ebce, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6d66e966, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@43666ff8, org.springframework.security.web.session.SessionManagementFilter@73e257ce, org.springframework.security.web.access.ExceptionTranslationFilter@276c3fce]
INFO  22-01-15 10:24:12[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:24:13[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:24:13[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:24:13[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.571 seconds (JVM running for 280.194)
INFO  22-01-15 10:24:13[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:24:15[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:24:15[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:24:15[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 2 ms
DEBUG 22-01-15 10:24:15[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 10:24:15[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 10:24:15[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 10:24:15[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 10:24:15[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 10:24:15[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 10:26:46[Thread-11] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:26:46[Thread-11] [HikariDataSource:350] - HikariPool-3 - Shutdown initiated...
INFO  22-01-15 10:26:46[Thread-11] [HikariDataSource:352] - HikariPool-3 - Shutdown completed.
INFO  22-01-15 10:26:47[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:26:47[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:26:52[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:26:54[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2011 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:26:55[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:26:56[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:26:56[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:26:56[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:26:56[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:26:56[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:26:56[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9056 ms
INFO  22-01-15 10:26:57[restartedMain] [HikariDataSource:110] - HikariPool-4 - Starting...
INFO  22-01-15 10:26:57[restartedMain] [HikariDataSource:123] - HikariPool-4 - Start completed.
INFO  22-01-15 10:26:57[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:26:57[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:26:58[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:26:58[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:26:58[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:27:00[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 04bbaeb7-9229-4522-8746-dfd0b4e8441d

INFO  22-01-15 10:27:01[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@9fb5a31, org.springframework.security.web.context.SecurityContextPersistenceFilter@93dbc85, org.springframework.security.web.header.HeaderWriterFilter@18c47a5f, org.springframework.web.filter.CorsFilter@60438363, org.springframework.security.web.authentication.logout.LogoutFilter@4c508ebd, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@ddf1c0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@610475b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3dbdd344, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7c3083fd, org.springframework.security.web.session.SessionManagementFilter@7abdff15, org.springframework.security.web.access.ExceptionTranslationFilter@31a7c0b1]
INFO  22-01-15 10:27:01[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:27:01[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:27:01[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:27:01[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 14.893 seconds (JVM running for 449.119)
INFO  22-01-15 10:27:01[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:27:10[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:27:10[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:27:10[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 0 ms
DEBUG 22-01-15 10:27:10[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 10:27:10[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 10:27:10[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 10:27:10[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 10:27:10[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 10:27:10[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 10:33:28[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 10:33:28[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 10:33:28[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 10:33:28[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 10:33:28[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 10:33:28[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 10:39:03[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 10:39:03[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 10:39:03[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 10:39:03[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 10:39:03[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 10:39:03[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 10:43:50[Thread-15] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:43:50[Thread-15] [HikariDataSource:350] - HikariPool-4 - Shutdown initiated...
INFO  22-01-15 10:43:50[Thread-15] [HikariDataSource:352] - HikariPool-4 - Shutdown completed.
INFO  22-01-15 10:43:51[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:43:51[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:43:56[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:43:58[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1814 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:43:59[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:43:59[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:43:59[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:43:59[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:43:59[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:43:59[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:43:59[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8574 ms
INFO  22-01-15 10:44:00[restartedMain] [HikariDataSource:110] - HikariPool-5 - Starting...
INFO  22-01-15 10:44:00[restartedMain] [HikariDataSource:123] - HikariPool-5 - Start completed.
INFO  22-01-15 10:44:00[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:44:00[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:44:01[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:44:01[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:44:01[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:44:03[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 71c3146b-5ae9-498e-9be6-df8ada5350a6

INFO  22-01-15 10:44:04[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@41f6bef5, org.springframework.security.web.context.SecurityContextPersistenceFilter@664ce79e, org.springframework.security.web.header.HeaderWriterFilter@2cd554f5, org.springframework.web.filter.CorsFilter@61272de0, org.springframework.security.web.authentication.logout.LogoutFilter@6b2a4a14, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@242587a4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@f63f1c2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@9976e27, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5a5a9d38, org.springframework.security.web.session.SessionManagementFilter@346ae8b3, org.springframework.security.web.access.ExceptionTranslationFilter@4d649449]
INFO  22-01-15 10:44:05[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:44:05[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:44:05[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:44:05[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 14.628 seconds (JVM running for 1472.45)
INFO  22-01-15 10:44:05[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:44:27[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:44:27[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:44:27[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 0 ms
DEBUG 22-01-15 10:44:27[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 10:44:27[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 10:44:27[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 10:44:27[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 10:44:27[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 10:44:27[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 10:58:40[Thread-19] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 10:58:40[Thread-19] [HikariDataSource:350] - HikariPool-5 - Shutdown initiated...
INFO  22-01-15 10:58:40[Thread-19] [HikariDataSource:352] - HikariPool-5 - Shutdown completed.
INFO  22-01-15 10:58:41[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 10:58:41[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 10:58:46[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 10:58:48[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1819 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 10:58:49[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 10:58:50[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 10:58:50[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:58:50[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 10:58:50[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 10:58:50[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 10:58:50[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8763 ms
INFO  22-01-15 10:58:50[restartedMain] [HikariDataSource:110] - HikariPool-6 - Starting...
INFO  22-01-15 10:58:50[restartedMain] [HikariDataSource:123] - HikariPool-6 - Start completed.
INFO  22-01-15 10:58:51[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 10:58:51[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 10:58:52[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 10:58:52[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 10:58:52[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 10:58:54[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 7acc5667-d694-42dc-ba7d-e99b3934a267

INFO  22-01-15 10:58:55[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@59a8d580, org.springframework.security.web.context.SecurityContextPersistenceFilter@2f66f117, org.springframework.security.web.header.HeaderWriterFilter@40970c20, org.springframework.web.filter.CorsFilter@4884653b, org.springframework.security.web.authentication.logout.LogoutFilter@33b8451, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@754aae02, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@33e9e952, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4b671503, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6714d440, org.springframework.security.web.session.SessionManagementFilter@11883e4f, org.springframework.security.web.access.ExceptionTranslationFilter@2926a6b7]
INFO  22-01-15 10:58:56[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 10:58:56[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 10:58:56[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 10:58:56[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.177 seconds (JVM running for 2363.434)
INFO  22-01-15 10:58:56[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 10:58:59[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 10:58:59[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 10:58:59[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-15 10:58:59[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 10:58:59[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 10:58:59[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 10:58:59[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 10:58:59[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 10:58:59[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:00:33[Thread-23] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 11:00:33[Thread-23] [HikariDataSource:350] - HikariPool-6 - Shutdown initiated...
INFO  22-01-15 11:00:33[Thread-23] [HikariDataSource:352] - HikariPool-6 - Shutdown completed.
INFO  22-01-15 11:00:33[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 11:00:33[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 11:00:39[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 11:00:41[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2104 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 11:00:42[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 11:00:42[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 11:00:42[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 11:00:42[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 11:00:42[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 11:00:42[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 11:00:42[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9160 ms
INFO  22-01-15 11:00:43[restartedMain] [HikariDataSource:110] - HikariPool-7 - Starting...
INFO  22-01-15 11:00:43[restartedMain] [HikariDataSource:123] - HikariPool-7 - Start completed.
INFO  22-01-15 11:00:43[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 11:00:44[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 11:00:44[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 11:00:44[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 11:00:45[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-15 11:00:46[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
INFO  22-01-15 11:00:46[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 11:00:46[restartedMain] [HikariDataSource:350] - HikariPool-7 - Shutdown initiated...
INFO  22-01-15 11:00:46[restartedMain] [HikariDataSource:352] - HikariPool-7 - Shutdown completed.
INFO  22-01-15 11:00:46[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-15 11:00:46[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-15 11:00:46[restartedMain] [LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field locationApiLogicService in com.example.gradlebnbadminapi.controller.LocationController required a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' in your configuration.

INFO  22-01-15 11:02:43[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 11:02:43[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 11:02:47[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 11:02:48[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1154 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 11:02:49[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 11:02:50[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 11:02:50[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 11:02:50[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 11:02:50[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 11:02:50[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 11:02:50[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 6213 ms
INFO  22-01-15 11:02:50[restartedMain] [HikariDataSource:110] - HikariPool-8 - Starting...
INFO  22-01-15 11:02:50[restartedMain] [HikariDataSource:123] - HikariPool-8 - Start completed.
INFO  22-01-15 11:02:50[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 11:02:50[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 11:02:50[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 11:02:50[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 11:02:51[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 11:02:52[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 85a2a7f0-ec33-4a06-b5d8-2f92b62aec5d

INFO  22-01-15 11:02:53[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@64267c9c, org.springframework.security.web.context.SecurityContextPersistenceFilter@2d63eb68, org.springframework.security.web.header.HeaderWriterFilter@495e8630, org.springframework.web.filter.CorsFilter@4a204227, org.springframework.security.web.authentication.logout.LogoutFilter@47d35e20, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@4f2e7c39, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3182aea5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@c50c1a3, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4714ce18, org.springframework.security.web.session.SessionManagementFilter@1e6cf382, org.springframework.security.web.access.ExceptionTranslationFilter@26174d4c]
INFO  22-01-15 11:02:53[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 11:02:53[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 11:02:53[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 11:02:53[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 10.613 seconds (JVM running for 2601.093)
INFO  22-01-15 11:02:53[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 11:02:54[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 11:02:54[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 11:02:54[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 0 ms
DEBUG 22-01-15 11:02:54[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:02:54[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:02:54[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:02:54[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:02:54[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:02:54[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:02:54[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:44] - places: 동대문
INFO  22-01-15 11:02:54[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:48] - URL: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 11:02:54[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:52] - Responded places info:<!DOCTYPE html>
<html lang=en>
  <meta charset=utf-8>
  <meta name=viewport content="initial-scale=1, minimum-scale=1, width=device-width">
  <title>Error 404 (Not Found)!!1</title>
  <style>
    *{margin:0;padding:0}html,code{font:15px/22px arial,sans-serif}html{background:#fff;color:#222;padding:15px}body{margin:7% auto 0;max-width:390px;min-height:180px;padding:30px 0 15px}* > body{background:url(//www.google.com/images/errors/robot.png) 100% 5px no-repeat;padding-right:205px}p{margin:11px 0 22px;overflow:hidden}ins{color:#777;text-decoration:none}a img{border:0}@media screen and (max-width:772px){body{background:none;margin-top:0;max-width:none;padding-right:0}}#logo{background:url(//www.google.com/images/branding/googlelogo/1x/googlelogo_color_150x54dp.png) no-repeat;margin-left:-5px}@media only screen and (min-resolution:192dpi){#logo{background:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) no-repeat 0% 0%/100% 100%;-moz-border-image:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) 0}}@media only screen and (-webkit-min-device-pixel-ratio:2){#logo{background:url(//www.google.com/images/branding/googlelogo/2x/googlelogo_color_150x54dp.png) no-repeat;-webkit-background-size:100% 100%}}#logo{display:inline-block;height:54px;width:150px}
  </style>
  <a href=//www.google.com/><span id=logo aria-label=Google></span></a>
  <p><b>404.</b> <ins>That’s an error.</ins>
  <p>The requested URL <code>/maps/api/place/queryautocomplete/jsonhttps://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&amp;language=en&amp;input=%EB%8F%99%EB%8C%80%EB%AC%B8</code> was not found on this server.  <ins>That’s all we know.</ins>

INFO  22-01-15 11:03:56[Thread-27] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 11:03:56[Thread-27] [HikariDataSource:350] - HikariPool-8 - Shutdown initiated...
INFO  22-01-15 11:03:56[Thread-27] [HikariDataSource:352] - HikariPool-8 - Shutdown completed.
INFO  22-01-15 11:03:57[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 11:03:57[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 11:04:00[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 11:04:01[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1147 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 11:04:02[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 11:04:03[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 11:04:03[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 11:04:03[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 11:04:03[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 11:04:03[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 11:04:03[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5842 ms
INFO  22-01-15 11:04:03[restartedMain] [HikariDataSource:110] - HikariPool-9 - Starting...
INFO  22-01-15 11:04:03[restartedMain] [HikariDataSource:123] - HikariPool-9 - Start completed.
INFO  22-01-15 11:04:03[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 11:04:03[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 11:04:04[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 11:04:04[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 11:04:04[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 11:04:05[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 81628600-5d33-4971-9205-121f6a959328

INFO  22-01-15 11:04:06[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@416451e4, org.springframework.security.web.context.SecurityContextPersistenceFilter@4fb4d67b, org.springframework.security.web.header.HeaderWriterFilter@22b31262, org.springframework.web.filter.CorsFilter@ef79177, org.springframework.security.web.authentication.logout.LogoutFilter@40dd5a39, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@da14092, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7cea9cdd, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4670a120, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6eb0946c, org.springframework.security.web.session.SessionManagementFilter@7cf26bc7, org.springframework.security.web.access.ExceptionTranslationFilter@411e4e6e]
INFO  22-01-15 11:04:07[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 11:04:07[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 11:04:07[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 11:04:07[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 10.628 seconds (JVM running for 2674.411)
INFO  22-01-15 11:04:07[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 11:05:03[Thread-34] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 11:05:03[Thread-34] [HikariDataSource:350] - HikariPool-9 - Shutdown initiated...
INFO  22-01-15 11:05:03[Thread-34] [HikariDataSource:352] - HikariPool-9 - Shutdown completed.
INFO  22-01-15 11:05:03[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 11:05:03[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 11:05:07[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 11:05:08[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1249 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 11:05:09[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 11:05:09[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 11:05:09[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 11:05:09[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 11:05:09[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 11:05:09[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 11:05:09[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 6250 ms
INFO  22-01-15 11:05:10[restartedMain] [HikariDataSource:110] - HikariPool-10 - Starting...
INFO  22-01-15 11:05:10[restartedMain] [HikariDataSource:123] - HikariPool-10 - Start completed.
INFO  22-01-15 11:05:11[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 11:05:11[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 11:05:11[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 11:05:11[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 11:05:11[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 11:05:12[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: ae802431-89da-4bcf-8d72-f630762ada3e

INFO  22-01-15 11:05:13[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4d35ef70, org.springframework.security.web.context.SecurityContextPersistenceFilter@3c35670a, org.springframework.security.web.header.HeaderWriterFilter@55864ead, org.springframework.web.filter.CorsFilter@3556346d, org.springframework.security.web.authentication.logout.LogoutFilter@7151d0a0, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@1f03ad90, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5e9e4777, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@390a992f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@de801d8, org.springframework.security.web.session.SessionManagementFilter@23af963c, org.springframework.security.web.access.ExceptionTranslationFilter@28f94615]
INFO  22-01-15 11:05:14[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 11:05:14[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 11:05:14[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 11:05:14[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 11.404 seconds (JVM running for 2741.806)
INFO  22-01-15 11:05:14[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 11:05:29[Thread-38] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 11:05:29[Thread-38] [HikariDataSource:350] - HikariPool-10 - Shutdown initiated...
INFO  22-01-15 11:05:29[Thread-38] [HikariDataSource:352] - HikariPool-10 - Shutdown completed.
INFO  22-01-15 11:05:29[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 11:05:29[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 11:05:33[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 11:05:34[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1442 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 11:05:35[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 11:05:35[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 11:05:35[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 11:05:35[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 11:05:35[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 11:05:35[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 11:05:35[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5800 ms
INFO  22-01-15 11:05:35[restartedMain] [HikariDataSource:110] - HikariPool-11 - Starting...
INFO  22-01-15 11:05:35[restartedMain] [HikariDataSource:123] - HikariPool-11 - Start completed.
INFO  22-01-15 11:05:36[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 11:05:36[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 11:05:36[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 11:05:36[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 11:05:37[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 11:05:38[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 98be8a7c-3258-43f2-9a48-a078588a8f0e

INFO  22-01-15 11:05:38[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6600438f, org.springframework.security.web.context.SecurityContextPersistenceFilter@3362b408, org.springframework.security.web.header.HeaderWriterFilter@545bc27c, org.springframework.web.filter.CorsFilter@588c0ac2, org.springframework.security.web.authentication.logout.LogoutFilter@115cb806, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@5217ef02, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1632666c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1cf01ef4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1019762, org.springframework.security.web.session.SessionManagementFilter@30137e01, org.springframework.security.web.access.ExceptionTranslationFilter@66b879b9]
INFO  22-01-15 11:05:39[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 11:05:39[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 11:05:39[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 11:05:39[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 10.381 seconds (JVM running for 2766.824)
INFO  22-01-15 11:05:39[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 11:05:42[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 11:05:42[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 11:05:42[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-15 11:05:42[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:05:42[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:05:42[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:05:42[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:05:42[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:05:42[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:05:42[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:44] - places: 동대문
INFO  22-01-15 11:05:42[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 11:05:43[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:07:20[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:20[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:07:20[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:07:20[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:07:20[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 11:07:20[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 11:07:20[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:20[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:07:20[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 11:07:24[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:24[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:07:24[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:07:24[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:07:24[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:07:24[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:07:24[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:44] - places: e
INFO  22-01-15 11:07:24[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=e
DEBUG 22-01-15 11:07:24[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:24[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:07:24[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:07:24[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:07:24[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:07:24[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:07:24[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:44] - places: eh
INFO  22-01-15 11:07:24[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=eh
DEBUG 22-01-15 11:07:24[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:24[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:07:24[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:07:24[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:07:24[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:07:24[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:07:24[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:44] - places: ehd
INFO  22-01-15 11:07:24[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=ehd
INFO  22-01-15 11:07:24[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Ehrwald, Austria",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ6fjUdkr9nEcRlhGvdjMIHl4",
         "reference" : "ChIJ6fjUdkr9nEcRlhGvdjMIHl4",
         "structured_formatting" : {
            "main_text" : "Ehrwald",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Austria"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehrwald"
            },
            {
               "offset" : 9,
               "value" : "Austria"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Ehrenfeld, Cologne, Germany",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJK9SDMK46v0cRtjCXyHdW5nQ",
         "reference" : "ChIJK9SDMK46v0cRtjCXyHdW5nQ",
         "structured_formatting" : {
            "main_text" : "Ehrenfeld",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Cologne, Germany"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehrenfeld"
            },
            {
               "offset" : 11,
               "value" : "Cologne"
            },
            {
               "offset" : 20,
               "value" : "Germany"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Eheliyagoda, Sri Lanka",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJvbgqU4uv4zoR04X6Oj3ATzc",
         "reference" : "ChIJvbgqU4uv4zoR04X6Oj3ATzc",
         "structured_formatting" : {
            "main_text" : "Eheliyagoda",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Sri Lanka"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Eheliyagoda"
            },
            {
               "offset" : 13,
               "value" : "Sri Lanka"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Ehingen, Germany",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJF6lBQ6fVm0cRgH7fpbdrHwQ",
         "reference" : "ChIJF6lBQ6fVm0cRgH7fpbdrHwQ",
         "structured_formatting" : {
            "main_text" : "Ehingen",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Germany"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehingen"
            },
            {
               "offset" : 9,
               "value" : "Germany"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Ehningen, Germany",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJL_Fw_YBfl0cR6US5pTaEjxw",
         "reference" : "ChIJL_Fw_YBfl0cR6US5pTaEjxw",
         "structured_formatting" : {
            "main_text" : "Ehningen",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Germany"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehningen"
            },
            {
               "offset" : 10,
               "value" : "Germany"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

INFO  22-01-15 11:07:24[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "El Paso, TX, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJaTv-xYs_54YRIgKdq-OEkeM",
         "reference" : "ChIJaTv-xYs_54YRIgKdq-OEkeM",
         "structured_formatting" : {
            "main_text" : "El Paso",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "TX, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "El Paso"
            },
            {
               "offset" : 9,
               "value" : "TX"
            },
            {
               "offset" : 13,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Edinburgh, UK",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJIyaYpQC4h0gRJxfnfHsU8mQ",
         "reference" : "ChIJIyaYpQC4h0gRJxfnfHsU8mQ",
         "structured_formatting" : {
            "main_text" : "Edinburgh",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "UK"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Edinburgh"
            },
            {
               "offset" : 11,
               "value" : "UK"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Essen, Germany",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJOfarlrfCuEcRnSytpBHhAGo",
         "reference" : "ChIJOfarlrfCuEcRnSytpBHhAGo",
         "structured_formatting" : {
            "main_text" : "Essen",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Germany"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Essen"
            },
            {
               "offset" : 7,
               "value" : "Germany"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Edmonton, AB, Canada",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJI__egEUioFMRXRX2SgygH0E",
         "reference" : "ChIJI__egEUioFMRXRX2SgygH0E",
         "structured_formatting" : {
            "main_text" : "Edmonton",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "AB, Canada"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Edmonton"
            },
            {
               "offset" : 10,
               "value" : "AB"
            },
            {
               "offset" : 14,
               "value" : "Canada"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Eindhoven, Netherlands",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJn8N5VRvZxkcRmLlkgWTSmvM",
         "reference" : "ChIJn8N5VRvZxkcRmLlkgWTSmvM",
         "structured_formatting" : {
            "main_text" : "Eindhoven",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Netherlands"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Eindhoven"
            },
            {
               "offset" : 11,
               "value" : "Netherlands"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

INFO  22-01-15 11:07:24[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Ehden, Lebanon",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJuyn-BRMDIhURkrKq7Hf0pIA",
         "reference" : "ChIJuyn-BRMDIhURkrKq7Hf0pIA",
         "structured_formatting" : {
            "main_text" : "Ehden",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Lebanon"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehden"
            },
            {
               "offset" : 7,
               "value" : "Lebanon"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Ehden Country Club, Ehden, Lebanon",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJozYaq_sCIhURHppXb66DUyI",
         "reference" : "ChIJozYaq_sCIhURHppXb66DUyI",
         "structured_formatting" : {
            "main_text" : "Ehden Country Club",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Ehden, Lebanon"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehden Country Club"
            },
            {
               "offset" : 20,
               "value" : "Ehden"
            },
            {
               "offset" : 27,
               "value" : "Lebanon"
            }
         ],
         "types" : [ "lodging", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Ehden Bar and Kitchen, Montague Road, West End QLD, Australia",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ_b5ba15RkWsRiIQVZyRAzlc",
         "reference" : "ChIJ_b5ba15RkWsRiIQVZyRAzlc",
         "structured_formatting" : {
            "main_text" : "Ehden Bar and Kitchen",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Montague Road, West End QLD, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehden Bar and Kitchen"
            },
            {
               "offset" : 23,
               "value" : "Montague Road"
            },
            {
               "offset" : 38,
               "value" : "West End"
            },
            {
               "offset" : 47,
               "value" : "QLD"
            },
            {
               "offset" : 52,
               "value" : "Australia"
            }
         ],
         "types" : [ "bar", "restaurant", "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Cevizli, EHDİŞAM KÜNEFE, Bağdat Avenue, Maltepe/İstanbul, Turkey",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 9
            }
         ],
         "place_id" : "ChIJf77cLTfFyhQRuKKG51xaNGc",
         "reference" : "ChIJf77cLTfFyhQRuKKG51xaNGc",
         "structured_formatting" : {
            "main_text" : "EHDİŞAM KÜNEFE",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Cevizli, Bağdat Avenue, Maltepe/İstanbul, Turkey"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Cevizli"
            },
            {
               "offset" : 9,
               "value" : "EHDİŞAM KÜNEFE"
            },
            {
               "offset" : 25,
               "value" : "Bağdat Avenue"
            },
            {
               "offset" : 40,
               "value" : "Maltepe"
            },
            {
               "offset" : 48,
               "value" : "İstanbul"
            },
            {
               "offset" : 58,
               "value" : "Turkey"
            }
         ],
         "types" : [ "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Ehd-e-Wafa Marriage Lawn, Kausar Town Karachi, Pakistan",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJoaMkBmk3sz4Rhtxu-oPIwqg",
         "reference" : "ChIJoaMkBmk3sz4Rhtxu-oPIwqg",
         "structured_formatting" : {
            "main_text" : "Ehd-e-Wafa Marriage Lawn",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Kausar Town Karachi, Pakistan"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehd-e-Wafa Marriage Lawn"
            },
            {
               "offset" : 26,
               "value" : "Kausar Town"
            },
            {
               "offset" : 38,
               "value" : "Karachi"
            },
            {
               "offset" : 47,
               "value" : "Pakistan"
            }
         ],
         "types" : [ "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:07:24[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:24[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:07:24[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:07:24[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:07:24[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:07:24[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:07:24[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:44] - places: ehde
INFO  22-01-15 11:07:24[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=ehde
INFO  22-01-15 11:07:24[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Ehden, Lebanon",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJuyn-BRMDIhURkrKq7Hf0pIA",
         "reference" : "ChIJuyn-BRMDIhURkrKq7Hf0pIA",
         "structured_formatting" : {
            "main_text" : "Ehden",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Lebanon"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehden"
            },
            {
               "offset" : 7,
               "value" : "Lebanon"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Ehden Country Club, Ehden, Lebanon",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJozYaq_sCIhURHppXb66DUyI",
         "reference" : "ChIJozYaq_sCIhURHppXb66DUyI",
         "structured_formatting" : {
            "main_text" : "Ehden Country Club",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Ehden, Lebanon"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehden Country Club"
            },
            {
               "offset" : 20,
               "value" : "Ehden"
            },
            {
               "offset" : 27,
               "value" : "Lebanon"
            }
         ],
         "types" : [ "lodging", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Ehden Bar and Kitchen, Montague Road, West End QLD, Australia",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ_b5ba15RkWsRiIQVZyRAzlc",
         "reference" : "ChIJ_b5ba15RkWsRiIQVZyRAzlc",
         "structured_formatting" : {
            "main_text" : "Ehden Bar and Kitchen",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Montague Road, West End QLD, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehden Bar and Kitchen"
            },
            {
               "offset" : 23,
               "value" : "Montague Road"
            },
            {
               "offset" : 38,
               "value" : "West End"
            },
            {
               "offset" : 47,
               "value" : "QLD"
            },
            {
               "offset" : 52,
               "value" : "Australia"
            }
         ],
         "types" : [ "bar", "restaurant", "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Ehden, Ehden, Lebanon",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJk7X4jPwCIhURXLUd7NjxCWQ",
         "reference" : "ChIJk7X4jPwCIhURXLUd7NjxCWQ",
         "structured_formatting" : {
            "main_text" : "Ehden",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Ehden, Lebanon"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehden"
            },
            {
               "offset" : 7,
               "value" : "Ehden"
            },
            {
               "offset" : 14,
               "value" : "Lebanon"
            }
         ],
         "types" : [ "point_of_interest", "establishment" ]
      },
      {
         "description" : "Ehden Downtown, Ehden, Lebanon",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJWdF7xBoDIhUR7kX6NL30XM8",
         "reference" : "ChIJWdF7xBoDIhUR7kX6NL30XM8",
         "structured_formatting" : {
            "main_text" : "Ehden Downtown",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Ehden, Lebanon"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Ehden Downtown"
            },
            {
               "offset" : 16,
               "value" : "Ehden"
            },
            {
               "offset" : 23,
               "value" : "Lebanon"
            }
         ],
         "types" : [ "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:07:31[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:31[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 11:07:31[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:07:31[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:07:31[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 11:07:31[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 11:07:31[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:31[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:07:31[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 11:07:33[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:33[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:07:33[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:07:33[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:07:33[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:07:33[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:07:33[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:44] - places: ㄷ
INFO  22-01-15 11:07:33[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=ㄷ
DEBUG 22-01-15 11:07:33[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:33[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 11:07:33[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:07:33[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:07:33[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:07:33[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:07:33[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:44] - places: 도
INFO  22-01-15 11:07:33[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=도
INFO  22-01-15 11:07:33[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Japan, Shizuoka, Shimoda, Gochome, 5−12−1 시모다 토큐 호텔",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 37
            },
            {
               "length" : 9,
               "offset" : 42
            }
         ],
         "place_id" : "ChIJGS8nUepYF2ARTPQTX2wS96A",
         "reference" : "ChIJGS8nUepYF2ARTPQTX2wS96A",
         "structured_formatting" : {
            "main_text" : "시모다 토큐 호텔",
            "main_text_matched_substrings" : [
               {
                  "length" : 9,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Japan, Shizuoka, Shimoda, Gochome, 5−12−1",
            "secondary_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 37
               }
            ]
         },
         "terms" : [
            {
               "offset" : 42,
               "value" : "시모다 토큐 호텔"
            },
            {
               "offset" : 37,
               "value" : "12−1"
            },
            {
               "offset" : 35,
               "value" : "5"
            },
            {
               "offset" : 26,
               "value" : "Gochome"
            },
            {
               "offset" : 17,
               "value" : "Shimoda"
            },
            {
               "offset" : 7,
               "value" : "Shizuoka"
            },
            {
               "offset" : 0,
               "value" : "Japan"
            }
         ],
         "types" : [ "lodging", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Gwangju, Dong-gu, Sansu-dong, 번지 1호 ㅊ-ㄷ 우장모님네",
         "matched_substrings" : [
            {
               "length" : 5,
               "offset" : 53
            }
         ],
         "place_id" : "ChIJiUXwTZSMcTURxCpjcQcNEo8",
         "reference" : "ChIJiUXwTZSMcTURxCpjcQcNEo8",
         "structured_formatting" : {
            "main_text" : "우장모님네",
            "main_text_matched_substrings" : [
               {
                  "length" : 5,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gwangju, Dong-gu, Sansu-dong, 번지 1호 ㅊ-ㄷ"
         },
         "terms" : [
            {
               "offset" : 53,
               "value" : "우장모님네"
            },
            {
               "offset" : 49,
               "value" : "ㅊ-ㄷ"
            },
            {
               "offset" : 43,
               "value" : "번지 1호"
            },
            {
               "offset" : 31,
               "value" : "Sansu-dong"
            },
            {
               "offset" : 22,
               "value" : "Dong-gu"
            },
            {
               "offset" : 13,
               "value" : "Gwangju"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "restaurant", "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Jeju-do, Seogwipo-si, Andeok-myeon, Sagyenam-ro216beon-gil, ㄷㅡㄹㅐㄱㅗㄴㅎㅏㅅㄷㅗㄱㅡ",
         "matched_substrings" : [
            {
               "length" : 14,
               "offset" : 73
            }
         ],
         "place_id" : "ChIJ9briDztDDDURXSgDhQy5P5M",
         "reference" : "ChIJ9briDztDDDURXSgDhQy5P5M",
         "structured_formatting" : {
            "main_text" : "ㄷㅡㄹㅐㄱㅗㄴㅎㅏㅅㄷㅗㄱㅡ",
            "main_text_matched_substrings" : [
               {
                  "length" : 14,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Jeju-do, Seogwipo-si, Andeok-myeon, Sagyenam-ro216beon-gil"
         },
         "terms" : [
            {
               "offset" : 73,
               "value" : "ㄷㅡㄹㅐㄱㅗㄴㅎㅏㅅㄷㅗㄱㅡ"
            },
            {
               "offset" : 49,
               "value" : "Sagyenam-ro216beon-gil"
            },
            {
               "offset" : 35,
               "value" : "Andeok-myeon"
            },
            {
               "offset" : 22,
               "value" : "Seogwipo-si"
            },
            {
               "offset" : 13,
               "value" : "Jeju-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "restaurant", "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Gyeongsangbuk-do, Gyeongsan-si, Jain-myeon, Danbuk 1-gil, 대경대학교",
         "matched_substrings" : [
            {
               "length" : 5,
               "offset" : 71
            }
         ],
         "place_id" : "ChIJWSO8doESZjURd62ariEefg0",
         "reference" : "ChIJWSO8doESZjURd62ariEefg0",
         "structured_formatting" : {
            "main_text" : "대경대학교",
            "main_text_matched_substrings" : [
               {
                  "length" : 5,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gyeongsangbuk-do, Gyeongsan-si, Jain-myeon, Danbuk 1-gil"
         },
         "terms" : [
            {
               "offset" : 71,
               "value" : "대경대학교"
            },
            {
               "offset" : 57,
               "value" : "Danbuk 1-gil"
            },
            {
               "offset" : 45,
               "value" : "Jain-myeon"
            },
            {
               "offset" : 31,
               "value" : "Gyeongsan-si"
            },
            {
               "offset" : 13,
               "value" : "Gyeongsangbuk-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "university", "university", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, 대림미술관",
         "matched_substrings" : [
            {
               "length" : 5,
               "offset" : 31
            }
         ],
         "place_id" : "ChIJid45GuqifDUR8KZ5et7ShA8",
         "reference" : "ChIJid45GuqifDUR8KZ5et7ShA8",
         "structured_formatting" : {
            "main_text" : "대림미술관",
            "main_text_matched_substrings" : [
               {
                  "length" : 5,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu"
         },
         "terms" : [
            {
               "offset" : 31,
               "value" : "대림미술관"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "museum", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:07:33[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:07:33[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:07:33[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:07:33[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:07:33[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:07:33[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:07:33[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:44] - places: 동
INFO  22-01-15 11:07:33[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동
INFO  22-01-15 11:07:34[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Japan, Tokyo, 도쿄",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 14
            }
         ],
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "reference" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "structured_formatting" : {
            "main_text" : "도쿄",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Japan, Tokyo"
         },
         "terms" : [
            {
               "offset" : 14,
               "value" : "도쿄"
            },
            {
               "offset" : 7,
               "value" : "Tokyo"
            },
            {
               "offset" : 0,
               "value" : "Japan"
            }
         ],
         "types" : [ "colloquial_area", "locality", "political", "geocode" ]
      },
      {
         "description" : "도미니카 공화국",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ9bbx3jiIr44R4PcNBiQPAqY",
         "reference" : "ChIJ9bbx3jiIr44R4PcNBiQPAqY",
         "structured_formatting" : {
            "main_text" : "도미니카 공화국",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ]
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "도미니카 공화국"
            }
         ],
         "types" : [ "country", "political", "geocode" ]
      },
      {
         "description" : "Japan, Tokyo, Ota City, Hanedakuko, 도쿄 국제 공항 (HND)",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 36
            }
         ],
         "place_id" : "ChIJ45IxpAtkGGAR3_hG0anDMg0",
         "reference" : "ChIJ45IxpAtkGGAR3_hG0anDMg0",
         "structured_formatting" : {
            "main_text" : "도쿄 국제 공항 (HND)",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Japan, Tokyo, Ota City, Hanedakuko"
         },
         "terms" : [
            {
               "offset" : 36,
               "value" : "도쿄 국제 공항 (HND)"
            },
            {
               "offset" : 24,
               "value" : "Hanedakuko"
            },
            {
               "offset" : 14,
               "value" : "Ota City"
            },
            {
               "offset" : 7,
               "value" : "Tokyo"
            },
            {
               "offset" : 0,
               "value" : "Japan"
            }
         ],
         "types" : [ "airport", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Qatar, 도하",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJf-jc_zTFRT4RsdTPeJ8x2UQ",
         "reference" : "ChIJf-jc_zTFRT4RsdTPeJ8x2UQ",
         "structured_formatting" : {
            "main_text" : "도하",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Qatar"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "도하"
            },
            {
               "offset" : 0,
               "value" : "Qatar"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Japan, 도쿄도",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "reference" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "structured_formatting" : {
            "main_text" : "도쿄도",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Japan"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "도쿄도"
            },
            {
               "offset" : 0,
               "value" : "Japan"
            }
         ],
         "types" : [ "administrative_area_level_1", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

INFO  22-01-15 11:07:34[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "동티모르",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJKaHkhgnl_SwRPFvoh4PG5QM",
         "reference" : "ChIJKaHkhgnl_SwRPFvoh4PG5QM",
         "structured_formatting" : {
            "main_text" : "동티모르",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ]
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "동티모르"
            }
         ],
         "types" : [ "country", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Gyeonggi-do, 동두천",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 26
            }
         ],
         "place_id" : "ChIJA3bo8tPbfDURe_pZYu-eBgo",
         "reference" : "ChIJA3bo8tPbfDURe_pZYu-eBgo",
         "structured_formatting" : {
            "main_text" : "동두천",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gyeonggi-do"
         },
         "terms" : [
            {
               "offset" : 26,
               "value" : "동두천"
            },
            {
               "offset" : 13,
               "value" : "Gyeonggi-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Jeju-do, Seogwipo-si, Namwon-eup, Sinrye-ri, 동백포레스트",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 58
            }
         ],
         "place_id" : "ChIJWbF6tpWqDTURrx0lRMOV3BQ",
         "reference" : "ChIJWbF6tpWqDTURrx0lRMOV3BQ",
         "structured_formatting" : {
            "main_text" : "동백포레스트",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Jeju-do, Seogwipo-si, Namwon-eup, Sinrye-ri"
         },
         "terms" : [
            {
               "offset" : 58,
               "value" : "동백포레스트"
            },
            {
               "offset" : 47,
               "value" : "Sinrye-ri"
            },
            {
               "offset" : 35,
               "value" : "Namwon-eup"
            },
            {
               "offset" : 22,
               "value" : "Seogwipo-si"
            },
            {
               "offset" : 13,
               "value" : "Jeju-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Daegu, Jung-gu, 동성로",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 29
            }
         ],
         "place_id" : "ChIJ4QLcocTjZTURtiuqkqSyWjM",
         "reference" : "ChIJ4QLcocTjZTURtiuqkqSyWjM",
         "structured_formatting" : {
            "main_text" : "Jung-gu, 동성로",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 9
               }
            ],
            "secondary_text" : "South Korea, Daegu"
         },
         "terms" : [
            {
               "offset" : 29,
               "value" : "동성로"
            },
            {
               "offset" : 20,
               "value" : "Jung-gu"
            },
            {
               "offset" : 13,
               "value" : "Daegu"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_4", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Gangwon-do, 동해",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 25
            }
         ],
         "place_id" : "ChIJ4UImuqy4YTURJwC6wLPP2_E",
         "reference" : "ChIJ4UImuqy4YTURJwC6wLPP2_E",
         "structured_formatting" : {
            "main_text" : "동해",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gangwon-do"
         },
         "terms" : [
            {
               "offset" : 25,
               "value" : "동해"
            },
            {
               "offset" : 13,
               "value" : "Gangwon-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:08:15[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:15[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:08:15[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:15[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:15[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 11:08:15[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 11:08:15[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:15[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:08:15[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 11:08:17[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:17[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 11:08:17[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:17[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:17[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:17[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:17[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:44] - places: e
INFO  22-01-15 11:08:17[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=e
INFO  22-01-15 11:08:18[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "El Paso, TX, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJaTv-xYs_54YRIgKdq-OEkeM",
         "reference" : "ChIJaTv-xYs_54YRIgKdq-OEkeM",
         "structured_formatting" : {
            "main_text" : "El Paso",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "TX, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "El Paso"
            },
            {
               "offset" : 9,
               "value" : "TX"
            },
            {
               "offset" : 13,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Edinburgh, UK",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJIyaYpQC4h0gRJxfnfHsU8mQ",
         "reference" : "ChIJIyaYpQC4h0gRJxfnfHsU8mQ",
         "structured_formatting" : {
            "main_text" : "Edinburgh",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "UK"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Edinburgh"
            },
            {
               "offset" : 11,
               "value" : "UK"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Essen, Germany",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJOfarlrfCuEcRnSytpBHhAGo",
         "reference" : "ChIJOfarlrfCuEcRnSytpBHhAGo",
         "structured_formatting" : {
            "main_text" : "Essen",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Germany"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Essen"
            },
            {
               "offset" : 7,
               "value" : "Germany"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Edmonton, AB, Canada",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJI__egEUioFMRXRX2SgygH0E",
         "reference" : "ChIJI__egEUioFMRXRX2SgygH0E",
         "structured_formatting" : {
            "main_text" : "Edmonton",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "AB, Canada"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Edmonton"
            },
            {
               "offset" : 10,
               "value" : "AB"
            },
            {
               "offset" : 14,
               "value" : "Canada"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Eindhoven, Netherlands",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJn8N5VRvZxkcRmLlkgWTSmvM",
         "reference" : "ChIJn8N5VRvZxkcRmLlkgWTSmvM",
         "structured_formatting" : {
            "main_text" : "Eindhoven",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Netherlands"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Eindhoven"
            },
            {
               "offset" : 11,
               "value" : "Netherlands"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:44] - places: ㄷ
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=ㄷ
DEBUG 22-01-15 11:08:19[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:08:19[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:19[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:19[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:19[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:19[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:44] - places: 도
INFO  22-01-15 11:08:19[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=도
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Japan, Shizuoka, Shimoda, Gochome, 5−12−1 시모다 토큐 호텔",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 37
            },
            {
               "length" : 9,
               "offset" : 42
            }
         ],
         "place_id" : "ChIJGS8nUepYF2ARTPQTX2wS96A",
         "reference" : "ChIJGS8nUepYF2ARTPQTX2wS96A",
         "structured_formatting" : {
            "main_text" : "시모다 토큐 호텔",
            "main_text_matched_substrings" : [
               {
                  "length" : 9,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Japan, Shizuoka, Shimoda, Gochome, 5−12−1",
            "secondary_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 37
               }
            ]
         },
         "terms" : [
            {
               "offset" : 42,
               "value" : "시모다 토큐 호텔"
            },
            {
               "offset" : 37,
               "value" : "12−1"
            },
            {
               "offset" : 35,
               "value" : "5"
            },
            {
               "offset" : 26,
               "value" : "Gochome"
            },
            {
               "offset" : 17,
               "value" : "Shimoda"
            },
            {
               "offset" : 7,
               "value" : "Shizuoka"
            },
            {
               "offset" : 0,
               "value" : "Japan"
            }
         ],
         "types" : [ "lodging", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Gwangju, Dong-gu, Sansu-dong, 번지 1호 ㅊ-ㄷ 우장모님네",
         "matched_substrings" : [
            {
               "length" : 5,
               "offset" : 53
            }
         ],
         "place_id" : "ChIJiUXwTZSMcTURxCpjcQcNEo8",
         "reference" : "ChIJiUXwTZSMcTURxCpjcQcNEo8",
         "structured_formatting" : {
            "main_text" : "우장모님네",
            "main_text_matched_substrings" : [
               {
                  "length" : 5,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gwangju, Dong-gu, Sansu-dong, 번지 1호 ㅊ-ㄷ"
         },
         "terms" : [
            {
               "offset" : 53,
               "value" : "우장모님네"
            },
            {
               "offset" : 49,
               "value" : "ㅊ-ㄷ"
            },
            {
               "offset" : 43,
               "value" : "번지 1호"
            },
            {
               "offset" : 31,
               "value" : "Sansu-dong"
            },
            {
               "offset" : 22,
               "value" : "Dong-gu"
            },
            {
               "offset" : 13,
               "value" : "Gwangju"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "restaurant", "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Jeju-do, Seogwipo-si, Andeok-myeon, Sagyenam-ro216beon-gil, ㄷㅡㄹㅐㄱㅗㄴㅎㅏㅅㄷㅗㄱㅡ",
         "matched_substrings" : [
            {
               "length" : 14,
               "offset" : 73
            }
         ],
         "place_id" : "ChIJ9briDztDDDURXSgDhQy5P5M",
         "reference" : "ChIJ9briDztDDDURXSgDhQy5P5M",
         "structured_formatting" : {
            "main_text" : "ㄷㅡㄹㅐㄱㅗㄴㅎㅏㅅㄷㅗㄱㅡ",
            "main_text_matched_substrings" : [
               {
                  "length" : 14,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Jeju-do, Seogwipo-si, Andeok-myeon, Sagyenam-ro216beon-gil"
         },
         "terms" : [
            {
               "offset" : 73,
               "value" : "ㄷㅡㄹㅐㄱㅗㄴㅎㅏㅅㄷㅗㄱㅡ"
            },
            {
               "offset" : 49,
               "value" : "Sagyenam-ro216beon-gil"
            },
            {
               "offset" : 35,
               "value" : "Andeok-myeon"
            },
            {
               "offset" : 22,
               "value" : "Seogwipo-si"
            },
            {
               "offset" : 13,
               "value" : "Jeju-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "restaurant", "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Gyeongsangbuk-do, Gyeongsan-si, Jain-myeon, Danbuk 1-gil, 대경대학교",
         "matched_substrings" : [
            {
               "length" : 5,
               "offset" : 71
            }
         ],
         "place_id" : "ChIJWSO8doESZjURd62ariEefg0",
         "reference" : "ChIJWSO8doESZjURd62ariEefg0",
         "structured_formatting" : {
            "main_text" : "대경대학교",
            "main_text_matched_substrings" : [
               {
                  "length" : 5,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gyeongsangbuk-do, Gyeongsan-si, Jain-myeon, Danbuk 1-gil"
         },
         "terms" : [
            {
               "offset" : 71,
               "value" : "대경대학교"
            },
            {
               "offset" : 57,
               "value" : "Danbuk 1-gil"
            },
            {
               "offset" : 45,
               "value" : "Jain-myeon"
            },
            {
               "offset" : 31,
               "value" : "Gyeongsan-si"
            },
            {
               "offset" : 13,
               "value" : "Gyeongsangbuk-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "university", "university", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, 대림미술관",
         "matched_substrings" : [
            {
               "length" : 5,
               "offset" : 31
            }
         ],
         "place_id" : "ChIJid45GuqifDUR8KZ5et7ShA8",
         "reference" : "ChIJid45GuqifDUR8KZ5et7ShA8",
         "structured_formatting" : {
            "main_text" : "대림미술관",
            "main_text_matched_substrings" : [
               {
                  "length" : 5,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu"
         },
         "terms" : [
            {
               "offset" : 31,
               "value" : "대림미술관"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "museum", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

INFO  22-01-15 11:08:19[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Japan, Tokyo, 도쿄",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 14
            }
         ],
         "place_id" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "reference" : "ChIJXSModoWLGGARILWiCfeu2M0",
         "structured_formatting" : {
            "main_text" : "도쿄",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Japan, Tokyo"
         },
         "terms" : [
            {
               "offset" : 14,
               "value" : "도쿄"
            },
            {
               "offset" : 7,
               "value" : "Tokyo"
            },
            {
               "offset" : 0,
               "value" : "Japan"
            }
         ],
         "types" : [ "colloquial_area", "locality", "political", "geocode" ]
      },
      {
         "description" : "도미니카 공화국",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ9bbx3jiIr44R4PcNBiQPAqY",
         "reference" : "ChIJ9bbx3jiIr44R4PcNBiQPAqY",
         "structured_formatting" : {
            "main_text" : "도미니카 공화국",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ]
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "도미니카 공화국"
            }
         ],
         "types" : [ "country", "political", "geocode" ]
      },
      {
         "description" : "Japan, Tokyo, Ota City, Hanedakuko, 도쿄 국제 공항 (HND)",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 36
            }
         ],
         "place_id" : "ChIJ45IxpAtkGGAR3_hG0anDMg0",
         "reference" : "ChIJ45IxpAtkGGAR3_hG0anDMg0",
         "structured_formatting" : {
            "main_text" : "도쿄 국제 공항 (HND)",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Japan, Tokyo, Ota City, Hanedakuko"
         },
         "terms" : [
            {
               "offset" : 36,
               "value" : "도쿄 국제 공항 (HND)"
            },
            {
               "offset" : 24,
               "value" : "Hanedakuko"
            },
            {
               "offset" : 14,
               "value" : "Ota City"
            },
            {
               "offset" : 7,
               "value" : "Tokyo"
            },
            {
               "offset" : 0,
               "value" : "Japan"
            }
         ],
         "types" : [ "airport", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Qatar, 도하",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJf-jc_zTFRT4RsdTPeJ8x2UQ",
         "reference" : "ChIJf-jc_zTFRT4RsdTPeJ8x2UQ",
         "structured_formatting" : {
            "main_text" : "도하",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Qatar"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "도하"
            },
            {
               "offset" : 0,
               "value" : "Qatar"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Japan, 도쿄도",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "reference" : "ChIJ51cu8IcbXWARiRtXIothAS4",
         "structured_formatting" : {
            "main_text" : "도쿄도",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Japan"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "도쿄도"
            },
            {
               "offset" : 0,
               "value" : "Japan"
            }
         ],
         "types" : [ "administrative_area_level_1", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:44] - places: 동
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "동티모르",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJKaHkhgnl_SwRPFvoh4PG5QM",
         "reference" : "ChIJKaHkhgnl_SwRPFvoh4PG5QM",
         "structured_formatting" : {
            "main_text" : "동티모르",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ]
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "동티모르"
            }
         ],
         "types" : [ "country", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Gyeonggi-do, 동두천",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 26
            }
         ],
         "place_id" : "ChIJA3bo8tPbfDURe_pZYu-eBgo",
         "reference" : "ChIJA3bo8tPbfDURe_pZYu-eBgo",
         "structured_formatting" : {
            "main_text" : "동두천",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gyeonggi-do"
         },
         "terms" : [
            {
               "offset" : 26,
               "value" : "동두천"
            },
            {
               "offset" : 13,
               "value" : "Gyeonggi-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Jeju-do, Seogwipo-si, Namwon-eup, Sinrye-ri, 동백포레스트",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 58
            }
         ],
         "place_id" : "ChIJWbF6tpWqDTURrx0lRMOV3BQ",
         "reference" : "ChIJWbF6tpWqDTURrx0lRMOV3BQ",
         "structured_formatting" : {
            "main_text" : "동백포레스트",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Jeju-do, Seogwipo-si, Namwon-eup, Sinrye-ri"
         },
         "terms" : [
            {
               "offset" : 58,
               "value" : "동백포레스트"
            },
            {
               "offset" : 47,
               "value" : "Sinrye-ri"
            },
            {
               "offset" : 35,
               "value" : "Namwon-eup"
            },
            {
               "offset" : 22,
               "value" : "Seogwipo-si"
            },
            {
               "offset" : 13,
               "value" : "Jeju-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Daegu, Jung-gu, 동성로",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 29
            }
         ],
         "place_id" : "ChIJ4QLcocTjZTURtiuqkqSyWjM",
         "reference" : "ChIJ4QLcocTjZTURtiuqkqSyWjM",
         "structured_formatting" : {
            "main_text" : "Jung-gu, 동성로",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 9
               }
            ],
            "secondary_text" : "South Korea, Daegu"
         },
         "terms" : [
            {
               "offset" : 29,
               "value" : "동성로"
            },
            {
               "offset" : 20,
               "value" : "Jung-gu"
            },
            {
               "offset" : 13,
               "value" : "Daegu"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_4", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Gangwon-do, 동해",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 25
            }
         ],
         "place_id" : "ChIJ4UImuqy4YTURJwC6wLPP2_E",
         "reference" : "ChIJ4UImuqy4YTURJwC6wLPP2_E",
         "structured_formatting" : {
            "main_text" : "동해",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gangwon-do"
         },
         "terms" : [
            {
               "offset" : 25,
               "value" : "동해"
            },
            {
               "offset" : 13,
               "value" : "Gangwon-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:08:19[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:19[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:19[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:19[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:19[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:44] - places: 동ㄷ
INFO  22-01-15 11:08:19[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동ㄷ
DEBUG 22-01-15 11:08:19[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 11:08:19[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:19[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:19[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:19[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:19[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:44] - places: 동대
INFO  22-01-15 11:08:19[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대
DEBUG 22-01-15 11:08:19[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:08:19[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:19[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:19[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:19[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:19[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:44] - places: 동댐
INFO  22-01-15 11:08:19[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동댐
INFO  22-01-15 11:08:19[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [],
   "status" : "ZERO_RESULTS"
}

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:44] - places: 동대무
INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대무
INFO  22-01-15 11:08:19[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Daegu, Dong-gu, Dongdaegu-ro, 동대구역",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 43
            }
         ],
         "place_id" : "ChIJn3vIRZLhZTURjCyBkWOrHDk",
         "reference" : "ChIJn3vIRZLhZTURjCyBkWOrHDk",
         "structured_formatting" : {
            "main_text" : "동대구역",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Daegu, Dong-gu, Dongdaegu-ro"
         },
         "terms" : [
            {
               "offset" : 43,
               "value" : "동대구역"
            },
            {
               "offset" : 29,
               "value" : "Dongdaegu-ro"
            },
            {
               "offset" : 20,
               "value" : "Dong-gu"
            },
            {
               "offset" : 13,
               "value" : "Daegu"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [
            "train_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:44] - places: 동대문
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
DEBUG 22-01-15 11:08:19[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
104. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

INFO  22-01-15 11:08:19[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, 신관 종합시장 동댐힐링카페",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 43
            }
         ],
         "place_id" : "ChIJ96AKNDujfDURCznLU4Zbgvo",
         "reference" : "ChIJ96AKNDujfDURCznLU4Zbgvo",
         "structured_formatting" : {
            "main_text" : "동댐힐링카페",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, 신관 종합시장"
         },
         "terms" : [
            {
               "offset" : 43,
               "value" : "동댐힐링카페"
            },
            {
               "offset" : 38,
               "value" : "종합시장"
            },
            {
               "offset" : 35,
               "value" : "신관"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "cafe", "food", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:08:19[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
104. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:08:19[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:19[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:19[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:19[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:19[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:44] - places: 동대
INFO  22-01-15 11:08:19[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대
INFO  22-01-15 11:08:19[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

INFO  22-01-15 11:08:19[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Busan, 동대무역",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJtflZIJTpaDURHnJgFwkKB9E",
         "reference" : "ChIJtflZIJTpaDURHnJgFwkKB9E",
         "structured_formatting" : {
            "main_text" : "동대무역",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Busan"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대무역"
            },
            {
               "offset" : 13,
               "value" : "Busan"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "point_of_interest", "establishment" ]
      },
      {
         "description" : "무대 near Hamyang-gun, 동대",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            },
            {
               "length" : 2,
               "offset" : 21
            }
         ],
         "structured_formatting" : {
            "main_text" : "무대",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "near Hamyang-gun, 동대",
            "secondary_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 18
               }
            ]
         },
         "terms" : [
            {
               "offset" : 21,
               "value" : "동대"
            },
            {
               "offset" : 8,
               "value" : "Hamyang-gun"
            },
            {
               "offset" : 3,
               "value" : "near"
            },
            {
               "offset" : 0,
               "value" : "무대"
            }
         ]
      },
      {
         "description" : "무대 near Namhae-gun, 동대",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            },
            {
               "length" : 2,
               "offset" : 20
            }
         ],
         "structured_formatting" : {
            "main_text" : "무대",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "near Namhae-gun, 동대",
            "secondary_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 17
               }
            ]
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대"
            },
            {
               "offset" : 8,
               "value" : "Namhae-gun"
            },
            {
               "offset" : 3,
               "value" : "near"
            },
            {
               "offset" : 0,
               "value" : "무대"
            }
         ]
      },
      {
         "description" : "무대 near South Korea, Seoul, Gwangjin-gu, Junggok-dong, 동대교회",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            },
            {
               "length" : 2,
               "offset" : 55
            }
         ],
         "structured_formatting" : {
            "main_text" : "무대",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "near South Korea, Seoul, Gwangjin-gu, Junggok-dong, 동대교회",
            "secondary_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 52
               }
            ]
         },
         "terms" : [
            {
               "offset" : 55,
               "value" : "동대교회"
            },
            {
               "offset" : 41,
               "value" : "Junggok-dong"
            },
            {
               "offset" : 28,
               "value" : "Gwangjin-gu"
            },
            {
               "offset" : 21,
               "value" : "Seoul"
            },
            {
               "offset" : 8,
               "value" : "South Korea"
            },
            {
               "offset" : 3,
               "value" : "near"
            },
            {
               "offset" : 0,
               "value" : "무대"
            }
         ]
      },
      {
         "description" : "무대 near South Korea, Chungcheongnam-do, Boryeong-si, Dongdae-dong, 동대침례교회",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            },
            {
               "length" : 2,
               "offset" : 67
            }
         ],
         "structured_formatting" : {
            "main_text" : "무대",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "near South Korea, Chungcheongnam-do, Boryeong-si, Dongdae-dong, 동대침례교회",
            "secondary_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 64
               }
            ]
         },
         "terms" : [
            {
               "offset" : 67,
               "value" : "동대침례교회"
            },
            {
               "offset" : 53,
               "value" : "Dongdae-dong"
            },
            {
               "offset" : 40,
               "value" : "Boryeong-si"
            },
            {
               "offset" : 21,
               "value" : "Chungcheongnam-do"
            },
            {
               "offset" : 8,
               "value" : "South Korea"
            },
            {
               "offset" : 3,
               "value" : "near"
            },
            {
               "offset" : 0,
               "value" : "무대"
            }
         ]
      }
   ],
   "status" : "OK"
}

INFO  22-01-15 11:08:19[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Daegu, Dong-gu, Dongdaegu-ro, 동대구역",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 43
            }
         ],
         "place_id" : "ChIJn3vIRZLhZTURjCyBkWOrHDk",
         "reference" : "ChIJn3vIRZLhZTURjCyBkWOrHDk",
         "structured_formatting" : {
            "main_text" : "동대구역",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Daegu, Dong-gu, Dongdaegu-ro"
         },
         "terms" : [
            {
               "offset" : 43,
               "value" : "동대구역"
            },
            {
               "offset" : 29,
               "value" : "Dongdaegu-ro"
            },
            {
               "offset" : 20,
               "value" : "Dong-gu"
            },
            {
               "offset" : 13,
               "value" : "Daegu"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [
            "train_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:08:35[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:08:35[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:08:35[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:08:35[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:08:35[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:08:35[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:08:35[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:44] - places: 동대문
INFO  22-01-15 11:08:35[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 11:08:36[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:09:31[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:31[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:09:31[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:31[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:31[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:09:31[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:09:31[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:44] - places: 동대문
INFO  22-01-15 11:09:31[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
DEBUG 22-01-15 11:09:31[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:31[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:09:31[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:31[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:31[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 11:09:31[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 11:09:31[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:31[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 3 msec}
INFO  22-01-15 11:09:31[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:31[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:09:40[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:40[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:09:40[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:40[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:40[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:09:40[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:09:40[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:44] - places: 동대
INFO  22-01-15 11:09:40[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대
INFO  22-01-15 11:09:40[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Daegu, Dong-gu, Dongdaegu-ro, 동대구역",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 43
            }
         ],
         "place_id" : "ChIJn3vIRZLhZTURjCyBkWOrHDk",
         "reference" : "ChIJn3vIRZLhZTURjCyBkWOrHDk",
         "structured_formatting" : {
            "main_text" : "동대구역",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Daegu, Dong-gu, Dongdaegu-ro"
         },
         "terms" : [
            {
               "offset" : 43,
               "value" : "동대구역"
            },
            {
               "offset" : 29,
               "value" : "Dongdaegu-ro"
            },
            {
               "offset" : 20,
               "value" : "Dong-gu"
            },
            {
               "offset" : 13,
               "value" : "Daegu"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [
            "train_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:09:40[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:40[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:09:40[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:40[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:40[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:09:40[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:09:40[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:44] - places: 동
INFO  22-01-15 11:09:40[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동
INFO  22-01-15 11:09:40[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "동티모르",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJKaHkhgnl_SwRPFvoh4PG5QM",
         "reference" : "ChIJKaHkhgnl_SwRPFvoh4PG5QM",
         "structured_formatting" : {
            "main_text" : "동티모르",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ]
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "동티모르"
            }
         ],
         "types" : [ "country", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Gyeonggi-do, 동두천",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 26
            }
         ],
         "place_id" : "ChIJA3bo8tPbfDURe_pZYu-eBgo",
         "reference" : "ChIJA3bo8tPbfDURe_pZYu-eBgo",
         "structured_formatting" : {
            "main_text" : "동두천",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gyeonggi-do"
         },
         "terms" : [
            {
               "offset" : 26,
               "value" : "동두천"
            },
            {
               "offset" : 13,
               "value" : "Gyeonggi-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Jeju-do, Seogwipo-si, Namwon-eup, Sinrye-ri, 동백포레스트",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 58
            }
         ],
         "place_id" : "ChIJWbF6tpWqDTURrx0lRMOV3BQ",
         "reference" : "ChIJWbF6tpWqDTURrx0lRMOV3BQ",
         "structured_formatting" : {
            "main_text" : "동백포레스트",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Jeju-do, Seogwipo-si, Namwon-eup, Sinrye-ri"
         },
         "terms" : [
            {
               "offset" : 58,
               "value" : "동백포레스트"
            },
            {
               "offset" : 47,
               "value" : "Sinrye-ri"
            },
            {
               "offset" : 35,
               "value" : "Namwon-eup"
            },
            {
               "offset" : 22,
               "value" : "Seogwipo-si"
            },
            {
               "offset" : 13,
               "value" : "Jeju-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Daegu, Jung-gu, 동성로",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 29
            }
         ],
         "place_id" : "ChIJ4QLcocTjZTURtiuqkqSyWjM",
         "reference" : "ChIJ4QLcocTjZTURtiuqkqSyWjM",
         "structured_formatting" : {
            "main_text" : "Jung-gu, 동성로",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 9
               }
            ],
            "secondary_text" : "South Korea, Daegu"
         },
         "terms" : [
            {
               "offset" : 29,
               "value" : "동성로"
            },
            {
               "offset" : 20,
               "value" : "Jung-gu"
            },
            {
               "offset" : 13,
               "value" : "Daegu"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_4", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Gangwon-do, 동해",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 25
            }
         ],
         "place_id" : "ChIJ4UImuqy4YTURJwC6wLPP2_E",
         "reference" : "ChIJ4UImuqy4YTURJwC6wLPP2_E",
         "structured_formatting" : {
            "main_text" : "동해",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gangwon-do"
         },
         "terms" : [
            {
               "offset" : 25,
               "value" : "동해"
            },
            {
               "offset" : 13,
               "value" : "Gangwon-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:09:43[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
104. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:43[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
104. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:09:43[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:43[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:43[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:09:43[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:09:43[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:44] - places: s
INFO  22-01-15 11:09:43[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=s
INFO  22-01-15 11:09:43[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "San Antonio, TX, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJrw7QBK9YXIYRvBagEDvhVgg",
         "reference" : "ChIJrw7QBK9YXIYRvBagEDvhVgg",
         "structured_formatting" : {
            "main_text" : "San Antonio",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "TX, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "San Antonio"
            },
            {
               "offset" : 13,
               "value" : "TX"
            },
            {
               "offset" : 17,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "San Diego, CA, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJSx6SrQ9T2YARed8V_f0hOg0",
         "reference" : "ChIJSx6SrQ9T2YARed8V_f0hOg0",
         "structured_formatting" : {
            "main_text" : "San Diego",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "CA, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "San Diego"
            },
            {
               "offset" : 11,
               "value" : "CA"
            },
            {
               "offset" : 15,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "San Francisco, CA, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJIQBpAG2ahYAR_6128GcTUEo",
         "reference" : "ChIJIQBpAG2ahYAR_6128GcTUEo",
         "structured_formatting" : {
            "main_text" : "San Francisco",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "CA, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "San Francisco"
            },
            {
               "offset" : 15,
               "value" : "CA"
            },
            {
               "offset" : 19,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "reference" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "structured_formatting" : {
            "main_text" : "Sydney",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney"
            },
            {
               "offset" : 7,
               "value" : "NSW"
            },
            {
               "offset" : 12,
               "value" : "Australia"
            }
         ],
         "types" : [ "colloquial_area", "locality", "political", "geocode" ]
      },
      {
         "description" : "Seattle, WA, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJVTPokywQkFQRmtVEaUZlJRA",
         "reference" : "ChIJVTPokywQkFQRmtVEaUZlJRA",
         "structured_formatting" : {
            "main_text" : "Seattle",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "WA, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Seattle"
            },
            {
               "offset" : 9,
               "value" : "WA"
            },
            {
               "offset" : 13,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:09:43[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:43[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 11:09:43[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:43[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:43[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:09:43[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:09:43[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:44] - places: sy
INFO  22-01-15 11:09:43[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=sy
DEBUG 22-01-15 11:09:44[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:44[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:09:44[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:44[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:44[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:09:44[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:09:44[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:44] - places: syd
INFO  22-01-15 11:09:44[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=syd
INFO  22-01-15 11:09:44[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "reference" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "structured_formatting" : {
            "main_text" : "Sydney",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney"
            },
            {
               "offset" : 7,
               "value" : "NSW"
            },
            {
               "offset" : 12,
               "value" : "Australia"
            }
         ],
         "types" : [ "colloquial_area", "locality", "political", "geocode" ]
      },
      {
         "description" : "Syracuse, NY, USA",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJDZqXv5vz2YkRRZWt1-IM1QA",
         "reference" : "ChIJDZqXv5vz2YkRRZWt1-IM1QA",
         "structured_formatting" : {
            "main_text" : "Syracuse",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NY, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Syracuse"
            },
            {
               "offset" : 10,
               "value" : "NY"
            },
            {
               "offset" : 14,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Sylhet, Bangladesh",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJnzJw0tNUUDcRgnP2MTT5jvU",
         "reference" : "ChIJnzJw0tNUUDcRgnP2MTT5jvU",
         "structured_formatting" : {
            "main_text" : "Sylhet",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Bangladesh"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sylhet"
            },
            {
               "offset" : 8,
               "value" : "Bangladesh"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Syria",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJp8Y8QdzmGBURIPYqiPRGdYc",
         "reference" : "ChIJp8Y8QdzmGBURIPYqiPRGdYc",
         "structured_formatting" : {
            "main_text" : "Syria",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ]
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Syria"
            }
         ],
         "types" : [ "country", "political", "geocode" ]
      },
      {
         "description" : "Sylvia Park Mount Wellington Highway, Mount Wellington, Auckland, New Zealand",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJq8xVy0dJDW0RDrwEDCn_4zA",
         "reference" : "ChIJq8xVy0dJDW0RDrwEDCn_4zA",
         "structured_formatting" : {
            "main_text" : "Sylvia Park",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Mount Wellington Highway, Mount Wellington, Auckland, New Zealand"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sylvia Park"
            },
            {
               "offset" : 12,
               "value" : "Mount Wellington Highway"
            },
            {
               "offset" : 38,
               "value" : "Mount Wellington"
            },
            {
               "offset" : 56,
               "value" : "Auckland"
            },
            {
               "offset" : 66,
               "value" : "New Zealand"
            }
         ],
         "types" : [ "shopping_mall", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

INFO  22-01-15 11:09:44[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "reference" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "structured_formatting" : {
            "main_text" : "Sydney",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney"
            },
            {
               "offset" : 7,
               "value" : "NSW"
            },
            {
               "offset" : 12,
               "value" : "Australia"
            }
         ],
         "types" : [ "colloquial_area", "locality", "political", "geocode" ]
      },
      {
         "description" : "Sydney Airport (SYD), Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ24MzG_GwEmsRd2VLWl01368",
         "reference" : "ChIJ24MzG_GwEmsRd2VLWl01368",
         "structured_formatting" : {
            "main_text" : "Sydney Airport (SYD)",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Sydney NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney Airport (SYD)"
            },
            {
               "offset" : 22,
               "value" : "Sydney"
            },
            {
               "offset" : 29,
               "value" : "NSW"
            },
            {
               "offset" : 34,
               "value" : "Australia"
            }
         ],
         "types" : [ "airport", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Sydney Olympic Park NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJhZxZzrikEmsRwLoyFmh9AQU",
         "reference" : "ChIJhZxZzrikEmsRwLoyFmh9AQU",
         "structured_formatting" : {
            "main_text" : "Sydney Olympic Park",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney Olympic Park"
            },
            {
               "offset" : 20,
               "value" : "NSW"
            },
            {
               "offset" : 25,
               "value" : "Australia"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Sydney Opera House, Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ3S-JXmauEmsRUcIaWtf4MzE",
         "reference" : "ChIJ3S-JXmauEmsRUcIaWtf4MzE",
         "structured_formatting" : {
            "main_text" : "Sydney Opera House",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Sydney NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney Opera House"
            },
            {
               "offset" : 20,
               "value" : "Sydney"
            },
            {
               "offset" : 27,
               "value" : "NSW"
            },
            {
               "offset" : 32,
               "value" : "Australia"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Sydney, NS, Canada",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJFTRyfjb7Z0sRh4Awe5tTg6c",
         "reference" : "ChIJFTRyfjb7Z0sRh4Awe5tTg6c",
         "structured_formatting" : {
            "main_text" : "Sydney",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NS, Canada"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney"
            },
            {
               "offset" : 8,
               "value" : "NS"
            },
            {
               "offset" : 12,
               "value" : "Canada"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:09:44[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:44[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:09:44[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:44[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:44[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:09:44[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:09:44[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:44] - places: sydn
INFO  22-01-15 11:09:44[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=sydn
INFO  22-01-15 11:09:44[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "reference" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "structured_formatting" : {
            "main_text" : "Sydney",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney"
            },
            {
               "offset" : 7,
               "value" : "NSW"
            },
            {
               "offset" : 12,
               "value" : "Australia"
            }
         ],
         "types" : [ "colloquial_area", "locality", "political", "geocode" ]
      },
      {
         "description" : "Sydney Airport (SYD), Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ24MzG_GwEmsRd2VLWl01368",
         "reference" : "ChIJ24MzG_GwEmsRd2VLWl01368",
         "structured_formatting" : {
            "main_text" : "Sydney Airport (SYD)",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Sydney NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney Airport (SYD)"
            },
            {
               "offset" : 22,
               "value" : "Sydney"
            },
            {
               "offset" : 29,
               "value" : "NSW"
            },
            {
               "offset" : 34,
               "value" : "Australia"
            }
         ],
         "types" : [ "airport", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Sydney Olympic Park NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJhZxZzrikEmsRwLoyFmh9AQU",
         "reference" : "ChIJhZxZzrikEmsRwLoyFmh9AQU",
         "structured_formatting" : {
            "main_text" : "Sydney Olympic Park",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney Olympic Park"
            },
            {
               "offset" : 20,
               "value" : "NSW"
            },
            {
               "offset" : 25,
               "value" : "Australia"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Sydney Opera House, Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ3S-JXmauEmsRUcIaWtf4MzE",
         "reference" : "ChIJ3S-JXmauEmsRUcIaWtf4MzE",
         "structured_formatting" : {
            "main_text" : "Sydney Opera House",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Sydney NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney Opera House"
            },
            {
               "offset" : 20,
               "value" : "Sydney"
            },
            {
               "offset" : 27,
               "value" : "NSW"
            },
            {
               "offset" : 32,
               "value" : "Australia"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Sydney, NS, Canada",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJFTRyfjb7Z0sRh4Awe5tTg6c",
         "reference" : "ChIJFTRyfjb7Z0sRh4Awe5tTg6c",
         "structured_formatting" : {
            "main_text" : "Sydney",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NS, Canada"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney"
            },
            {
               "offset" : 8,
               "value" : "NS"
            },
            {
               "offset" : 12,
               "value" : "Canada"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:09:47[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:47[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
103. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 11:09:47[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:47[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:47[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:09:47[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:09:47[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:44] - places: syd
INFO  22-01-15 11:09:47[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=syd
INFO  22-01-15 11:09:47[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "reference" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "structured_formatting" : {
            "main_text" : "Sydney",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney"
            },
            {
               "offset" : 7,
               "value" : "NSW"
            },
            {
               "offset" : 12,
               "value" : "Australia"
            }
         ],
         "types" : [ "colloquial_area", "locality", "political", "geocode" ]
      },
      {
         "description" : "Sydney Airport (SYD), Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ24MzG_GwEmsRd2VLWl01368",
         "reference" : "ChIJ24MzG_GwEmsRd2VLWl01368",
         "structured_formatting" : {
            "main_text" : "Sydney Airport (SYD)",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Sydney NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney Airport (SYD)"
            },
            {
               "offset" : 22,
               "value" : "Sydney"
            },
            {
               "offset" : 29,
               "value" : "NSW"
            },
            {
               "offset" : 34,
               "value" : "Australia"
            }
         ],
         "types" : [ "airport", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Sydney Olympic Park NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJhZxZzrikEmsRwLoyFmh9AQU",
         "reference" : "ChIJhZxZzrikEmsRwLoyFmh9AQU",
         "structured_formatting" : {
            "main_text" : "Sydney Olympic Park",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney Olympic Park"
            },
            {
               "offset" : 20,
               "value" : "NSW"
            },
            {
               "offset" : 25,
               "value" : "Australia"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Sydney Opera House, Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ3S-JXmauEmsRUcIaWtf4MzE",
         "reference" : "ChIJ3S-JXmauEmsRUcIaWtf4MzE",
         "structured_formatting" : {
            "main_text" : "Sydney Opera House",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Sydney NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney Opera House"
            },
            {
               "offset" : 20,
               "value" : "Sydney"
            },
            {
               "offset" : 27,
               "value" : "NSW"
            },
            {
               "offset" : 32,
               "value" : "Australia"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Sydney, NS, Canada",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJFTRyfjb7Z0sRh4Awe5tTg6c",
         "reference" : "ChIJFTRyfjb7Z0sRh4Awe5tTg6c",
         "structured_formatting" : {
            "main_text" : "Sydney",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NS, Canada"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney"
            },
            {
               "offset" : 8,
               "value" : "NS"
            },
            {
               "offset" : 12,
               "value" : "Canada"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:09:47[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:47[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
101. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 11:09:47[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:47[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:47[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:09:47[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:09:47[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:44] - places: sy
INFO  22-01-15 11:09:47[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=sy
INFO  22-01-15 11:09:47[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "reference" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "structured_formatting" : {
            "main_text" : "Sydney",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney"
            },
            {
               "offset" : 7,
               "value" : "NSW"
            },
            {
               "offset" : 12,
               "value" : "Australia"
            }
         ],
         "types" : [ "colloquial_area", "locality", "political", "geocode" ]
      },
      {
         "description" : "Syracuse, NY, USA",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJDZqXv5vz2YkRRZWt1-IM1QA",
         "reference" : "ChIJDZqXv5vz2YkRRZWt1-IM1QA",
         "structured_formatting" : {
            "main_text" : "Syracuse",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NY, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Syracuse"
            },
            {
               "offset" : 10,
               "value" : "NY"
            },
            {
               "offset" : 14,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Sylhet, Bangladesh",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJnzJw0tNUUDcRgnP2MTT5jvU",
         "reference" : "ChIJnzJw0tNUUDcRgnP2MTT5jvU",
         "structured_formatting" : {
            "main_text" : "Sylhet",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Bangladesh"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sylhet"
            },
            {
               "offset" : 8,
               "value" : "Bangladesh"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Syria",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJp8Y8QdzmGBURIPYqiPRGdYc",
         "reference" : "ChIJp8Y8QdzmGBURIPYqiPRGdYc",
         "structured_formatting" : {
            "main_text" : "Syria",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ]
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Syria"
            }
         ],
         "types" : [ "country", "political", "geocode" ]
      },
      {
         "description" : "Sylvia Park Mount Wellington Highway, Mount Wellington, Auckland, New Zealand",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJq8xVy0dJDW0RDrwEDCn_4zA",
         "reference" : "ChIJq8xVy0dJDW0RDrwEDCn_4zA",
         "structured_formatting" : {
            "main_text" : "Sylvia Park",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Mount Wellington Highway, Mount Wellington, Auckland, New Zealand"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sylvia Park"
            },
            {
               "offset" : 12,
               "value" : "Mount Wellington Highway"
            },
            {
               "offset" : 38,
               "value" : "Mount Wellington"
            },
            {
               "offset" : 56,
               "value" : "Auckland"
            },
            {
               "offset" : 66,
               "value" : "New Zealand"
            }
         ],
         "types" : [ "shopping_mall", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 11:09:47[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 11:09:47[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
102. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 11:09:47[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 11:09:47[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 11:09:47[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 11:09:47[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 11:09:47[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:44] - places: s
INFO  22-01-15 11:09:47[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=s
INFO  22-01-15 11:09:47[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "San Antonio, TX, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJrw7QBK9YXIYRvBagEDvhVgg",
         "reference" : "ChIJrw7QBK9YXIYRvBagEDvhVgg",
         "structured_formatting" : {
            "main_text" : "San Antonio",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "TX, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "San Antonio"
            },
            {
               "offset" : 13,
               "value" : "TX"
            },
            {
               "offset" : 17,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "San Diego, CA, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJSx6SrQ9T2YARed8V_f0hOg0",
         "reference" : "ChIJSx6SrQ9T2YARed8V_f0hOg0",
         "structured_formatting" : {
            "main_text" : "San Diego",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "CA, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "San Diego"
            },
            {
               "offset" : 11,
               "value" : "CA"
            },
            {
               "offset" : 15,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "San Francisco, CA, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJIQBpAG2ahYAR_6128GcTUEo",
         "reference" : "ChIJIQBpAG2ahYAR_6128GcTUEo",
         "structured_formatting" : {
            "main_text" : "San Francisco",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "CA, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "San Francisco"
            },
            {
               "offset" : 15,
               "value" : "CA"
            },
            {
               "offset" : 19,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Sydney NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "reference" : "ChIJP3Sa8ziYEmsRUKgyFmh9AQM",
         "structured_formatting" : {
            "main_text" : "Sydney",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Sydney"
            },
            {
               "offset" : 7,
               "value" : "NSW"
            },
            {
               "offset" : 12,
               "value" : "Australia"
            }
         ],
         "types" : [ "colloquial_area", "locality", "political", "geocode" ]
      },
      {
         "description" : "Seattle, WA, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJVTPokywQkFQRmtVEaUZlJRA",
         "reference" : "ChIJVTPokywQkFQRmtVEaUZlJRA",
         "structured_formatting" : {
            "main_text" : "Seattle",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "WA, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Seattle"
            },
            {
               "offset" : 9,
               "value" : "WA"
            },
            {
               "offset" : 13,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 17:19:15[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:19:15[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 7 msec}
INFO  22-01-15 17:19:15[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:19:15[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:19:15[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:19:15[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:19:15[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:44] - places: Recommanded places nearby
INFO  22-01-15 17:19:15[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby
ERROR 22-01-15 17:19:15[http-nio-8080-exec-9] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby] with root cause
java.net.URISyntaxException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:63)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:50)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$757703f4.getPlaces(<generated>)
	at jdk.internal.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 17:23:48[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:23:48[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:23:48[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:23:48[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:23:48[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:23:48[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:23:48[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:44] - places: Recommanded places nearby
INFO  22-01-15 17:23:48[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby
ERROR 22-01-15 17:23:48[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby] with root cause
java.net.URISyntaxException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:63)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:50)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$757703f4.getPlaces(<generated>)
	at jdk.internal.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 17:25:03[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:25:03[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:25:03[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:25:03[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:25:03[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:25:03[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:25:03[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:44] - places: Recommanded places nearby
INFO  22-01-15 17:25:03[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby
ERROR 22-01-15 17:25:03[http-nio-8080-exec-10] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby] with root cause
java.net.URISyntaxException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:63)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:50)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$757703f4.getPlaces(<generated>)
	at jdk.internal.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 17:25:08[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:25:08[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 17:25:08[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:25:08[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:25:08[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:25:08[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:25:08[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:44] - places: y
INFO  22-01-15 17:25:08[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=y
INFO  22-01-15 17:25:09[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "York, UK",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ8WWY4UDDeEgR0eRUiomrdEc",
         "reference" : "ChIJ8WWY4UDDeEgR0eRUiomrdEc",
         "structured_formatting" : {
            "main_text" : "York",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "UK"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "York"
            },
            {
               "offset" : 6,
               "value" : "UK"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Yorkdale Shopping Centre, Dufferin Street, Toronto, ON, Canada",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJoYAZDTQyK4gRuR4PYg_YSJk",
         "reference" : "ChIJoYAZDTQyK4gRuR4PYg_YSJk",
         "structured_formatting" : {
            "main_text" : "Yorkdale Shopping Centre",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Dufferin Street, Toronto, ON, Canada"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Yorkdale Shopping Centre"
            },
            {
               "offset" : 26,
               "value" : "Dufferin Street"
            },
            {
               "offset" : 43,
               "value" : "Toronto"
            },
            {
               "offset" : 52,
               "value" : "ON"
            },
            {
               "offset" : 56,
               "value" : "Canada"
            }
         ],
         "types" : [ "shopping_mall", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Yellowstone National Park, United States",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJVVVVVVXlUVMRu-GPNDD5qKw",
         "reference" : "ChIJVVVVVVXlUVMRu-GPNDD5qKw",
         "structured_formatting" : {
            "main_text" : "Yellowstone National Park",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "United States"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Yellowstone National Park"
            },
            {
               "offset" : 27,
               "value" : "United States"
            }
         ],
         "types" : [ "tourist_attraction", "park", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Yogyakarta, Yogyakarta City, Special Region of Yogyakarta, Indonesia",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJxWtbvYdXei4RcU9o09Q_ciE",
         "reference" : "ChIJxWtbvYdXei4RcU9o09Q_ciE",
         "structured_formatting" : {
            "main_text" : "Yogyakarta",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Yogyakarta City, Special Region of Yogyakarta, Indonesia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Yogyakarta"
            },
            {
               "offset" : 12,
               "value" : "Yogyakarta City"
            },
            {
               "offset" : 29,
               "value" : "Special Region of Yogyakarta"
            },
            {
               "offset" : 59,
               "value" : "Indonesia"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Yosemite National Park, California, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJxeyK9Z3wloAR_gOA7SycJC0",
         "reference" : "ChIJxeyK9Z3wloAR_gOA7SycJC0",
         "structured_formatting" : {
            "main_text" : "Yosemite National Park",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "California, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Yosemite National Park"
            },
            {
               "offset" : 24,
               "value" : "California"
            },
            {
               "offset" : 36,
               "value" : "USA"
            }
         ],
         "types" : [ "tourist_attraction", "park", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 17:25:12[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:25:12[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:25:12[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:25:12[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:25:12[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:25:12[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:25:12[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:44] - places: Recommanded places nearby
INFO  22-01-15 17:25:12[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby
ERROR 22-01-15 17:25:12[http-nio-8080-exec-5] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby] with root cause
java.net.URISyntaxException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:63)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:50)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$757703f4.getPlaces(<generated>)
	at jdk.internal.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 17:25:20[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:25:20[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:25:20[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:25:20[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:25:20[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:25:20[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:25:20[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:44] - places: Recommanded places nearb
INFO  22-01-15 17:25:20[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearb
ERROR 22-01-15 17:25:20[http-nio-8080-exec-8] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearb] with root cause
java.net.URISyntaxException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearb
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:63)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:50)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$757703f4.getPlaces(<generated>)
	at jdk.internal.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 17:25:23[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:25:23[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:25:23[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:25:23[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:25:23[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:25:23[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:25:23[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:44] - places: Recommanded places nearby
INFO  22-01-15 17:25:23[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby
ERROR 22-01-15 17:25:23[http-nio-8080-exec-6] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby] with root cause
java.net.URISyntaxException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearby
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:63)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:50)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$757703f4.getPlaces(<generated>)
	at jdk.internal.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 17:25:27[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:25:27[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 17:25:27[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:25:27[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:25:27[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:25:27[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:25:27[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:44] - places: Recommanded places nearb
INFO  22-01-15 17:25:27[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearb
ERROR 22-01-15 17:25:27[http-nio-8080-exec-1] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearb] with root cause
java.net.URISyntaxException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nearb
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:63)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:50)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$757703f4.getPlaces(<generated>)
	at jdk.internal.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 17:25:28[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:25:28[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:25:28[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:25:28[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:25:28[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:25:28[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:25:28[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:44] - places: Recommanded places near
INFO  22-01-15 17:25:28[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places near
ERROR 22-01-15 17:25:28[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places near] with root cause
java.net.URISyntaxException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places near
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:63)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:50)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$757703f4.getPlaces(<generated>)
	at jdk.internal.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 17:25:28[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:25:28[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 17:25:28[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:25:28[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:25:28[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:25:28[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:25:28[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:44] - places: Recommanded places nea
INFO  22-01-15 17:25:28[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nea
ERROR 22-01-15 17:25:28[http-nio-8080-exec-4] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nea] with root cause
java.net.URISyntaxException: Illegal character in query at index 139: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded places nea
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:63)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:50)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:32)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$757703f4.getPlaces(<generated>)
	at jdk.internal.reflect.GeneratedMethodAccessor229.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 17:25:30[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:25:30[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
221. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:25:30[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:25:30[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:25:30[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:25:30[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:25:30[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:44] - places: R
INFO  22-01-15 17:25:30[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:48] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=R
INFO  22-01-15 17:25:30[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:52] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Rockefeller Center, Rockefeller Plaza, New York, NY, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ9U1mz_5YwokRosza1aAk0jM",
         "reference" : "ChIJ9U1mz_5YwokRosza1aAk0jM",
         "structured_formatting" : {
            "main_text" : "Rockefeller Center",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Rockefeller Plaza, New York, NY, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Rockefeller Center"
            },
            {
               "offset" : 20,
               "value" : "Rockefeller Plaza"
            },
            {
               "offset" : 39,
               "value" : "New York"
            },
            {
               "offset" : 49,
               "value" : "NY"
            },
            {
               "offset" : 53,
               "value" : "USA"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Rajkot, Gujarat, India",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJD98cx4rJWTkRO62Tvs8V3XY",
         "reference" : "ChIJD98cx4rJWTkRO62Tvs8V3XY",
         "structured_formatting" : {
            "main_text" : "Rajkot",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Gujarat, India"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Rajkot"
            },
            {
               "offset" : 8,
               "value" : "Gujarat"
            },
            {
               "offset" : 17,
               "value" : "India"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Riyadh Saudi Arabia",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJmZNIDYkDLz4R1Z_nmBxNl7o",
         "reference" : "ChIJmZNIDYkDLz4R1Z_nmBxNl7o",
         "structured_formatting" : {
            "main_text" : "Riyadh",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Saudi Arabia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Riyadh"
            },
            {
               "offset" : 7,
               "value" : "Saudi Arabia"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Rio de Janeiro, State of Rio de Janeiro, Brazil",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJW6AIkVXemwARTtIvZ2xC3FA",
         "reference" : "ChIJW6AIkVXemwARTtIvZ2xC3FA",
         "structured_formatting" : {
            "main_text" : "Rio de Janeiro",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "State of Rio de Janeiro, Brazil"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Rio de Janeiro"
            },
            {
               "offset" : 16,
               "value" : "State of Rio de Janeiro"
            },
            {
               "offset" : 41,
               "value" : "Brazil"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Roma, Metropolitan City of Rome, Italy",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJu46S-ZZhLxMROG5lkwZ3D7k",
         "reference" : "ChIJu46S-ZZhLxMROG5lkwZ3D7k",
         "structured_formatting" : {
            "main_text" : "Roma",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Metropolitan City of Rome, Italy"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Roma"
            },
            {
               "offset" : 6,
               "value" : "Metropolitan City of Rome"
            },
            {
               "offset" : 33,
               "value" : "Italy"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

INFO  22-01-15 17:29:18[Thread-42] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 17:29:18[Thread-42] [HikariDataSource:350] - HikariPool-11 - Shutdown initiated...
INFO  22-01-15 17:29:19[Thread-42] [HikariDataSource:352] - HikariPool-11 - Shutdown completed.
INFO  22-01-15 17:29:20[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 17:29:20[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 17:29:26[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 17:29:27[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1697 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 17:29:28[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 17:29:29[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 17:29:29[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:29:29[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 17:29:29[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 17:29:29[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 17:29:29[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8760 ms
INFO  22-01-15 17:29:29[restartedMain] [HikariDataSource:110] - HikariPool-12 - Starting...
INFO  22-01-15 17:29:29[restartedMain] [HikariDataSource:123] - HikariPool-12 - Start completed.
INFO  22-01-15 17:29:30[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 17:29:30[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 17:29:31[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 17:29:31[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 17:29:31[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 17:29:32[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: eb6d59fe-cfe2-4de0-818a-2733a2991460

INFO  22-01-15 17:29:33[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@64242f5f, org.springframework.security.web.context.SecurityContextPersistenceFilter@6cd3ab1e, org.springframework.security.web.header.HeaderWriterFilter@7de9ff57, org.springframework.web.filter.CorsFilter@45ab6049, org.springframework.security.web.authentication.logout.LogoutFilter@669c8da6, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@1ced8198, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@e6a2462, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3c4b71bf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6452d309, org.springframework.security.web.session.SessionManagementFilter@5ffe9f16, org.springframework.security.web.access.ExceptionTranslationFilter@77d2b12f]
INFO  22-01-15 17:29:34[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 17:29:34[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:29:34[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 17:29:34[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 14.533 seconds (JVM running for 25801.341)
INFO  22-01-15 17:29:34[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 17:30:34[Thread-46] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 17:30:34[Thread-46] [HikariDataSource:350] - HikariPool-12 - Shutdown initiated...
INFO  22-01-15 17:30:34[Thread-46] [HikariDataSource:352] - HikariPool-12 - Shutdown completed.
INFO  22-01-15 17:30:35[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 17:30:35[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 17:30:38[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 17:30:40[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1212 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 17:30:40[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 17:30:41[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 17:30:41[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:30:41[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 17:30:41[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 17:30:41[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 17:30:41[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5746 ms
INFO  22-01-15 17:30:41[restartedMain] [HikariDataSource:110] - HikariPool-13 - Starting...
INFO  22-01-15 17:30:41[restartedMain] [HikariDataSource:123] - HikariPool-13 - Start completed.
INFO  22-01-15 17:30:41[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 17:30:41[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 17:30:42[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 17:30:42[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 17:30:42[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-15 17:30:43[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
INFO  22-01-15 17:30:43[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 17:30:43[restartedMain] [HikariDataSource:350] - HikariPool-13 - Shutdown initiated...
INFO  22-01-15 17:30:43[restartedMain] [HikariDataSource:352] - HikariPool-13 - Shutdown completed.
INFO  22-01-15 17:30:43[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-15 17:30:43[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-15 17:30:43[restartedMain] [LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field locationApiLogicService in com.example.gradlebnbadminapi.controller.LocationController required a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' in your configuration.

INFO  22-01-15 17:31:16[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 17:31:16[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 17:31:19[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 17:31:20[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1064 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 17:31:21[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 17:31:22[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 17:31:22[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:31:22[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 17:31:22[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 17:31:22[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 17:31:22[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 6037 ms
INFO  22-01-15 17:31:22[restartedMain] [HikariDataSource:110] - HikariPool-14 - Starting...
INFO  22-01-15 17:31:22[restartedMain] [HikariDataSource:123] - HikariPool-14 - Start completed.
INFO  22-01-15 17:31:22[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 17:31:23[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 17:31:23[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 17:31:23[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 17:31:24[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-15 17:31:25[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
INFO  22-01-15 17:31:25[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 17:31:25[restartedMain] [HikariDataSource:350] - HikariPool-14 - Shutdown initiated...
INFO  22-01-15 17:31:25[restartedMain] [HikariDataSource:352] - HikariPool-14 - Shutdown completed.
INFO  22-01-15 17:31:25[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-15 17:31:25[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-15 17:31:25[restartedMain] [LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field locationApiLogicService in com.example.gradlebnbadminapi.controller.LocationController required a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' in your configuration.

INFO  22-01-15 17:31:42[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 273 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 17:31:42[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 17:31:45[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 17:31:46[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 873 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 17:31:47[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 17:31:47[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 17:31:47[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:31:47[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 17:31:47[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 17:31:47[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 17:31:47[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5254 ms
INFO  22-01-15 17:31:47[restartedMain] [HikariDataSource:110] - HikariPool-15 - Starting...
INFO  22-01-15 17:31:48[restartedMain] [HikariDataSource:123] - HikariPool-15 - Start completed.
INFO  22-01-15 17:31:48[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 17:31:48[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 17:31:48[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 17:31:48[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 17:31:48[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-15 17:31:49[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
INFO  22-01-15 17:31:49[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 17:31:49[restartedMain] [HikariDataSource:350] - HikariPool-15 - Shutdown initiated...
INFO  22-01-15 17:31:49[restartedMain] [HikariDataSource:352] - HikariPool-15 - Shutdown completed.
INFO  22-01-15 17:31:49[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-15 17:31:49[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-15 17:31:49[restartedMain] [LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field locationApiLogicService in com.example.gradlebnbadminapi.controller.LocationController required a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' in your configuration.

INFO  22-01-15 17:39:46[background-preinit] [Version:21] - HV000001: Hibernate Validator 6.2.0.Final
INFO  22-01-15 17:39:46[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 17:39:46[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 17:39:46[restartedMain] [DevToolsPropertyDefaultsPostProcessor:255] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
INFO  22-01-15 17:39:46[restartedMain] [DevToolsPropertyDefaultsPostProcessor:255] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
INFO  22-01-15 17:39:55[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 17:39:57[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2075 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 17:39:59[restartedMain] [InstanceMetadataServiceResourceFetcher:105] - Fail to retrieve token 
com.amazonaws.SdkClientException: Failed to connect to service endpoint: 
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:100)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.getToken(InstanceMetadataServiceResourceFetcher.java:91)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.readResource(InstanceMetadataServiceResourceFetcher.java:69)
	at com.amazonaws.internal.EC2ResourceFetcher.readResource(EC2ResourceFetcher.java:66)
	at com.amazonaws.util.EC2MetadataUtils.getItems(EC2MetadataUtils.java:402)
	at com.amazonaws.util.EC2MetadataUtils.getData(EC2MetadataUtils.java:371)
	at org.springframework.cloud.aws.context.support.env.AwsCloudEnvironmentCheckUtils.isRunningOnCloudEnvironment(AwsCloudEnvironmentCheckUtils.java:38)
	at org.springframework.cloud.aws.context.annotation.OnAwsCloudEnvironmentCondition.matches(OnAwsCloudEnvironmentCondition.java:38)
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:489)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.Socket.connect(Socket.java:609)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:177)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:341)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:362)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1253)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1232)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1015)
	at com.amazonaws.internal.ConnectionUtils.connectToEndpoint(ConnectionUtils.java:52)
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:80)
	... 29 common frames omitted
WARN  22-01-15 17:39:59[restartedMain] [EC2MetadataUtils:409] - Unable to retrieve the requested metadata (/latest/meta-data/instance-id). Failed to connect to service endpoint: 
com.amazonaws.SdkClientException: Failed to connect to service endpoint: 
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:100)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.getToken(InstanceMetadataServiceResourceFetcher.java:91)
	at com.amazonaws.internal.InstanceMetadataServiceResourceFetcher.readResource(InstanceMetadataServiceResourceFetcher.java:69)
	at com.amazonaws.internal.EC2ResourceFetcher.readResource(EC2ResourceFetcher.java:66)
	at com.amazonaws.util.EC2MetadataUtils.getItems(EC2MetadataUtils.java:402)
	at com.amazonaws.util.EC2MetadataUtils.getData(EC2MetadataUtils.java:371)
	at org.springframework.cloud.aws.context.support.env.AwsCloudEnvironmentCheckUtils.isRunningOnCloudEnvironment(AwsCloudEnvironmentCheckUtils.java:38)
	at org.springframework.cloud.aws.context.annotation.OnAwsCloudEnvironmentCondition.matches(OnAwsCloudEnvironmentCondition.java:38)
	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator.shouldSkip(ConfigurationClassBeanDefinitionReader.java:489)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140)
	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.example.gradlebnbadminapi.GradleBnbAdminApiApplication.main(GradleBnbAdminApiApplication.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.base/java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.Socket.connect(Socket.java:609)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:177)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:341)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:362)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1253)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1232)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1015)
	at com.amazonaws.internal.ConnectionUtils.connectToEndpoint(ConnectionUtils.java:52)
	at com.amazonaws.internal.EC2ResourceFetcher.doReadResource(EC2ResourceFetcher.java:80)
	... 29 common frames omitted
WARN  22-01-15 17:39:59[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 17:40:04[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 17:40:04[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:40:04[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 17:40:04[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 17:40:04[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 17:40:04[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 17668 ms
INFO  22-01-15 17:40:05[restartedMain] [HikariDataSource:110] - HikariPool-1 - Starting...
INFO  22-01-15 17:40:06[restartedMain] [HikariDataSource:123] - HikariPool-1 - Start completed.
INFO  22-01-15 17:40:07[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 17:40:07[restartedMain] [Version:44] - HHH000412: Hibernate ORM core version 5.4.32.Final
INFO  22-01-15 17:40:08[restartedMain] [Version:56] - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
INFO  22-01-15 17:40:10[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 17:40:16[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 17:40:16[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 17:40:16[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 17:40:22[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: d76f37fb-1023-47fc-b78b-b924cb9b1ed3

INFO  22-01-15 17:40:24[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7368502a, org.springframework.security.web.context.SecurityContextPersistenceFilter@6b087bd6, org.springframework.security.web.header.HeaderWriterFilter@1999999d, org.springframework.web.filter.CorsFilter@472df19d, org.springframework.security.web.authentication.logout.LogoutFilter@2624a6f, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@184f9735, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@353fd06c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@53c66671, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@cba801b, org.springframework.security.web.session.SessionManagementFilter@6a6ee2d9, org.springframework.security.web.access.ExceptionTranslationFilter@6042dedd]
INFO  22-01-15 17:40:28[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 17:40:30[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:40:30[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 17:40:30[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 47.748 seconds (JVM running for 49.973)
INFO  22-01-15 17:46:17[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 17:46:17[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 17:46:17[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 4 ms
WARN  22-01-15 17:46:18[http-nio-8080-exec-2] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'searchKeyword' for method parameter type String is not present]
WARN  22-01-15 17:46:48[http-nio-8080-exec-4] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'placeId' for method parameter type int is not present]
INFO  22-01-15 17:47:46[Thread-5] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 17:47:46[Thread-5] [HikariDataSource:350] - HikariPool-1 - Shutdown initiated...
INFO  22-01-15 17:47:46[Thread-5] [HikariDataSource:352] - HikariPool-1 - Shutdown completed.
INFO  22-01-15 17:47:47[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 17:47:47[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 17:47:53[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 17:47:55[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1901 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 17:47:56[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 17:47:57[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 17:47:57[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:47:57[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 17:47:57[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 17:47:57[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 17:47:57[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 10418 ms
INFO  22-01-15 17:47:57[restartedMain] [HikariDataSource:110] - HikariPool-2 - Starting...
INFO  22-01-15 17:47:57[restartedMain] [HikariDataSource:123] - HikariPool-2 - Start completed.
INFO  22-01-15 17:47:58[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 17:47:58[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 17:47:59[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 17:47:59[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 17:47:59[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 17:48:01[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: e426ed6e-acd9-474a-b3c2-14df882681db

INFO  22-01-15 17:48:02[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@336dbd4c, org.springframework.security.web.context.SecurityContextPersistenceFilter@707e4f2b, org.springframework.security.web.header.HeaderWriterFilter@602455f3, org.springframework.web.filter.CorsFilter@7b437640, org.springframework.security.web.authentication.logout.LogoutFilter@90ef557, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@3b8d7eea, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3383301b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71ca6055, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@525db626, org.springframework.security.web.session.SessionManagementFilter@76f18957, org.springframework.security.web.access.ExceptionTranslationFilter@4d41dfe0]
INFO  22-01-15 17:48:03[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 17:48:03[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:48:03[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 17:48:03[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 16.979 seconds (JVM running for 503.276)
INFO  22-01-15 17:48:03[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 17:49:09[Thread-7] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 17:49:09[Thread-7] [HikariDataSource:350] - HikariPool-2 - Shutdown initiated...
INFO  22-01-15 17:49:09[Thread-7] [HikariDataSource:352] - HikariPool-2 - Shutdown completed.
INFO  22-01-15 17:49:10[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 17:49:10[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 17:49:16[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 17:49:18[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2247 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 17:49:19[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 17:49:19[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 17:49:19[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:49:19[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 17:49:19[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 17:49:20[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 17:49:20[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9721 ms
INFO  22-01-15 17:49:20[restartedMain] [HikariDataSource:110] - HikariPool-3 - Starting...
INFO  22-01-15 17:49:20[restartedMain] [HikariDataSource:123] - HikariPool-3 - Start completed.
INFO  22-01-15 17:49:21[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 17:49:21[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 17:49:21[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 17:49:21[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 17:49:22[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 17:49:24[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 713c3d32-13ad-4bcc-815c-fc8d0c7ed11a

INFO  22-01-15 17:49:25[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@61c3be69, org.springframework.security.web.context.SecurityContextPersistenceFilter@59366e1, org.springframework.security.web.header.HeaderWriterFilter@5135683, org.springframework.web.filter.CorsFilter@245dd50e, org.springframework.security.web.authentication.logout.LogoutFilter@6a16f6a8, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@4372aa05, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2a61e81, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1d9ee718, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@780890d8, org.springframework.security.web.session.SessionManagementFilter@50b73d94, org.springframework.security.web.access.ExceptionTranslationFilter@17e20a18]
INFO  22-01-15 17:49:26[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 17:49:26[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:49:26[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 17:49:26[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 16.545 seconds (JVM running for 586.208)
INFO  22-01-15 17:49:26[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 17:49:26[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 17:49:26[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 17:49:26[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 0 ms
WARN  22-01-15 17:49:26[http-nio-8080-exec-1] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingPathVariableException: Required URI template variable 'placeId' for method parameter type int is not present]
INFO  22-01-15 17:49:54[Thread-11] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 17:49:54[Thread-11] [HikariDataSource:350] - HikariPool-3 - Shutdown initiated...
INFO  22-01-15 17:49:54[Thread-11] [HikariDataSource:352] - HikariPool-3 - Shutdown completed.
INFO  22-01-15 17:49:54[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 17:49:54[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 17:50:00[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 17:50:02[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2016 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 17:50:03[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 17:50:04[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 17:50:04[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:50:04[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 17:50:04[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 17:50:04[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 17:50:04[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9953 ms
INFO  22-01-15 17:50:05[restartedMain] [HikariDataSource:110] - HikariPool-4 - Starting...
INFO  22-01-15 17:50:05[restartedMain] [HikariDataSource:123] - HikariPool-4 - Start completed.
INFO  22-01-15 17:50:06[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 17:50:06[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 17:50:06[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 17:50:06[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 17:50:07[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 17:50:09[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 33620eb9-95ca-4e42-b787-1e3846c29a94

INFO  22-01-15 17:50:10[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5c12cb72, org.springframework.security.web.context.SecurityContextPersistenceFilter@5e001408, org.springframework.security.web.header.HeaderWriterFilter@1cca8a7a, org.springframework.web.filter.CorsFilter@6a99f5a4, org.springframework.security.web.authentication.logout.LogoutFilter@4f17786, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@795a9d4a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7fc83427, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3799e8fe, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2b7f8fbf, org.springframework.security.web.session.SessionManagementFilter@53d7d59b, org.springframework.security.web.access.ExceptionTranslationFilter@403c2aad]
INFO  22-01-15 17:50:10[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 17:50:11[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:50:11[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 17:50:11[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 16.666 seconds (JVM running for 630.933)
INFO  22-01-15 17:50:11[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 17:50:12[http-nio-8080-exec-2] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 17:50:12[http-nio-8080-exec-2] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 17:50:12[http-nio-8080-exec-2] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-15 17:50:13[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:50:13[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 38 msec}
INFO  22-01-15 17:50:13[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:50:13[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:50:13[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places/1
INFO  22-01-15 17:50:13[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:51:31[Thread-15] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 17:51:31[Thread-15] [HikariDataSource:350] - HikariPool-4 - Shutdown initiated...
INFO  22-01-15 17:51:31[Thread-15] [HikariDataSource:352] - HikariPool-4 - Shutdown completed.
INFO  22-01-15 17:51:32[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 17:51:32[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 17:51:37[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 17:51:39[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1781 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 17:51:40[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 17:51:41[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 17:51:41[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:51:41[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 17:51:41[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 17:51:41[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 17:51:41[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8837 ms
INFO  22-01-15 17:51:41[restartedMain] [HikariDataSource:110] - HikariPool-5 - Starting...
INFO  22-01-15 17:51:41[restartedMain] [HikariDataSource:123] - HikariPool-5 - Start completed.
INFO  22-01-15 17:51:42[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 17:51:42[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 17:51:42[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 17:51:42[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 17:51:43[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 17:51:44[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 98d09dcd-9e05-4cd8-87d5-3bf79778408a

INFO  22-01-15 17:51:45[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1458e7ad, org.springframework.security.web.context.SecurityContextPersistenceFilter@6feab735, org.springframework.security.web.header.HeaderWriterFilter@310dff6e, org.springframework.web.filter.CorsFilter@2ca6bbe6, org.springframework.security.web.authentication.logout.LogoutFilter@65d804d9, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@7a0276ec, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4e79b70, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5acff20d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@25929abf, org.springframework.security.web.session.SessionManagementFilter@3f774190, org.springframework.security.web.access.ExceptionTranslationFilter@21d3f7f]
INFO  22-01-15 17:51:46[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 17:51:46[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:51:46[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 17:51:46[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 14.68 seconds (JVM running for 726.397)
INFO  22-01-15 17:51:46[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 17:52:15[Thread-19] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 17:52:15[Thread-19] [HikariDataSource:350] - HikariPool-5 - Shutdown initiated...
INFO  22-01-15 17:52:15[Thread-19] [HikariDataSource:352] - HikariPool-5 - Shutdown completed.
INFO  22-01-15 17:52:16[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 17:52:16[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 17:52:22[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 17:52:24[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2224 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 17:52:26[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 17:52:27[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 17:52:27[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:52:27[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 17:52:27[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 17:52:27[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 17:52:27[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 10752 ms
INFO  22-01-15 17:52:27[restartedMain] [HikariDataSource:110] - HikariPool-6 - Starting...
INFO  22-01-15 17:52:27[restartedMain] [HikariDataSource:123] - HikariPool-6 - Start completed.
INFO  22-01-15 17:52:28[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 17:52:28[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 17:52:29[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 17:52:29[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 17:52:30[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 17:52:32[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: bfbd9b3f-de62-45ec-ad16-4a3428d827ce

INFO  22-01-15 17:52:33[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2e8f1c, org.springframework.security.web.context.SecurityContextPersistenceFilter@22c9706, org.springframework.security.web.header.HeaderWriterFilter@3d18ce75, org.springframework.web.filter.CorsFilter@58561eff, org.springframework.security.web.authentication.logout.LogoutFilter@71bf5682, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@4f265389, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@22102ca, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@79310f9d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7789618e, org.springframework.security.web.session.SessionManagementFilter@3cba5504, org.springframework.security.web.access.ExceptionTranslationFilter@688d1011]
INFO  22-01-15 17:52:34[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 17:52:34[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 17:52:34[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 17:52:34[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 18.662 seconds (JVM running for 774.445)
INFO  22-01-15 17:52:34[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 17:59:25[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 17:59:25[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 17:59:25[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 6 ms
DEBUG 22-01-15 17:59:25[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:59:25[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 3 msec}
INFO  22-01-15 17:59:25[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:59:25[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:59:25[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 17:59:25[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 17:59:25[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:59:25[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:59:25[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 17:59:28[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:59:28[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 17:59:28[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:59:28[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:59:28[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:59:28[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:59:28[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:45] - places: ㅗ
INFO  22-01-15 17:59:28[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=ㅗ
DEBUG 22-01-15 17:59:29[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
52. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:59:29[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
52. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:59:29[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:59:29[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:59:29[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:59:29[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:59:29[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:45] - places: 동
INFO  22-01-15 17:59:29[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동
INFO  22-01-15 17:59:29[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, Yeongdeungpo-gu, Dorim-dong, 도림교회",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 49
            }
         ],
         "place_id" : "ChIJKRZPr16efDURpJzNm-KNQ2E",
         "reference" : "ChIJKRZPr16efDURpJzNm-KNQ2E",
         "structured_formatting" : {
            "main_text" : "도림교회",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Yeongdeungpo-gu, Dorim-dong"
         },
         "terms" : [
            {
               "offset" : 49,
               "value" : "도림교회"
            },
            {
               "offset" : 37,
               "value" : "Dorim-dong"
            },
            {
               "offset" : 20,
               "value" : "Yeongdeungpo-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "church", "place_of_worship", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Busan, Dong-gu, Beomil-dong, 369 모텔",
         "matched_substrings" : [
            {
               "length" : 6,
               "offset" : 42
            }
         ],
         "place_id" : "ChIJjfF7jI_raDURXwbUWgzD8Fg",
         "reference" : "ChIJjfF7jI_raDURXwbUWgzD8Fg",
         "structured_formatting" : {
            "main_text" : "369 모텔",
            "main_text_matched_substrings" : [
               {
                  "length" : 6,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Busan, Dong-gu, Beomil-dong"
         },
         "terms" : [
            {
               "offset" : 42,
               "value" : "369 모텔"
            },
            {
               "offset" : 29,
               "value" : "Beomil-dong"
            },
            {
               "offset" : 20,
               "value" : "Dong-gu"
            },
            {
               "offset" : 13,
               "value" : "Busan"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "lodging", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Japan, Osaka, Chuo Ward, Dotonbori, 2 Chome−2−2 도톤보리 니쿠게키조(고기극장)",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 44
            },
            {
               "length" : 16,
               "offset" : 48
            }
         ],
         "place_id" : "ChIJa-lYpBPnAGARgyymI0r9T38",
         "reference" : "ChIJa-lYpBPnAGARgyymI0r9T38",
         "structured_formatting" : {
            "main_text" : "도톤보리 니쿠게키조(고기극장)",
            "main_text_matched_substrings" : [
               {
                  "length" : 16,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Japan, Osaka, Chuo Ward, Dotonbori, 2 Chome−2−2",
            "secondary_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 44
               }
            ]
         },
         "terms" : [
            {
               "offset" : 48,
               "value" : "도톤보리 니쿠게키조(고기극장)"
            },
            {
               "offset" : 44,
               "value" : "2−2"
            },
            {
               "offset" : 36,
               "value" : "2 Chome"
            },
            {
               "offset" : 25,
               "value" : "Dotonbori"
            },
            {
               "offset" : 14,
               "value" : "Chuo Ward"
            },
            {
               "offset" : 7,
               "value" : "Osaka"
            },
            {
               "offset" : 0,
               "value" : "Japan"
            }
         ],
         "types" : [ "restaurant", "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "India, Uttar Pradesh, Ghaziabad, Indirapuram, Shipra Suncity, Shiv Vihar, ㅗㅋ걍ㅅ",
         "matched_substrings" : [
            {
               "length" : 4,
               "offset" : 74
            }
         ],
         "place_id" : "ChIJq6qq6lTlDDkRPIW1djfADXg",
         "reference" : "ChIJq6qq6lTlDDkRPIW1djfADXg",
         "structured_formatting" : {
            "main_text" : "ㅗㅋ걍ㅅ",
            "main_text_matched_substrings" : [
               {
                  "length" : 4,
                  "offset" : 0
               }
            ],
            "secondary_text" : "India, Uttar Pradesh, Ghaziabad, Indirapuram, Shipra Suncity, Shiv Vihar"
         },
         "terms" : [
            {
               "offset" : 74,
               "value" : "ㅗㅋ걍ㅅ"
            },
            {
               "offset" : 62,
               "value" : "Shiv Vihar"
            },
            {
               "offset" : 46,
               "value" : "Shipra Suncity"
            },
            {
               "offset" : 33,
               "value" : "Indirapuram"
            },
            {
               "offset" : 22,
               "value" : "Ghaziabad"
            },
            {
               "offset" : 7,
               "value" : "Uttar Pradesh"
            },
            {
               "offset" : 0,
               "value" : "India"
            }
         ],
         "types" : [ "restaurant", "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Guro-gu, Digital-ro 33-gil, 에이스테크노타워 초심스터디카페",
         "matched_substrings" : [
            {
               "length" : 7,
               "offset" : 57
            }
         ],
         "place_id" : "ChIJ29ubyTqffDURdfkGjc-_-2g",
         "reference" : "ChIJ29ubyTqffDURdfkGjc-_-2g",
         "structured_formatting" : {
            "main_text" : "초심스터디카페",
            "main_text_matched_substrings" : [
               {
                  "length" : 7,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Guro-gu, Digital-ro 33-gil, 에이스테크노타워"
         },
         "terms" : [
            {
               "offset" : 57,
               "value" : "초심스터디카페"
            },
            {
               "offset" : 48,
               "value" : "에이스테크노타워"
            },
            {
               "offset" : 29,
               "value" : "Digital-ro 33-gil"
            },
            {
               "offset" : 20,
               "value" : "Guro-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "cafe", "food", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

INFO  22-01-15 17:59:29[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "동티모르",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJKaHkhgnl_SwRPFvoh4PG5QM",
         "reference" : "ChIJKaHkhgnl_SwRPFvoh4PG5QM",
         "structured_formatting" : {
            "main_text" : "동티모르",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ]
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "동티모르"
            }
         ],
         "types" : [ "country", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Gyeonggi-do, 동두천",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 26
            }
         ],
         "place_id" : "ChIJA3bo8tPbfDURe_pZYu-eBgo",
         "reference" : "ChIJA3bo8tPbfDURe_pZYu-eBgo",
         "structured_formatting" : {
            "main_text" : "동두천",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gyeonggi-do"
         },
         "terms" : [
            {
               "offset" : 26,
               "value" : "동두천"
            },
            {
               "offset" : 13,
               "value" : "Gyeonggi-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Jeju-do, Seogwipo-si, Namwon-eup, Sinrye-ri, 동백포레스트",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 58
            }
         ],
         "place_id" : "ChIJWbF6tpWqDTURrx0lRMOV3BQ",
         "reference" : "ChIJWbF6tpWqDTURrx0lRMOV3BQ",
         "structured_formatting" : {
            "main_text" : "동백포레스트",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Jeju-do, Seogwipo-si, Namwon-eup, Sinrye-ri"
         },
         "terms" : [
            {
               "offset" : 58,
               "value" : "동백포레스트"
            },
            {
               "offset" : 47,
               "value" : "Sinrye-ri"
            },
            {
               "offset" : 35,
               "value" : "Namwon-eup"
            },
            {
               "offset" : 22,
               "value" : "Seogwipo-si"
            },
            {
               "offset" : 13,
               "value" : "Jeju-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Daegu, Jung-gu, 동성로",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 29
            }
         ],
         "place_id" : "ChIJ4QLcocTjZTURtiuqkqSyWjM",
         "reference" : "ChIJ4QLcocTjZTURtiuqkqSyWjM",
         "structured_formatting" : {
            "main_text" : "Jung-gu, 동성로",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 9
               }
            ],
            "secondary_text" : "South Korea, Daegu"
         },
         "terms" : [
            {
               "offset" : 29,
               "value" : "동성로"
            },
            {
               "offset" : 20,
               "value" : "Jung-gu"
            },
            {
               "offset" : 13,
               "value" : "Daegu"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_4", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Gangwon-do, 동해",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 25
            }
         ],
         "place_id" : "ChIJ4UImuqy4YTURJwC6wLPP2_E",
         "reference" : "ChIJ4UImuqy4YTURJwC6wLPP2_E",
         "structured_formatting" : {
            "main_text" : "동해",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gangwon-do"
         },
         "terms" : [
            {
               "offset" : 25,
               "value" : "동해"
            },
            {
               "offset" : 13,
               "value" : "Gangwon-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 17:59:29[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:59:29[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 17:59:29[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:59:29[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:59:29[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:59:29[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:59:29[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:45] - places: 동ㄷ
INFO  22-01-15 17:59:29[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동ㄷ
INFO  22-01-15 17:59:29[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [],
   "status" : "ZERO_RESULTS"
}

DEBUG 22-01-15 17:59:30[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:59:30[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 17:59:30[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:59:30[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:59:30[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:59:30[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:59:30[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:45] - places: 동댜
INFO  22-01-15 17:59:30[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동댜
INFO  22-01-15 17:59:30[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Daegu, Dong-gu, Dongdaegu-ro, 동대구역",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 43
            }
         ],
         "place_id" : "ChIJn3vIRZLhZTURjCyBkWOrHDk",
         "reference" : "ChIJn3vIRZLhZTURjCyBkWOrHDk",
         "structured_formatting" : {
            "main_text" : "동대구역",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Daegu, Dong-gu, Dongdaegu-ro"
         },
         "terms" : [
            {
               "offset" : 43,
               "value" : "동대구역"
            },
            {
               "offset" : 29,
               "value" : "Dongdaegu-ro"
            },
            {
               "offset" : 20,
               "value" : "Dong-gu"
            },
            {
               "offset" : 13,
               "value" : "Daegu"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [
            "train_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 17:59:30[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:59:30[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:59:30[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:59:30[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:59:30[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:59:30[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:59:30[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:45] - places: 동ㄷ
INFO  22-01-15 17:59:30[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동ㄷ
INFO  22-01-15 17:59:30[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [],
   "status" : "ZERO_RESULTS"
}

DEBUG 22-01-15 17:59:30[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:59:30[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 17:59:30[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:59:30[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:59:30[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:59:30[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:59:30[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:45] - places: 동대
INFO  22-01-15 17:59:30[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대
INFO  22-01-15 17:59:31[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Daegu, Dong-gu, Dongdaegu-ro, 동대구역",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 43
            }
         ],
         "place_id" : "ChIJn3vIRZLhZTURjCyBkWOrHDk",
         "reference" : "ChIJn3vIRZLhZTURjCyBkWOrHDk",
         "structured_formatting" : {
            "main_text" : "동대구역",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Daegu, Dong-gu, Dongdaegu-ro"
         },
         "terms" : [
            {
               "offset" : 43,
               "value" : "동대구역"
            },
            {
               "offset" : 29,
               "value" : "Dongdaegu-ro"
            },
            {
               "offset" : 20,
               "value" : "Dong-gu"
            },
            {
               "offset" : 13,
               "value" : "Daegu"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [
            "train_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 17:59:31[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 17:59:31[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 17:59:31[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 17:59:31[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 17:59:31[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 17:59:31[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 17:59:31[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 17:59:31[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 17:59:31[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

WARN  22-01-15 17:59:33[http-nio-8080-exec-7] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'placeId' for method parameter type int is not present]
DEBUG 22-01-15 18:00:10[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:00:10[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:00:10[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:00:10[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:00:10[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:00:10[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:00:10[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:00:10[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:00:10[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:00:15[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:00:15[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:00:15[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:00:15[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:00:15[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:00:15[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:00:15[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:00:15[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:00:15[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

WARN  22-01-15 18:00:19[http-nio-8080-exec-10] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'placeId' for method parameter type int is not present]
DEBUG 22-01-15 18:00:42[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:00:42[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:00:42[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:00:42[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:00:42[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:00:42[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:00:42[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:00:42[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:00:42[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:01:13[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:01:13[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:01:13[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:01:13[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:01:13[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:01:13[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:01:13[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:01:13[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:01:13[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:01:31[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:01:31[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:01:31[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:01:31[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:01:31[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:01:31[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:01:31[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:01:31[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:01:31[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:02:39[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:02:39[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:02:39[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:02:39[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:02:39[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:02:39[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:02:39[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:02:39[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:02:39[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:03:36[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
52. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:03:36[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
52. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 18:03:36[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:03:36[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:03:36[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:03:36[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:03:36[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:03:36[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:03:36[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:03:41[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:03:41[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:03:41[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:03:41[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:03:41[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:03:41[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:03:41[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:03:41[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:03:41[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:04:01[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:04:01[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:04:01[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:04:01[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:04:01[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:04:01[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:04:01[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:04:01[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:04:01[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:15:11[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:15:11[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:15:11[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:15:11[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:15:11[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:15:11[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:15:11[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:15:11[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:15:11[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:15:17[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:15:17[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:15:17[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:15:17[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:15:17[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:15:17[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:15:17[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:15:17[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:15:17[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:16:02[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:16:02[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:16:02[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:16:02[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:16:02[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:16:02[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:16:02[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:16:02[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:16:02[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:16:23[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:16:23[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:16:23[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:16:23[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:16:23[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:16:23[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:16:23[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:16:23[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:16:23[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:16:30[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:16:30[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:16:30[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:16:30[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:16:30[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:16:30[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:16:30[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:16:30[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:16:30[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

WARN  22-01-15 18:16:34[http-nio-8080-exec-6] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'placeId' for method parameter type int is not present]
INFO  22-01-15 18:17:28[Thread-23] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 18:17:28[Thread-23] [HikariDataSource:350] - HikariPool-6 - Shutdown initiated...
INFO  22-01-15 18:17:28[Thread-23] [HikariDataSource:352] - HikariPool-6 - Shutdown completed.
INFO  22-01-15 18:17:28[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 18:17:28[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 18:17:34[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 18:17:36[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1920 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 18:17:37[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 18:17:38[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 18:17:38[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:17:38[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 18:17:38[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 18:17:38[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 18:17:38[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9098 ms
INFO  22-01-15 18:17:38[restartedMain] [HikariDataSource:110] - HikariPool-7 - Starting...
INFO  22-01-15 18:17:38[restartedMain] [HikariDataSource:123] - HikariPool-7 - Start completed.
INFO  22-01-15 18:17:39[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 18:17:39[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 18:17:40[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 18:17:40[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 18:17:40[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 18:17:42[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 08d5a383-8aba-4659-9966-65d8ddac1653

INFO  22-01-15 18:17:43[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3d1f2286, org.springframework.security.web.context.SecurityContextPersistenceFilter@b7f4cdd, org.springframework.security.web.header.HeaderWriterFilter@3b940505, org.springframework.web.filter.CorsFilter@4df89f29, org.springframework.security.web.authentication.logout.LogoutFilter@72d5f22c, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@6d4ffb8e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@51e5d3c0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4a4258d4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@70159487, org.springframework.security.web.session.SessionManagementFilter@59f21886, org.springframework.security.web.access.ExceptionTranslationFilter@77b5beac]
INFO  22-01-15 18:17:43[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 18:17:44[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:17:44[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 18:17:44[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.697 seconds (JVM running for 2283.941)
INFO  22-01-15 18:17:44[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 18:17:45[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 18:17:45[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 18:17:45[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 2 ms
WARN  22-01-15 18:17:45[http-nio-8080-exec-1] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'placeId' for method parameter type String is not present]
WARN  22-01-15 18:18:03[http-nio-8080-exec-3] [DefaultHandlerExceptionResolver:208] - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'placeId' for method parameter type String is not present]
INFO  22-01-15 18:18:49[Thread-27] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 18:18:49[Thread-27] [HikariDataSource:350] - HikariPool-7 - Shutdown initiated...
INFO  22-01-15 18:18:49[Thread-27] [HikariDataSource:352] - HikariPool-7 - Shutdown completed.
INFO  22-01-15 18:18:50[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 18:18:50[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 18:18:55[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 18:18:57[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1953 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 18:18:58[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 18:18:59[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 18:18:59[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:18:59[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 18:18:59[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 18:18:59[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 18:18:59[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9152 ms
INFO  22-01-15 18:19:00[restartedMain] [HikariDataSource:110] - HikariPool-8 - Starting...
INFO  22-01-15 18:19:00[restartedMain] [HikariDataSource:123] - HikariPool-8 - Start completed.
INFO  22-01-15 18:19:00[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 18:19:00[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 18:19:01[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 18:19:01[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 18:19:01[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 18:19:03[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: fbf36cfc-0cbe-421d-a6f1-60ea6fb1078a

INFO  22-01-15 18:19:04[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5decf3ad, org.springframework.security.web.context.SecurityContextPersistenceFilter@771ebdd0, org.springframework.security.web.header.HeaderWriterFilter@706c1391, org.springframework.web.filter.CorsFilter@143d90db, org.springframework.security.web.authentication.logout.LogoutFilter@deb632b, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@501a6351, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3ed4c748, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2eb4ab98, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2e5e4474, org.springframework.security.web.session.SessionManagementFilter@1ce7bd76, org.springframework.security.web.access.ExceptionTranslationFilter@353f978c]
INFO  22-01-15 18:19:05[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 18:19:05[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:19:05[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 18:19:05[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.651 seconds (JVM running for 2365.455)
INFO  22-01-15 18:19:05[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 18:19:07[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 18:19:07[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 18:19:07[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 2 ms
DEBUG 22-01-15 18:19:07[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:19:07[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:19:07[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:19:07[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:19:07[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places/ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:19:07[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:19:07[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:19:08[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "predictions" : [],
   "status" : "INVALID_REQUEST"
}

INFO  22-01-15 18:20:27[Thread-31] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 18:20:27[Thread-31] [HikariDataSource:350] - HikariPool-8 - Shutdown initiated...
INFO  22-01-15 18:20:27[Thread-31] [HikariDataSource:352] - HikariPool-8 - Shutdown completed.
INFO  22-01-15 18:20:28[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 18:20:28[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 18:20:33[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 18:20:35[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1763 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 18:20:35[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 18:20:36[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 18:20:36[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:20:36[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 18:20:36[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 18:20:36[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 18:20:36[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8871 ms
INFO  22-01-15 18:20:37[restartedMain] [HikariDataSource:110] - HikariPool-9 - Starting...
INFO  22-01-15 18:20:37[restartedMain] [HikariDataSource:123] - HikariPool-9 - Start completed.
INFO  22-01-15 18:20:38[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 18:20:38[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 18:20:38[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 18:20:38[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 18:20:39[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 18:20:40[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 06c053da-22a9-4b88-9ca5-9e310930cb79

INFO  22-01-15 18:20:42[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@e73477a, org.springframework.security.web.context.SecurityContextPersistenceFilter@56afb5e, org.springframework.security.web.header.HeaderWriterFilter@3e50e43d, org.springframework.web.filter.CorsFilter@25b11845, org.springframework.security.web.authentication.logout.LogoutFilter@d924afc, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@6aa6ef45, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4afca47d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7334c013, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@15d7d5e4, org.springframework.security.web.session.SessionManagementFilter@550f3cfe, org.springframework.security.web.access.ExceptionTranslationFilter@256d4688]
INFO  22-01-15 18:20:42[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 18:20:42[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:20:42[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 18:20:42[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.393 seconds (JVM running for 2462.865)
INFO  22-01-15 18:20:42[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 18:21:28[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 18:21:28[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 18:21:28[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 2 ms
DEBUG 22-01-15 18:21:28[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:21:28[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:21:28[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:21:28[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:21:28[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places/ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:21:28[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:21:28[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:21:28[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "Dongdaemun-gu",
               "short_name" : "Dongdaemun-gu",
               "types" : [ "political", "sublocality", "sublocality_level_1" ]
            },
            {
               "long_name" : "Seoul",
               "short_name" : "Seoul",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "South Korea",
               "short_name" : "KR",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Dongdaemun-gu, Seoul, South Korea",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            },
            "location" : {
               "lat" : 37.57436819999999,
               "lng" : 127.0400189
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            }
         },
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "types" : [ "political", "sublocality", "sublocality_level_1" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:22:58[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:22:58[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:22:58[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:22:58[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:22:58[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:22:58[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:22:58[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:22:58[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:22:58[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:25:49[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:25:49[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:25:49[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:25:49[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:25:49[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:25:49[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:25:49[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:25:49[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:25:50[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:25:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:25:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:25:51[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:25:51[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:25:51[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location/places/ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:25:51[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:25:51[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:25:51[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "Dongdaemun-gu",
               "short_name" : "Dongdaemun-gu",
               "types" : [ "political", "sublocality", "sublocality_level_1" ]
            },
            {
               "long_name" : "Seoul",
               "short_name" : "Seoul",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "South Korea",
               "short_name" : "KR",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Dongdaemun-gu, Seoul, South Korea",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            },
            "location" : {
               "lat" : 37.57436819999999,
               "lng" : 127.0400189
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            }
         },
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "types" : [ "political", "sublocality", "sublocality_level_1" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:26:10[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:26:10[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:26:10[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:26:10[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:26:10[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:26:10[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:26:10[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:26:10[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:26:10[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:26:23[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:26:23[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 18:26:23[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:26:23[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:26:23[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:26:23[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:26:23[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:45] - places: 동대문
INFO  22-01-15 18:26:23[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=동대문
INFO  22-01-15 18:26:23[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 20
            }
         ],
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "reference" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul"
         },
         "terms" : [
            {
               "offset" : 20,
               "value" : "동대문"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "sublocality_level_1", "sublocality", "political", "geocode" ]
      },
      {
         "description" : "Seoul, 동대문역사문화공원",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "reference" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "structured_formatting" : {
            "main_text" : "동대문역사문화공원",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Seoul"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "동대문역사문화공원"
            },
            {
               "offset" : 0,
               "value" : "Seoul"
            }
         ],
         "types" : [
            "subway_station",
            "transit_station",
            "point_of_interest",
            "establishment"
         ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero, 동대문구청",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 63
            }
         ],
         "place_id" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "reference" : "ChIJU_UqeBq7fDURo8z-Lnh1KWA",
         "structured_formatting" : {
            "main_text" : "동대문구청",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Yongdu-dong, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 63,
               "value" : "동대문구청"
            },
            {
               "offset" : 48,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 35,
               "value" : "Yongdu-dong"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "local_government_office", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero, 동대문구보건소",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 50
            }
         ],
         "place_id" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "reference" : "ChIJdVuXiVW7fDURo0sRFpNsrtA",
         "structured_formatting" : {
            "main_text" : "동대문구보건소",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Dongdaemun-gu, Cheonho-daero"
         },
         "terms" : [
            {
               "offset" : 50,
               "value" : "동대문구보건소"
            },
            {
               "offset" : 35,
               "value" : "Cheonho-daero"
            },
            {
               "offset" : 20,
               "value" : "Dongdaemun-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "health", "point_of_interest", "establishment" ]
      },
      {
         "description" : "South Korea, Seoul, Jongno-gu, Jong-ro, 동대문",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 40
            }
         ],
         "place_id" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "reference" : "ChIJm6x0HTujfDURbf9iX8DtJ2A",
         "structured_formatting" : {
            "main_text" : "동대문",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Jongno-gu, Jong-ro"
         },
         "terms" : [
            {
               "offset" : 40,
               "value" : "동대문"
            },
            {
               "offset" : 31,
               "value" : "Jong-ro"
            },
            {
               "offset" : 20,
               "value" : "Jongno-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "tourist_attraction", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:26:25[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:26:25[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:26:25[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:26:25[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:26:25[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/location/places/ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:26:25[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:26:25[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:26:25[http-nio-8080-exec-9] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "Dongdaemun-gu",
               "short_name" : "Dongdaemun-gu",
               "types" : [ "political", "sublocality", "sublocality_level_1" ]
            },
            {
               "long_name" : "Seoul",
               "short_name" : "Seoul",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "South Korea",
               "short_name" : "KR",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Dongdaemun-gu, Seoul, South Korea",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            },
            "location" : {
               "lat" : 37.57436819999999,
               "lng" : 127.0400189
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            }
         },
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "types" : [ "political", "sublocality", "sublocality_level_1" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:26:25[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:26:25[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:26:25[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:26:25[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:26:25[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:26:25[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:26:25[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:45] - places: Dongdaemun-gu, Seoul, South Korea
INFO  22-01-15 18:26:25[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun-gu, Seoul, South Korea
ERROR 22-01-15 18:26:25[http-nio-8080-exec-1] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 142: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun-gu, Seoul, South Korea] with root cause
java.net.URISyntaxException: Illegal character in query at index 142: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun-gu, Seoul, South Korea
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:79)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:51)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:28)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$c66d1d8.getPlaces(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 18:26:30[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:26:30[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:26:30[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:26:30[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:26:30[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places/ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:26:30[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:26:30[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:26:31[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "Dongdaemun-gu",
               "short_name" : "Dongdaemun-gu",
               "types" : [ "political", "sublocality", "sublocality_level_1" ]
            },
            {
               "long_name" : "Seoul",
               "short_name" : "Seoul",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "South Korea",
               "short_name" : "KR",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Dongdaemun-gu, Seoul, South Korea",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            },
            "location" : {
               "lat" : 37.57436819999999,
               "lng" : 127.0400189
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            }
         },
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "types" : [ "political", "sublocality", "sublocality_level_1" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:26:36[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:26:36[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:26:36[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:26:36[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:26:36[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location/places/ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:26:36[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:26:36[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:26:36[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "Dongdaemun-gu",
               "short_name" : "Dongdaemun-gu",
               "types" : [ "political", "sublocality", "sublocality_level_1" ]
            },
            {
               "long_name" : "Seoul",
               "short_name" : "Seoul",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "South Korea",
               "short_name" : "KR",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Dongdaemun-gu, Seoul, South Korea",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            },
            "location" : {
               "lat" : 37.57436819999999,
               "lng" : 127.0400189
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            }
         },
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "types" : [ "political", "sublocality", "sublocality_level_1" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:26:51[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:26:51[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:26:51[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:26:51[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:26:51[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:26:51[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:26:51[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:45] - places: Dongdaemun-gu, Seoul, South Korea
INFO  22-01-15 18:26:51[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun-gu, Seoul, South Korea
ERROR 22-01-15 18:26:51[http-nio-8080-exec-4] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 142: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun-gu, Seoul, South Korea] with root cause
java.net.URISyntaxException: Illegal character in query at index 142: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun-gu, Seoul, South Korea
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:79)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:51)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:28)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$c66d1d8.getPlaces(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 18:26:52[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:26:52[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:26:52[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:26:52[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:26:52[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/location/places/ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:26:52[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:26:52[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJwY4p1Fy7fDURJCttt7vIQOA
INFO  22-01-15 18:26:53[http-nio-8080-exec-5] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "Dongdaemun-gu",
               "short_name" : "Dongdaemun-gu",
               "types" : [ "political", "sublocality", "sublocality_level_1" ]
            },
            {
               "long_name" : "Seoul",
               "short_name" : "Seoul",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "South Korea",
               "short_name" : "KR",
               "types" : [ "country", "political" ]
            }
         ],
         "formatted_address" : "Dongdaemun-gu, Seoul, South Korea",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            },
            "location" : {
               "lat" : 37.57436819999999,
               "lng" : 127.0400189
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : 37.6075008,
                  "lng" : 127.0781357
               },
               "southwest" : {
                  "lat" : 37.5596501,
                  "lng" : 127.0229698
               }
            }
         },
         "place_id" : "ChIJwY4p1Fy7fDURJCttt7vIQOA",
         "types" : [ "political", "sublocality", "sublocality_level_1" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:27:09[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:27:09[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:27:09[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:27:09[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:27:09[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:27:09[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:27:09[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:45] - places: Dongdaemun-gu, Seoul, South Korea
INFO  22-01-15 18:27:09[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun-gu, Seoul, South Korea
ERROR 22-01-15 18:27:09[http-nio-8080-exec-6] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 142: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun-gu, Seoul, South Korea] with root cause
java.net.URISyntaxException: Illegal character in query at index 142: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun-gu, Seoul, South Korea
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:79)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:51)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:28)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$c66d1d8.getPlaces(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 18:27:12[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:27:12[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:27:12[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:27:12[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:27:12[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places/ChIJRTkaPz2jfDUReQo0-UY580U
INFO  22-01-15 18:27:12[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:27:12[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJRTkaPz2jfDUReQo0-UY580U
INFO  22-01-15 18:27:12[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "Dongdaemun History & Culture Park",
               "short_name" : "Dongdaemun History & Culture Park",
               "types" : [
                  "establishment",
                  "point_of_interest",
                  "subway_station",
                  "transit_station"
               ]
            },
            {
               "long_name" : "Seoul",
               "short_name" : "Seoul",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "South Korea",
               "short_name" : "KR",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "100-197",
               "short_name" : "100-197",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Dongdaemun History & Culture Park, Seoul, South Korea",
         "geometry" : {
            "location" : {
               "lat" : 37.565682,
               "lng" : 127.008953
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : 37.5670309802915,
                  "lng" : 127.0103019802915
               },
               "southwest" : {
                  "lat" : 37.5643330197085,
                  "lng" : 127.0076040197085
               }
            }
         },
         "place_id" : "ChIJRTkaPz2jfDUReQo0-UY580U",
         "plus_code" : {
            "compound_code" : "H285+7H Seoul, South Korea",
            "global_code" : "8Q99H285+7H"
         },
         "types" : [
            "establishment",
            "point_of_interest",
            "subway_station",
            "transit_station"
         ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:27:12[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:27:12[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:27:12[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:27:12[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:27:12[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:27:12[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:27:12[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:45] - places: Dongdaemun History & Culture Park, Seoul, South Korea
INFO  22-01-15 18:27:12[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun History & Culture Park, Seoul, South Korea
ERROR 22-01-15 18:27:12[http-nio-8080-exec-10] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 138: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun History & Culture Park, Seoul, South Korea] with root cause
java.net.URISyntaxException: Illegal character in query at index 138: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Dongdaemun History & Culture Park, Seoul, South Korea
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:79)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:51)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:28)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$c66d1d8.getPlaces(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 18:28:16[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:28:16[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:28:16[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:16[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:16[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:28:16[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:16[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:45] - places: 뇨
INFO  22-01-15 18:28:16[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=뇨
INFO  22-01-15 18:28:16[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, Yongsan-gu, Hannam-dong, Hannam-daero 20-gil, 뇨끼바",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 66
            }
         ],
         "place_id" : "ChIJdX8XAzSjfDURRPCThwxWIqA",
         "reference" : "ChIJdX8XAzSjfDURRPCThwxWIqA",
         "structured_formatting" : {
            "main_text" : "뇨끼바",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Yongsan-gu, Hannam-dong, Hannam-daero 20-gil"
         },
         "terms" : [
            {
               "offset" : 66,
               "value" : "뇨끼바"
            },
            {
               "offset" : 45,
               "value" : "Hannam-daero 20-gil"
            },
            {
               "offset" : 32,
               "value" : "Hannam-dong"
            },
            {
               "offset" : 20,
               "value" : "Yongsan-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "restaurant", "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Liberia, 뇨켄",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 9
            }
         ],
         "place_id" : "ChIJp8krG10GmA8R2PvLJVi3Tjo",
         "reference" : "ChIJp8krG10GmA8R2PvLJVi3Tjo",
         "structured_formatting" : {
            "main_text" : "뇨켄",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Liberia"
         },
         "terms" : [
            {
               "offset" : 9,
               "value" : "뇨켄"
            },
            {
               "offset" : 0,
               "value" : "Liberia"
            }
         ],
         "types" : [ "administrative_area_level_2", "political", "geocode" ]
      },
      {
         "description" : "Kenya, 뇨타",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJIdxV0MMwKhgRh4z_UTfXTXA",
         "reference" : "ChIJIdxV0MMwKhgRh4z_UTfXTXA",
         "structured_formatting" : {
            "main_text" : "뇨타",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Kenya"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "뇨타"
            },
            {
               "offset" : 0,
               "value" : "Kenya"
            }
         ],
         "types" : [ "administrative_area_level_3", "political", "geocode" ]
      },
      {
         "description" : "Nigeria, 뇨이",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 9
            }
         ],
         "place_id" : "ChIJAXjPxXtjAhERadqK3hJCy0M",
         "reference" : "ChIJAXjPxXtjAhERadqK3hJCy0M",
         "structured_formatting" : {
            "main_text" : "뇨이",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Nigeria"
         },
         "terms" : [
            {
               "offset" : 9,
               "value" : "뇨이"
            },
            {
               "offset" : 0,
               "value" : "Nigeria"
            }
         ],
         "types" : [ "administrative_area_level_3", "political", "geocode" ]
      },
      {
         "description" : "South Korea, Gyeongsangnam-do, Jinhae-gu, Sokcheon-ro, 뇨니커피",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 55
            }
         ],
         "place_id" : "ChIJJZWRHRzTaDURJaKOZH_k3bE",
         "reference" : "ChIJJZWRHRzTaDURJaKOZH_k3bE",
         "structured_formatting" : {
            "main_text" : "뇨니커피",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Gyeongsangnam-do, Jinhae-gu, Sokcheon-ro"
         },
         "terms" : [
            {
               "offset" : 55,
               "value" : "뇨니커피"
            },
            {
               "offset" : 42,
               "value" : "Sokcheon-ro"
            },
            {
               "offset" : 31,
               "value" : "Jinhae-gu"
            },
            {
               "offset" : 13,
               "value" : "Gyeongsangnam-do"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "cafe", "food", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:28:16[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:28:16[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:28:16[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:16[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:16[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:28:16[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:16[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:45] - places: 뇽
INFO  22-01-15 18:28:16[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=뇽
INFO  22-01-15 18:28:17[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "South Korea, Seoul, Mapo-gu, Donggyo-dong, Yeonhui-ro, 뇽즈",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 55
            }
         ],
         "place_id" : "ChIJ2fnaL4OZfDURPNMV7D91qrs",
         "reference" : "ChIJ2fnaL4OZfDURPNMV7D91qrs",
         "structured_formatting" : {
            "main_text" : "뇽즈",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "South Korea, Seoul, Mapo-gu, Donggyo-dong, Yeonhui-ro"
         },
         "terms" : [
            {
               "offset" : 55,
               "value" : "뇽즈"
            },
            {
               "offset" : 43,
               "value" : "Yeonhui-ro"
            },
            {
               "offset" : 29,
               "value" : "Donggyo-dong"
            },
            {
               "offset" : 20,
               "value" : "Mapo-gu"
            },
            {
               "offset" : 13,
               "value" : "Seoul"
            },
            {
               "offset" : 0,
               "value" : "South Korea"
            }
         ],
         "types" : [ "restaurant", "food", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Tanzania, 뇽가",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 10
            }
         ],
         "place_id" : "ChIJB-Mgwm6kARkRmutokcK4eAI",
         "reference" : "ChIJB-Mgwm6kARkRmutokcK4eAI",
         "structured_formatting" : {
            "main_text" : "뇽가",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Tanzania"
         },
         "terms" : [
            {
               "offset" : 10,
               "value" : "뇽가"
            },
            {
               "offset" : 0,
               "value" : "Tanzania"
            }
         ],
         "types" : [ "administrative_area_level_4", "political", "geocode" ]
      },
      {
         "description" : "Tanzania, 뇽고웰",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 10
            }
         ],
         "place_id" : "ChIJ1ykZfgr68BgRnQWO0AxZ8t4",
         "reference" : "ChIJ1ykZfgr68BgRnQWO0AxZ8t4",
         "structured_formatting" : {
            "main_text" : "뇽고웰",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Tanzania"
         },
         "terms" : [
            {
               "offset" : 10,
               "value" : "뇽고웰"
            },
            {
               "offset" : 0,
               "value" : "Tanzania"
            }
         ],
         "types" : [ "administrative_area_level_4", "political", "geocode" ]
      },
      {
         "description" : "Kenya, 뇽고니",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 7
            }
         ],
         "place_id" : "ChIJ2eNlz5ESJxgRIwwURcc04V8",
         "reference" : "ChIJ2eNlz5ESJxgRIwwURcc04V8",
         "structured_formatting" : {
            "main_text" : "뇽고니",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Kenya"
         },
         "terms" : [
            {
               "offset" : 7,
               "value" : "뇽고니"
            },
            {
               "offset" : 0,
               "value" : "Kenya"
            }
         ],
         "types" : [ "administrative_area_level_4", "political", "geocode" ]
      },
      {
         "description" : "Solomon Islands, 뇽고실라",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 17
            }
         ],
         "place_id" : "ChIJU27AP812Jm8RHw3nwycmt9A",
         "reference" : "ChIJU27AP812Jm8RHw3nwycmt9A",
         "structured_formatting" : {
            "main_text" : "뇽고실라",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Solomon Islands"
         },
         "terms" : [
            {
               "offset" : 17,
               "value" : "뇽고실라"
            },
            {
               "offset" : 0,
               "value" : "Solomon Islands"
            }
         ],
         "types" : [ "natural_feature", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:28:30[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:28:30[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:28:30[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:30[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:30[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:28:30[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:30[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:45] - places: p
INFO  22-01-15 18:28:30[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=p
DEBUG 22-01-15 18:28:31[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
82. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

INFO  22-01-15 18:28:31[http-nio-8080-exec-6] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Phoenix, AZ, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJy3mhUO0SK4cRrBtKNfjHaYw",
         "reference" : "ChIJy3mhUO0SK4cRrBtKNfjHaYw",
         "structured_formatting" : {
            "main_text" : "Phoenix",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "AZ, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Phoenix"
            },
            {
               "offset" : 9,
               "value" : "AZ"
            },
            {
               "offset" : 13,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Portland, OR, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJJ3SpfQsLlVQRkYXR9ua5Nhw",
         "reference" : "ChIJJ3SpfQsLlVQRkYXR9ua5Nhw",
         "structured_formatting" : {
            "main_text" : "Portland",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "OR, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Portland"
            },
            {
               "offset" : 10,
               "value" : "OR"
            },
            {
               "offset" : 14,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Paris, France",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJD7fiBh9u5kcRYJSMaMOCCwQ",
         "reference" : "ChIJD7fiBh9u5kcRYJSMaMOCCwQ",
         "structured_formatting" : {
            "main_text" : "Paris",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "France"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Paris"
            },
            {
               "offset" : 7,
               "value" : "France"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Pune, Maharashtra, India",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJARFGZy6_wjsRQ-Oenb9DjYI",
         "reference" : "ChIJARFGZy6_wjsRQ-Oenb9DjYI",
         "structured_formatting" : {
            "main_text" : "Pune",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Maharashtra, India"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pune"
            },
            {
               "offset" : 6,
               "value" : "Maharashtra"
            },
            {
               "offset" : 19,
               "value" : "India"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Philadelphia, PA, USA",
         "matched_substrings" : [
            {
               "length" : 1,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ60u11Ni3xokRwVg-jNgU9Yk",
         "reference" : "ChIJ60u11Ni3xokRwVg-jNgU9Yk",
         "structured_formatting" : {
            "main_text" : "Philadelphia",
            "main_text_matched_substrings" : [
               {
                  "length" : 1,
                  "offset" : 0
               }
            ],
            "secondary_text" : "PA, USA"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Philadelphia"
            },
            {
               "offset" : 14,
               "value" : "PA"
            },
            {
               "offset" : 18,
               "value" : "USA"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:28:31[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
82. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:28:31[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:31[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:31[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:28:31[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:31[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:45] - places: py
INFO  22-01-15 18:28:31[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=py
INFO  22-01-15 18:28:31[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Pyrzowice Airport, Wolności, Ożarowice, Poland",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJLb2T-1sqF0cR3zFjIxMOr7w",
         "reference" : "ChIJLb2T-1sqF0cR3zFjIxMOr7w",
         "structured_formatting" : {
            "main_text" : "Pyrzowice Airport",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Wolności, Ożarowice, Poland"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyrzowice Airport"
            },
            {
               "offset" : 19,
               "value" : "Wolności"
            },
            {
               "offset" : 29,
               "value" : "Ożarowice"
            },
            {
               "offset" : 40,
               "value" : "Poland"
            }
         ],
         "types" : [ "airport", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Pyongyang, North Korea",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJN0NP5toCfjURlapxF-J3BtQ",
         "reference" : "ChIJN0NP5toCfjURlapxF-J3BtQ",
         "structured_formatting" : {
            "main_text" : "Pyongyang",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "North Korea"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyongyang"
            },
            {
               "offset" : 11,
               "value" : "North Korea"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Pyrmont NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJAWLZAzSuEmsRkMcyFmh9AQU",
         "reference" : "ChIJAWLZAzSuEmsRkMcyFmh9AQU",
         "structured_formatting" : {
            "main_text" : "Pyrmont",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyrmont"
            },
            {
               "offset" : 8,
               "value" : "NSW"
            },
            {
               "offset" : 13,
               "value" : "Australia"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Pyrenees",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ1SMgIIukqBIR1iKlhWfYERc",
         "reference" : "ChIJ1SMgIIukqBIR1iKlhWfYERc",
         "structured_formatting" : {
            "main_text" : "Pyrenees",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ]
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyrenees"
            }
         ],
         "types" : [ "natural_feature", "establishment" ]
      },
      {
         "description" : "pyramid of giza, Al Haram, Nazlet El-Semman, Al Giza Desert, Egypt",
         "matched_substrings" : [
            {
               "length" : 2,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJGymPrIdFWBQRJCSloj8vDIE",
         "reference" : "ChIJGymPrIdFWBQRJCSloj8vDIE",
         "structured_formatting" : {
            "main_text" : "pyramid of giza",
            "main_text_matched_substrings" : [
               {
                  "length" : 2,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Al Haram, Nazlet El-Semman, Al Giza Desert, Egypt"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "pyramid of giza"
            },
            {
               "offset" : 17,
               "value" : "Al Haram"
            },
            {
               "offset" : 27,
               "value" : "Nazlet El-Semman"
            },
            {
               "offset" : 45,
               "value" : "Al Giza Desert"
            },
            {
               "offset" : 61,
               "value" : "Egypt"
            }
         ],
         "types" : [ "tourist_attraction", "premise", "point_of_interest", "establishment" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:28:31[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:28:31[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:28:31[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:31[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:31[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:28:31[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:31[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:45] - places: pyr
INFO  22-01-15 18:28:31[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=pyr
INFO  22-01-15 18:28:31[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Pyrzowice Airport, Wolności, Ożarowice, Poland",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJLb2T-1sqF0cR3zFjIxMOr7w",
         "reference" : "ChIJLb2T-1sqF0cR3zFjIxMOr7w",
         "structured_formatting" : {
            "main_text" : "Pyrzowice Airport",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Wolności, Ożarowice, Poland"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyrzowice Airport"
            },
            {
               "offset" : 19,
               "value" : "Wolności"
            },
            {
               "offset" : 29,
               "value" : "Ożarowice"
            },
            {
               "offset" : 40,
               "value" : "Poland"
            }
         ],
         "types" : [ "airport", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Pyrmont NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJAWLZAzSuEmsRkMcyFmh9AQU",
         "reference" : "ChIJAWLZAzSuEmsRkMcyFmh9AQU",
         "structured_formatting" : {
            "main_text" : "Pyrmont",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyrmont"
            },
            {
               "offset" : 8,
               "value" : "NSW"
            },
            {
               "offset" : 13,
               "value" : "Australia"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Pyrenees",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJ1SMgIIukqBIR1iKlhWfYERc",
         "reference" : "ChIJ1SMgIIukqBIR1iKlhWfYERc",
         "structured_formatting" : {
            "main_text" : "Pyrenees",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ]
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyrenees"
            }
         ],
         "types" : [ "natural_feature", "establishment" ]
      },
      {
         "description" : "pyramid of giza, Al Haram, Nazlet El-Semman, Al Giza Desert, Egypt",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJGymPrIdFWBQRJCSloj8vDIE",
         "reference" : "ChIJGymPrIdFWBQRJCSloj8vDIE",
         "structured_formatting" : {
            "main_text" : "pyramid of giza",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Al Haram, Nazlet El-Semman, Al Giza Desert, Egypt"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "pyramid of giza"
            },
            {
               "offset" : 17,
               "value" : "Al Haram"
            },
            {
               "offset" : 27,
               "value" : "Nazlet El-Semman"
            },
            {
               "offset" : 45,
               "value" : "Al Giza Desert"
            },
            {
               "offset" : 61,
               "value" : "Egypt"
            }
         ],
         "types" : [ "tourist_attraction", "premise", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Pyramids Gardens, Al Haram, Egypt",
         "matched_substrings" : [
            {
               "length" : 3,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJO0wNg-tPWBQRg9AkrI4jx_Q",
         "reference" : "ChIJO0wNg-tPWBQRg9AkrI4jx_Q",
         "structured_formatting" : {
            "main_text" : "Pyramids Gardens",
            "main_text_matched_substrings" : [
               {
                  "length" : 3,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Al Haram, Egypt"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyramids Gardens"
            },
            {
               "offset" : 18,
               "value" : "Al Haram"
            },
            {
               "offset" : 28,
               "value" : "Egypt"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:28:32[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:28:32[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:28:32[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:32[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:32[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:28:32[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:32[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:45] - places: pyrmont
INFO  22-01-15 18:28:32[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=pyrmont
INFO  22-01-15 18:28:32[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:53] - Responded Places info:{
   "predictions" : [
      {
         "description" : "Pyrmont NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 7,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJAWLZAzSuEmsRkMcyFmh9AQU",
         "reference" : "ChIJAWLZAzSuEmsRkMcyFmh9AQU",
         "structured_formatting" : {
            "main_text" : "Pyrmont",
            "main_text_matched_substrings" : [
               {
                  "length" : 7,
                  "offset" : 0
               }
            ],
            "secondary_text" : "NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyrmont"
            },
            {
               "offset" : 8,
               "value" : "NSW"
            },
            {
               "offset" : 13,
               "value" : "Australia"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      },
      {
         "description" : "Pyrmont Bridge Hotel, Union Street, Pyrmont NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 7,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJAzQBQzeuEmsRh4OdJApC4MU",
         "reference" : "ChIJAzQBQzeuEmsRh4OdJApC4MU",
         "structured_formatting" : {
            "main_text" : "Pyrmont Bridge Hotel",
            "main_text_matched_substrings" : [
               {
                  "length" : 7,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Union Street, Pyrmont NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyrmont Bridge Hotel"
            },
            {
               "offset" : 22,
               "value" : "Union Street"
            },
            {
               "offset" : 36,
               "value" : "Pyrmont"
            },
            {
               "offset" : 44,
               "value" : "NSW"
            },
            {
               "offset" : 49,
               "value" : "Australia"
            }
         ],
         "types" : [ "bar", "point_of_interest", "establishment" ]
      },
      {
         "description" : "Pyrmont Bay Wharf, New South Wales, Australia",
         "matched_substrings" : [
            {
               "length" : 7,
               "offset" : 0
            }
         ],
         "place_id" : "ChIJYbz8KDiuEmsRYqsvEWrSpsA",
         "reference" : "ChIJYbz8KDiuEmsRYqsvEWrSpsA",
         "structured_formatting" : {
            "main_text" : "Pyrmont Bay Wharf",
            "main_text_matched_substrings" : [
               {
                  "length" : 7,
                  "offset" : 0
               }
            ],
            "secondary_text" : "New South Wales, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyrmont Bay Wharf"
            },
            {
               "offset" : 19,
               "value" : "New South Wales"
            },
            {
               "offset" : 36,
               "value" : "Australia"
            }
         ],
         "types" : [ "premise", "geocode" ]
      },
      {
         "description" : "Pyrmont Street, Pyrmont NSW, Australia",
         "matched_substrings" : [
            {
               "length" : 7,
               "offset" : 0
            }
         ],
         "place_id" : "EiZQeXJtb250IFN0cmVldCwgUHlybW9udCBOU1csIEF1c3RyYWxpYSIuKiwKFAoSCQNjxegwrhJrEcSk8LdoItkaEhQKEgkBYtkDNK4SaxGQxzIWaH0BBQ",
         "reference" : "EiZQeXJtb250IFN0cmVldCwgUHlybW9udCBOU1csIEF1c3RyYWxpYSIuKiwKFAoSCQNjxegwrhJrEcSk8LdoItkaEhQKEgkBYtkDNK4SaxGQxzIWaH0BBQ",
         "structured_formatting" : {
            "main_text" : "Pyrmont Street",
            "main_text_matched_substrings" : [
               {
                  "length" : 7,
                  "offset" : 0
               }
            ],
            "secondary_text" : "Pyrmont NSW, Australia"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Pyrmont Street"
            },
            {
               "offset" : 16,
               "value" : "Pyrmont"
            },
            {
               "offset" : 24,
               "value" : "NSW"
            },
            {
               "offset" : 29,
               "value" : "Australia"
            }
         ],
         "types" : [ "route", "geocode" ]
      },
      {
         "description" : "Bad Pyrmont, Germany",
         "matched_substrings" : [
            {
               "length" : 7,
               "offset" : 4
            }
         ],
         "place_id" : "ChIJzSIMGWPzukcRQEqslG2sJQQ",
         "reference" : "ChIJzSIMGWPzukcRQEqslG2sJQQ",
         "structured_formatting" : {
            "main_text" : "Bad Pyrmont",
            "main_text_matched_substrings" : [
               {
                  "length" : 7,
                  "offset" : 4
               }
            ],
            "secondary_text" : "Germany"
         },
         "terms" : [
            {
               "offset" : 0,
               "value" : "Bad Pyrmont"
            },
            {
               "offset" : 13,
               "value" : "Germany"
            }
         ],
         "types" : [ "locality", "political", "geocode" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:28:38[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:28:38[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:28:38[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:38[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:38[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places/EiZQeXJtb250IFN0cmVldCwgUHlybW9udCBOU1csIEF1c3RyYWxpYSIuKiwKFAoSCQNjxegwrhJrEcSk8LdoItkaEhQKEgkBYtkDNK4SaxGQxzIWaH0BBQ
INFO  22-01-15 18:28:38[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:38[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=EiZQeXJtb250IFN0cmVldCwgUHlybW9udCBOU1csIEF1c3RyYWxpYSIuKiwKFAoSCQNjxegwrhJrEcSk8LdoItkaEhQKEgkBYtkDNK4SaxGQxzIWaH0BBQ
INFO  22-01-15 18:28:38[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "Pyrmont Street",
               "short_name" : "Pyrmont St",
               "types" : [ "route" ]
            },
            {
               "long_name" : "Pyrmont",
               "short_name" : "Pyrmont",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "City of Sydney",
               "short_name" : "City of Sydney",
               "types" : [ "administrative_area_level_2", "political" ]
            },
            {
               "long_name" : "New South Wales",
               "short_name" : "NSW",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Australia",
               "short_name" : "AU",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "2009",
               "short_name" : "2009",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Pyrmont St, Pyrmont NSW 2009, Australia",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : -33.86715859999997,
                  "lng" : 151.1989754
               },
               "southwest" : {
                  "lat" : -33.87654260000002,
                  "lng" : 151.1936681
               }
            },
            "location" : {
               "lat" : -33.8721678,
               "lng" : 151.1965581
            },
            "location_type" : "GEOMETRIC_CENTER",
            "viewport" : {
               "northeast" : {
                  "lat" : -33.86715859999997,
                  "lng" : 151.1989754
               },
               "southwest" : {
                  "lat" : -33.87654260000002,
                  "lng" : 151.1936681
               }
            }
         },
         "place_id" : "EiZQeXJtb250IFN0cmVldCwgUHlybW9udCBOU1csIEF1c3RyYWxpYSIuKiwKFAoSCQNjxegwrhJrEcSk8LdoItkaEhQKEgkBYtkDNK4SaxGQxzIWaH0BBQ",
         "types" : [ "route" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:28:38[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:28:38[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:28:38[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:38[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:38[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:28:38[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:38[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:45] - places: Pyrmont St, Pyrmont NSW 2009, Australia
INFO  22-01-15 18:28:38[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Pyrmont St, Pyrmont NSW 2009, Australia
ERROR 22-01-15 18:28:38[http-nio-8080-exec-7] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 135: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Pyrmont St, Pyrmont NSW 2009, Australia] with root cause
java.net.URISyntaxException: Illegal character in query at index 135: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Pyrmont St, Pyrmont NSW 2009, Australia
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:79)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:51)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:28)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$c66d1d8.getPlaces(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 18:28:48[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
82. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:28:48[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
82. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:28:48[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:48[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:48[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/location/places/ChIJAzQBQzeuEmsRh4OdJApC4MU
INFO  22-01-15 18:28:48[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:48[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJAzQBQzeuEmsRh4OdJApC4MU
INFO  22-01-15 18:28:49[http-nio-8080-exec-8] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "96",
               "short_name" : "96",
               "types" : [ "street_number" ]
            },
            {
               "long_name" : "Union Street",
               "short_name" : "Union St",
               "types" : [ "route" ]
            },
            {
               "long_name" : "Pyrmont",
               "short_name" : "Pyrmont",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "City of Sydney",
               "short_name" : "City of Sydney",
               "types" : [ "administrative_area_level_2", "political" ]
            },
            {
               "long_name" : "New South Wales",
               "short_name" : "NSW",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Australia",
               "short_name" : "AU",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "2009",
               "short_name" : "2009",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "96 Union St, Pyrmont NSW 2009, Australia",
         "geometry" : {
            "location" : {
               "lat" : -33.8697811,
               "lng" : 151.1977219
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : -33.86852141970849,
                  "lng" : 151.1990230802915
               },
               "southwest" : {
                  "lat" : -33.87121938029149,
                  "lng" : 151.1963251197085
               }
            }
         },
         "place_id" : "ChIJAzQBQzeuEmsRh4OdJApC4MU",
         "plus_code" : {
            "compound_code" : "45JX+33 Pyrmont NSW, Australia",
            "global_code" : "4RRH45JX+33"
         },
         "types" : [ "bar", "establishment", "point_of_interest" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:28:49[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:28:49[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:28:49[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:49[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:49[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:28:49[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:49[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:45] - places: 96 Union St, Pyrmont NSW 2009, Australia
INFO  22-01-15 18:28:49[http-nio-8080-exec-10] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=96 Union St, Pyrmont NSW 2009, Australia
ERROR 22-01-15 18:28:49[http-nio-8080-exec-10] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 130: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=96 Union St, Pyrmont NSW 2009, Australia] with root cause
java.net.URISyntaxException: Illegal character in query at index 130: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=96 Union St, Pyrmont NSW 2009, Australia
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:79)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:51)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:28)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$c66d1d8.getPlaces(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
DEBUG 22-01-15 18:28:53[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:28:53[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:28:53[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:28:53[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:28:53[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places/ChIJAzQBQzeuEmsRh4OdJApC4MU
INFO  22-01-15 18:28:53[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:28:53[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJAzQBQzeuEmsRh4OdJApC4MU
INFO  22-01-15 18:28:53[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "96",
               "short_name" : "96",
               "types" : [ "street_number" ]
            },
            {
               "long_name" : "Union Street",
               "short_name" : "Union St",
               "types" : [ "route" ]
            },
            {
               "long_name" : "Pyrmont",
               "short_name" : "Pyrmont",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "City of Sydney",
               "short_name" : "City of Sydney",
               "types" : [ "administrative_area_level_2", "political" ]
            },
            {
               "long_name" : "New South Wales",
               "short_name" : "NSW",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Australia",
               "short_name" : "AU",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "2009",
               "short_name" : "2009",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "96 Union St, Pyrmont NSW 2009, Australia",
         "geometry" : {
            "location" : {
               "lat" : -33.8697811,
               "lng" : 151.1977219
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : -33.86852141970849,
                  "lng" : 151.1990230802915
               },
               "southwest" : {
                  "lat" : -33.87121938029149,
                  "lng" : 151.1963251197085
               }
            }
         },
         "place_id" : "ChIJAzQBQzeuEmsRh4OdJApC4MU",
         "plus_code" : {
            "compound_code" : "45JX+33 Pyrmont NSW, Australia",
            "global_code" : "4RRH45JX+33"
         },
         "types" : [ "bar", "establishment", "point_of_interest" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:31:33[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:31:33[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:31:33[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:31:33[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:31:33[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/location/places/ChIJAWLZAzSuEmsRkMcyFmh9AQU
INFO  22-01-15 18:31:33[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:31:33[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJAWLZAzSuEmsRkMcyFmh9AQU
INFO  22-01-15 18:31:34[http-nio-8080-exec-4] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "Pyrmont",
               "short_name" : "Pyrmont",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "City of Sydney",
               "short_name" : "City of Sydney",
               "types" : [ "administrative_area_level_2", "political" ]
            },
            {
               "long_name" : "New South Wales",
               "short_name" : "NSW",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Australia",
               "short_name" : "AU",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "2009",
               "short_name" : "2009",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "Pyrmont NSW 2009, Australia",
         "geometry" : {
            "bounds" : {
               "northeast" : {
                  "lat" : -33.8625142,
                  "lng" : 151.198773
               },
               "southwest" : {
                  "lat" : -33.8760938,
                  "lng" : 151.186625
               }
            },
            "location" : {
               "lat" : -33.8713786,
               "lng" : 151.1949048
            },
            "location_type" : "APPROXIMATE",
            "viewport" : {
               "northeast" : {
                  "lat" : -33.8625142,
                  "lng" : 151.198773
               },
               "southwest" : {
                  "lat" : -33.8760938,
                  "lng" : 151.186625
               }
            }
         },
         "place_id" : "ChIJAWLZAzSuEmsRkMcyFmh9AQU",
         "types" : [ "locality", "political" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:31:34[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:31:34[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:31:34[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:31:34[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:31:34[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:31:34[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:31:34[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:45] - places: Pyrmont NSW 2009, Australia
INFO  22-01-15 18:31:34[http-nio-8080-exec-7] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Pyrmont NSW 2009, Australia
ERROR 22-01-15 18:31:34[http-nio-8080-exec-7] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 135: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Pyrmont NSW 2009, Australia] with root cause
java.net.URISyntaxException: Illegal character in query at index 135: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Pyrmont NSW 2009, Australia
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:79)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:51)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:28)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$c66d1d8.getPlaces(<generated>)
	at jdk.internal.reflect.GeneratedMethodAccessor234.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
INFO  22-01-15 18:32:29[Thread-35] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 18:32:29[Thread-35] [HikariDataSource:350] - HikariPool-9 - Shutdown initiated...
INFO  22-01-15 18:32:29[Thread-35] [HikariDataSource:352] - HikariPool-9 - Shutdown completed.
INFO  22-01-15 18:32:30[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 18:32:30[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 18:32:35[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 18:32:37[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1948 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 18:32:38[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 18:32:39[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 18:32:39[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:32:39[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 18:32:39[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 18:32:39[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 18:32:39[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9744 ms
INFO  22-01-15 18:32:40[restartedMain] [HikariDataSource:110] - HikariPool-10 - Starting...
INFO  22-01-15 18:32:40[restartedMain] [HikariDataSource:123] - HikariPool-10 - Start completed.
INFO  22-01-15 18:32:41[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 18:32:41[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 18:32:42[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 18:32:42[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 18:32:42[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 18:32:44[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 02c30392-16fd-41e7-8e6a-712f272ec5b8

INFO  22-01-15 18:32:45[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@16040f44, org.springframework.security.web.context.SecurityContextPersistenceFilter@24166f6d, org.springframework.security.web.header.HeaderWriterFilter@32b7828e, org.springframework.web.filter.CorsFilter@15bea304, org.springframework.security.web.authentication.logout.LogoutFilter@3e1ae58b, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@f5b8848, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7ed6b35, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@9c03ab4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1042b5bb, org.springframework.security.web.session.SessionManagementFilter@5d8fb1e0, org.springframework.security.web.access.ExceptionTranslationFilter@6598c802]
INFO  22-01-15 18:32:46[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 18:32:47[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:32:47[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 18:32:47[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 17.468 seconds (JVM running for 3186.95)
INFO  22-01-15 18:32:47[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 18:34:04[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 18:34:04[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 18:34:04[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 6 ms
DEBUG 22-01-15 18:34:04[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:34:04[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:34:04[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:34:04[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:34:04[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places/ChIJAzQBQzeuEmsRh4OdJApC4MU
INFO  22-01-15 18:34:04[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:34:04[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:60] - place_id: ChIJAzQBQzeuEmsRh4OdJApC4MU
INFO  22-01-15 18:34:04[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:64] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJAzQBQzeuEmsRh4OdJApC4MU
INFO  22-01-15 18:34:04[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:68] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "96",
               "short_name" : "96",
               "types" : [ "street_number" ]
            },
            {
               "long_name" : "Union Street",
               "short_name" : "Union St",
               "types" : [ "route" ]
            },
            {
               "long_name" : "Pyrmont",
               "short_name" : "Pyrmont",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "City of Sydney",
               "short_name" : "City of Sydney",
               "types" : [ "administrative_area_level_2", "political" ]
            },
            {
               "long_name" : "New South Wales",
               "short_name" : "NSW",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Australia",
               "short_name" : "AU",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "2009",
               "short_name" : "2009",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "96 Union St, Pyrmont NSW 2009, Australia",
         "geometry" : {
            "location" : {
               "lat" : -33.8697811,
               "lng" : 151.1977219
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : -33.86852141970849,
                  "lng" : 151.1990230802915
               },
               "southwest" : {
                  "lat" : -33.87121938029149,
                  "lng" : 151.1963251197085
               }
            }
         },
         "place_id" : "ChIJAzQBQzeuEmsRh4OdJApC4MU",
         "plus_code" : {
            "compound_code" : "45JX+33 Pyrmont NSW, Australia",
            "global_code" : "4RRH45JX+33"
         },
         "types" : [ "bar", "establishment", "point_of_interest" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:34:04[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:34:04[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 18:34:04[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:34:04[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:34:04[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:34:04[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:34:04[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:45] - places: 96 Union St, Pyrmont NSW 2009, Australia
INFO  22-01-15 18:34:04[http-nio-8080-exec-2] [LocationApiLogicServiceImpl:49] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=96 Union St, Pyrmont NSW 2009, Australia
ERROR 22-01-15 18:34:04[http-nio-8080-exec-2] [[dispatcherServlet]:175] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalArgumentException: Illegal character in query at index 130: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=96 Union St, Pyrmont NSW 2009, Australia] with root cause
java.net.URISyntaxException: Illegal character in query at index 130: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=96 Union St, Pyrmont NSW 2009, Australia
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3172)
	at java.base/java.net.URI$Parser.parse(URI.java:3114)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.request(LocationApiLogicServiceImpl.java:79)
	at com.example.gradlebnbadminapi.service.LocationApiLogicServiceImpl.getPlaces(LocationApiLogicServiceImpl.java:51)
	at com.example.gradlebnbadminapi.controller.LocationController.getPlaces(LocationController.java:28)
	at com.example.gradlebnbadminapi.controller.LocationController$$FastClassBySpringCGLIB$$ca51ad5e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.example.gradlebnbadminapi.controller.LocationController$$EnhancerBySpringCGLIB$$c66d1d8.getPlaces(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:121)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:35)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:540)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:895)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1722)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:829)
INFO  22-01-15 18:37:15[Thread-39] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 18:37:15[Thread-39] [HikariDataSource:350] - HikariPool-10 - Shutdown initiated...
INFO  22-01-15 18:37:15[Thread-39] [HikariDataSource:352] - HikariPool-10 - Shutdown completed.
INFO  22-01-15 18:37:16[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 18:37:16[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 18:37:21[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 18:37:23[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 2055 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 18:37:24[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 18:37:25[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 18:37:25[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:37:25[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 18:37:25[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 18:37:25[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 18:37:25[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 9221 ms
INFO  22-01-15 18:37:25[restartedMain] [HikariDataSource:110] - HikariPool-11 - Starting...
INFO  22-01-15 18:37:25[restartedMain] [HikariDataSource:123] - HikariPool-11 - Start completed.
INFO  22-01-15 18:37:26[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 18:37:26[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 18:37:27[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 18:37:27[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 18:37:27[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 18:37:29[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: bd15b733-9c8c-4f06-aa27-e85b0462697d

INFO  22-01-15 18:37:30[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@526c65a0, org.springframework.security.web.context.SecurityContextPersistenceFilter@309e2215, org.springframework.security.web.header.HeaderWriterFilter@2bdabfbe, org.springframework.web.filter.CorsFilter@21d1e45a, org.springframework.security.web.authentication.logout.LogoutFilter@3090a52d, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@23cc28dc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@56c3ecd1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@289a9ef8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@35de2129, org.springframework.security.web.session.SessionManagementFilter@ada68da, org.springframework.security.web.access.ExceptionTranslationFilter@542653a4]
INFO  22-01-15 18:37:30[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 18:37:30[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:37:30[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 18:37:30[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 15.333 seconds (JVM running for 3470.834)
INFO  22-01-15 18:37:30[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 18:38:01[Thread-43] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 18:38:01[Thread-43] [HikariDataSource:350] - HikariPool-11 - Shutdown initiated...
INFO  22-01-15 18:38:01[Thread-43] [HikariDataSource:352] - HikariPool-11 - Shutdown completed.
INFO  22-01-15 18:38:02[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 18:38:02[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 18:38:07[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 18:38:09[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 1879 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 18:38:10[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 18:38:10[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 18:38:10[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:38:10[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 18:38:10[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 18:38:11[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 18:38:11[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 8800 ms
INFO  22-01-15 18:38:11[restartedMain] [HikariDataSource:110] - HikariPool-12 - Starting...
INFO  22-01-15 18:38:11[restartedMain] [HikariDataSource:123] - HikariPool-12 - Start completed.
INFO  22-01-15 18:38:12[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 18:38:12[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 18:38:13[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 18:38:13[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 18:38:13[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
WARN  22-01-15 18:38:14[restartedMain] [AnnotationConfigServletWebServerApplicationContext:591] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'locationController': Unsatisfied dependency expressed through field 'locationApiLogicService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
INFO  22-01-15 18:38:14[restartedMain] [LocalContainerEntityManagerFactoryBean:651] - Closing JPA EntityManagerFactory for persistence unit 'default'
INFO  22-01-15 18:38:14[restartedMain] [HikariDataSource:350] - HikariPool-12 - Shutdown initiated...
INFO  22-01-15 18:38:14[restartedMain] [HikariDataSource:352] - HikariPool-12 - Shutdown completed.
INFO  22-01-15 18:38:14[restartedMain] [StandardService:173] - Stopping service [Tomcat]
INFO  22-01-15 18:38:14[restartedMain] [ConditionEvaluationReportLoggingListener:136] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
ERROR 22-01-15 18:38:14[restartedMain] [LoggingFailureAnalysisReporter:40] - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field locationApiLogicService in com.example.gradlebnbadminapi.controller.LocationController required a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.example.gradlebnbadminapi.service.LocationApiLogicService' in your configuration.

INFO  22-01-15 18:41:27[restartedMain] [GradleBnbAdminApiApplication:55] - Starting GradleBnbAdminApiApplication using Java 11.0.11 on ba08d2c6f34e with PID 277 (/api/gradle-bnb-admin-api/build/classes/java/main started by root in /api/gradle-bnb-admin-api)
INFO  22-01-15 18:41:27[restartedMain] [GradleBnbAdminApiApplication:663] - The following profiles are active: dev
INFO  22-01-15 18:41:30[restartedMain] [RepositoryConfigurationDelegate:132] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
INFO  22-01-15 18:41:31[restartedMain] [RepositoryConfigurationDelegate:201] - Finished Spring Data repository scanning in 962 ms. Found 9 JPA repository interfaces.
WARN  22-01-15 18:41:32[restartedMain] [ClassPathMapperScanner:44] - No MyBatis mapper was found in '[com.example.gradlebnbadminapi]' package. Please check your configuration.
INFO  22-01-15 18:41:32[restartedMain] [TomcatWebServer:108] - Tomcat initialized with port(s): 8080 (http)
INFO  22-01-15 18:41:32[restartedMain] [Http11NioProtocol:173] - Initializing ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:41:32[restartedMain] [StandardService:173] - Starting service [Tomcat]
INFO  22-01-15 18:41:32[restartedMain] [StandardEngine:173] - Starting Servlet engine: [Apache Tomcat/9.0.54]
INFO  22-01-15 18:41:32[restartedMain] [[/]:173] - Initializing Spring embedded WebApplicationContext
INFO  22-01-15 18:41:32[restartedMain] [ServletWebServerApplicationContext:290] - Root WebApplicationContext: initialization completed in 5678 ms
INFO  22-01-15 18:41:32[restartedMain] [HikariDataSource:110] - HikariPool-13 - Starting...
INFO  22-01-15 18:41:32[restartedMain] [HikariDataSource:123] - HikariPool-13 - Start completed.
INFO  22-01-15 18:41:33[restartedMain] [LogHelper:31] - HHH000204: Processing PersistenceUnitInfo [name: default]
INFO  22-01-15 18:41:33[restartedMain] [Dialect:175] - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
INFO  22-01-15 18:41:33[restartedMain] [JtaPlatformInitiator:52] - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
INFO  22-01-15 18:41:33[restartedMain] [LocalContainerEntityManagerFactoryBean:437] - Initialized JPA EntityManagerFactory for persistence unit 'default'
WARN  22-01-15 18:41:33[restartedMain] [JpaBaseConfiguration$JpaWebConfiguration:219] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
INFO  22-01-15 18:41:35[restartedMain] [UserDetailsServiceAutoConfiguration:86] - 

Using generated security password: 629446c9-6c63-4fb5-a877-41daa7860ba0

INFO  22-01-15 18:41:35[restartedMain] [DefaultSecurityFilterChain:51] - Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4fc443d0, org.springframework.security.web.context.SecurityContextPersistenceFilter@f84a8a5, org.springframework.security.web.header.HeaderWriterFilter@716ab1fa, org.springframework.web.filter.CorsFilter@574e6319, org.springframework.security.web.authentication.logout.LogoutFilter@11ac3883, com.example.gradlebnbadminapi.filters.JwtAuthenticationFilter@54258106, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@aab046c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2eea81a2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@22b94c39, org.springframework.security.web.session.SessionManagementFilter@4bebda63, org.springframework.security.web.access.ExceptionTranslationFilter@1e93672e]
INFO  22-01-15 18:41:36[restartedMain] [OptionalLiveReloadServer:58] - LiveReload server is running on port 35729
INFO  22-01-15 18:41:36[restartedMain] [Http11NioProtocol:173] - Starting ProtocolHandler ["http-nio-8080"]
INFO  22-01-15 18:41:36[restartedMain] [TomcatWebServer:220] - Tomcat started on port(s): 8080 (http) with context path ''
INFO  22-01-15 18:41:36[restartedMain] [GradleBnbAdminApiApplication:61] - Started GradleBnbAdminApiApplication in 9.93 seconds (JVM running for 3716.344)
INFO  22-01-15 18:41:36[restartedMain] [ConditionEvaluationDeltaLoggingListener:63] - Condition evaluation unchanged
INFO  22-01-15 18:41:48[http-nio-8080-exec-1] [[/]:173] - Initializing Spring DispatcherServlet 'dispatcherServlet'
INFO  22-01-15 18:41:48[http-nio-8080-exec-1] [DispatcherServlet:525] - Initializing Servlet 'dispatcherServlet'
INFO  22-01-15 18:41:48[http-nio-8080-exec-1] [DispatcherServlet:547] - Completed initialization in 1 ms
DEBUG 22-01-15 18:41:48[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:41:48[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 18:41:48[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:41:48[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:41:48[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/location/places/ChIJAzQBQzeuEmsRh4OdJApC4MU
INFO  22-01-15 18:41:48[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:41:48[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:62] - place_id: ChIJAzQBQzeuEmsRh4OdJApC4MU
INFO  22-01-15 18:41:48[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:66] - Google Places Url: https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&place_id=ChIJAzQBQzeuEmsRh4OdJApC4MU
INFO  22-01-15 18:41:48[http-nio-8080-exec-1] [LocationApiLogicServiceImpl:70] - Responded Places info:{
   "results" : [
      {
         "address_components" : [
            {
               "long_name" : "96",
               "short_name" : "96",
               "types" : [ "street_number" ]
            },
            {
               "long_name" : "Union Street",
               "short_name" : "Union St",
               "types" : [ "route" ]
            },
            {
               "long_name" : "Pyrmont",
               "short_name" : "Pyrmont",
               "types" : [ "locality", "political" ]
            },
            {
               "long_name" : "City of Sydney",
               "short_name" : "City of Sydney",
               "types" : [ "administrative_area_level_2", "political" ]
            },
            {
               "long_name" : "New South Wales",
               "short_name" : "NSW",
               "types" : [ "administrative_area_level_1", "political" ]
            },
            {
               "long_name" : "Australia",
               "short_name" : "AU",
               "types" : [ "country", "political" ]
            },
            {
               "long_name" : "2009",
               "short_name" : "2009",
               "types" : [ "postal_code" ]
            }
         ],
         "formatted_address" : "96 Union St, Pyrmont NSW 2009, Australia",
         "geometry" : {
            "location" : {
               "lat" : -33.8697811,
               "lng" : 151.1977219
            },
            "location_type" : "ROOFTOP",
            "viewport" : {
               "northeast" : {
                  "lat" : -33.86852141970849,
                  "lng" : 151.1990230802915
               },
               "southwest" : {
                  "lat" : -33.87121938029149,
                  "lng" : 151.1963251197085
               }
            }
         },
         "place_id" : "ChIJAzQBQzeuEmsRh4OdJApC4MU",
         "plus_code" : {
            "compound_code" : "45JX+33 Pyrmont NSW, Australia",
            "global_code" : "4RRH45JX+33"
         },
         "types" : [ "bar", "establishment", "point_of_interest" ]
      }
   ],
   "status" : "OK"
}

DEBUG 22-01-15 18:42:39[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 18:42:39[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 18:42:39[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 18:42:39[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 18:42:39[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/location/places
INFO  22-01-15 18:42:39[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 18:42:39[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:47] - places: Recommanded places nearby
INFO  22-01-15 18:42:39[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:51] - Google Places Url: https://maps.googleapis.com/maps/api/place/queryautocomplete/json?key=AIzaSyBy-JKAaKlSZxFpf2AzD2Nsh8aqpXAJSMc&language=en&input=Recommanded+places+nearby
INFO  22-01-15 18:42:39[http-nio-8080-exec-3] [LocationApiLogicServiceImpl:55] - Responded Places info:{
   "predictions" : [],
   "status" : "ZERO_RESULTS"
}

DEBUG 22-01-15 19:05:29[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:05:29[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 19:05:29[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:05:29[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:05:29[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:05:29[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:05:29[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:05:30[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:05:30[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:09:47[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:09:47[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:09:47[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:09:47[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:09:47[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:09:47[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:09:47[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:09:47[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
121. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 19:09:47[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:12:18[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:12:18[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 14 msec}
INFO  22-01-15 19:12:18[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:12:18[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:12:18[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:12:18[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:12:18[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:12:18[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:12:18[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:13:49[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:13:49[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 19:13:49[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:13:49[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:13:49[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:13:49[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:13:49[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:13:49[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:13:49[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:13:57[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:13:57[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 19:13:57[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:13:57[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:13:57[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:13:57[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:13:57[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:13:57[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:13:57[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:14:38[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:14:38[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 19:14:38[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:14:38[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:14:38[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:14:38[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:14:38[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:14:38[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:14:38[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:15:31[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:15:31[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:15:31[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:15:31[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:15:31[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/photo
INFO  22-01-15 19:15:31[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
INFO  22-01-15 19:15:31[http-nio-8080-exec-7] [PhotoLogicServiceImpl:47] - Get S3 urls
INFO  22-01-15 19:15:31[http-nio-8080-exec-7] [PhotoLogicServiceImpl:48] - Email: test@gmail.com
DEBUG 22-01-15 19:15:31[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:15:31[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:15:31[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:15:31[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1

DEBUG 22-01-15 19:15:31[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select photolist0_.user_id as user_id8_5_0_, photolist0_.id as id1_5_0_, photolist0_.id as id1_5_1_, photolist0_.updated_at as updated_2_5_1_, photolist0_.created_at as created_3_5_1_, photolist0_.del_flg as del_flg4_5_1_, photolist0_.name as name5_5_1_, photolist0_.size as size6_5_1_, photolist0_.url as url7_5_1_, photolist0_.user_id as user_id8_5_1_ from photo photolist0_ where photolist0_.user_id=1
 {executed in 165 msec}
INFO  22-01-15 19:15:32[http-nio-8080-exec-7] [resultsettable:610] - 
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|user_id |id |id |updated_at |created_at            |del_flg |name                        |size  |url                                                                                 |user_id |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|
|1       |1  |1  |null       |2022-01-10 12:46:00.0 |0       |bnb_test1_1641818759328.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg |1       |
|1       |2  |2  |null       |2022-01-10 12:46:03.0 |0       |bnb_test3_1641818763060.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg |1       |
|1       |3  |3  |null       |2022-01-10 12:48:24.0 |0       |bnb_test1_1641818903793.jpg |75715 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg |1       |
|1       |4  |4  |null       |2022-01-10 12:48:29.0 |0       |bnb_test3_1641818908771.jpg |51046 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg |1       |
|1       |5  |5  |null       |2022-01-10 12:50:52.0 |0       |bnb_test4_1641819051803.jpg |93116 |https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg |1       |
|--------|---|---|-----------|----------------------|--------|----------------------------|------|------------------------------------------------------------------------------------|--------|

INFO  22-01-15 19:15:32[http-nio-8080-exec-7] [PhotoLogicServiceImpl:55] - Photo info: [PhotoApiResponse(id=1, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818759328.jpg), PhotoApiResponse(id=2, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818763060.jpg), PhotoApiResponse(id=3, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test1_1641818903793.jpg), PhotoApiResponse(id=4, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test3_1641818908771.jpg), PhotoApiResponse(id=5, url=https://test-bnb-images.s3.ap-northeast-1.amazonaws.com/bnb_test4_1641819051803.jpg)]
DEBUG 22-01-15 19:18:25[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:18:25[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 19:18:25[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:18:25[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:18:25[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:18:25[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:18:25[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:18:25[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:18:25[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:19:15[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:19:15[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:19:15[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:19:15[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:19:15[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:19:15[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:19:15[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:19:15[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:19:15[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:21:47[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:21:47[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 19:21:47[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:21:47[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:21:47[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:21:47[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:21:47[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:21:47[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:21:47[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:30:30[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:30:30[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 19:30:30[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:30:30[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:30:30[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:30:30[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:30:30[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:30:30[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:30:30[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:33:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:33:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:33:51[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:33:51[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:33:51[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:33:51[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:33:51[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:33:51[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:33:51[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:34:06[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:34:06[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:34:06[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:34:06[http-nio-8080-exec-7] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:34:06[http-nio-8080-exec-7] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:34:06[http-nio-8080-exec-7] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:34:06[http-nio-8080-exec-7] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:34:06[http-nio-8080-exec-7] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:34:06[http-nio-8080-exec-7] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:37:48[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:37:48[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 19:37:48[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:37:48[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:37:48[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:37:48[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:37:48[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:37:48[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:37:48[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:39:00[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:39:00[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:39:00[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:39:00[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:39:00[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:39:00[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:39:00[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:39:00[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:39:00[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:42:19[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:42:19[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 19:42:19[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:42:19[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:42:19[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:42:19[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:42:19[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:42:19[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:42:19[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:42:47[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:42:47[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:42:47[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:42:47[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:42:47[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:42:47[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:42:47[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:42:47[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:42:47[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:46:42[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:46:42[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:46:42[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:46:42[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:46:42[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:46:42[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:46:42[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:46:42[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:46:42[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:49:12[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:49:12[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 19:49:12[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:49:12[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:49:12[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:49:12[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:49:12[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:49:12[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:49:12[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:50:19[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:50:19[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:50:19[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:50:19[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:50:19[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:50:19[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:50:19[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:50:19[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:50:19[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 19:51:31[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:51:31[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:51:31[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 19:51:31[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 19:51:31[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 19:51:32[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 19:51:32[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 19:51:32[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 19:51:32[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:08:37[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:08:37[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:08:37[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:08:37[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:08:37[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:08:37[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:08:37[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:08:37[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
141. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:08:37[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:13:43[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:13:43[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:13:43[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:13:43[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:13:43[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:13:43[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:13:43[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:13:43[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:13:43[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:23:28[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:23:28[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 20:23:28[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:23:28[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:23:28[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:23:28[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:23:28[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:23:28[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:23:28[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:23:44[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:23:44[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:23:44[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:23:44[http-nio-8080-exec-2] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:23:44[http-nio-8080-exec-2] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:23:44[http-nio-8080-exec-2] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:23:44[http-nio-8080-exec-2] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:23:44[http-nio-8080-exec-2] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:23:44[http-nio-8080-exec-2] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:23:53[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:23:53[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:23:53[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:23:53[http-nio-8080-exec-3] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:23:53[http-nio-8080-exec-3] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:23:53[http-nio-8080-exec-3] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:23:53[http-nio-8080-exec-3] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:23:53[http-nio-8080-exec-3] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 20:23:53[http-nio-8080-exec-3] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:24:16[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:24:16[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:24:16[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:24:16[http-nio-8080-exec-4] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:24:16[http-nio-8080-exec-4] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:24:16[http-nio-8080-exec-4] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:24:16[http-nio-8080-exec-4] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:24:16[http-nio-8080-exec-4] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 20:24:16[http-nio-8080-exec-4] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:24:20[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:24:20[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:24:20[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:24:20[http-nio-8080-exec-5] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:24:20[http-nio-8080-exec-5] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:24:20[http-nio-8080-exec-5] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:24:20[http-nio-8080-exec-5] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:24:20[http-nio-8080-exec-5] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:24:20[http-nio-8080-exec-5] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:24:50[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:24:50[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:24:50[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:24:50[http-nio-8080-exec-6] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:24:50[http-nio-8080-exec-6] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:24:50[http-nio-8080-exec-6] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:24:50[http-nio-8080-exec-6] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:24:50[http-nio-8080-exec-6] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:24:50[http-nio-8080-exec-6] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:33:40[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:33:40[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 20:33:40[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:33:40[http-nio-8080-exec-8] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:33:40[http-nio-8080-exec-8] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:33:40[http-nio-8080-exec-8] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:33:40[http-nio-8080-exec-8] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:33:40[http-nio-8080-exec-8] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:33:40[http-nio-8080-exec-8] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:33:49[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:33:49[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:33:49[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:33:49[http-nio-8080-exec-9] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:33:49[http-nio-8080-exec-9] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:33:49[http-nio-8080-exec-9] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:33:49[http-nio-8080-exec-9] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:33:49[http-nio-8080-exec-9] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:33:49[http-nio-8080-exec-9] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:34:41[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:34:41[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 1 msec}
INFO  22-01-15 20:34:41[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:34:41[http-nio-8080-exec-10] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:34:41[http-nio-8080-exec-10] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:34:41[http-nio-8080-exec-10] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:34:41[http-nio-8080-exec-10] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:34:41[http-nio-8080-exec-10] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 0 msec}
INFO  22-01-15 20:34:41[http-nio-8080-exec-10] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

DEBUG 22-01-15 20:34:45[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:34:45[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 20:34:45[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at            |email          |firstname |last_login_at         |lastname |password                                                     |status |updated_at |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10 12:44:38.0 |test@gmail.com |example   |2022-01-15 09:59:25.0 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |null       |
|---|-------|----------------|----------------------|---------------|----------|----------------------|---------|-------------------------------------------------------------|-------|-----------|

INFO  22-01-15 20:34:45[http-nio-8080-exec-1] [ParameterAop:52] - Request Method: GET
INFO  22-01-15 20:34:45[http-nio-8080-exec-1] [ParameterAop:53] - Request URI: /api/user
INFO  22-01-15 20:34:45[http-nio-8080-exec-1] [ParameterAop:59] - Authenticated: test@gmail.com
DEBUG 22-01-15 20:34:45[http-nio-8080-exec-1] [sqlonly:223] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'

DEBUG 22-01-15 20:34:45[http-nio-8080-exec-1] [sqltiming:368] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select user0_.id as id1_7_, user0_.access as access2_7_, user0_.birthday as birthday3_7_, user0_.created_at as created_4_7_, user0_.email as email5_7_, user0_.firstname as firstnam6_7_, user0_.last_login_at as last_log7_7_, user0_.lastname as lastname8_7_, user0_.password as password9_7_, user0_.status as status10_7_, user0_.updated_at as updated11_7_ from user user0_ where user0_.email='test@gmail.com'
 {executed in 2 msec}
INFO  22-01-15 20:34:45[http-nio-8080-exec-1] [resultsettable:610] - 
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|id |access |birthday        |created_at          |email          |firstname |last_login_at       |lastname |password                                                     |status |updated_at |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|
|1  |1      |2004/October/21 |2022-01-10T21:44:38 |test@gmail.com |example   |2022-01-15T18:59:25 |test     |$2a$10$zcvi4PDLm2uAAAH2EmxpjeAhwPOWehUgpvVTJoyppQmQwFyCYi6IG |0      |[null]     |
|---|-------|----------------|--------------------|---------------|----------|--------------------|---------|-------------------------------------------------------------|-------|-----------|

